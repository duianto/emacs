;;; -*- Emacs-Lisp -*-
;;; WL-MK for byte-compile, install, uninstall
;;;
;;; Original by OKUNISHI Fujikazu <fuji0924@mbox.kyoto-inet.or.jp>
;;; Modified by Yuuichi Teranishi <teranisi@gohome.org>

;;;;;;;;;;;;;;;;;;;;;   DO NOT EDIT THIS FILE   ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;     INTERNAL USE ONLY     ;;;;;;;;;;;;;;;;;;;;;

;;; Code

(defvar WLDIR "./wl")
(defvar ELMODIR "./elmo")
(defvar DOCDIR "./doc")
(defvar ICONDIR "./etc/icons")
(defvar UTILSDIR "./utils")
(defvar WL_PREFIX "wl")
(defvar ELMO_PREFIX "wl")
(defvar COMPRESS-SUFFIX-LIST '("" ".gz" ".Z" ".bz2"))
(unless (boundp 'user-emacs-directory)
  (defvar user-emacs-directory (expand-file-name "~/.emacs.d/")))
;;; NEWS
(defvar wl-install-utils t)
(defconst wl-news-filename "wl-news.el")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'cl)

(condition-case () (require 'custom) (error nil))
;; for wl-vars.el
(unless (and (fboundp 'defgroup)
             (fboundp 'defcustom)
             ;; ignore broken module
             (not (featurep 'tinycustom)))
  (when (and (boundp 'emacs-major-version)
             (= emacs-major-version 19)
             (>= emacs-minor-version 29))
    (message "%s" "
  Warning: You don't seem to have \"new custom\" package installed.
           See README file of APEL package for more information.
"))
  (require 'backquote)
  (defmacro defgroup (&rest args))
  (defmacro defcustom (symbol value &optional doc &rest args)
    (let ((doc (concat "*" (or doc ""))))
      `(defvar ,symbol ,value ,doc))))

(load "bytecomp" nil t)

(unless (fboundp 'byte-compile-file-form-custom-declare-variable)
  ;; Bind defcustom'ed variables.
  (put 'custom-declare-variable 'byte-hunk-handler
       'byte-compile-file-form-custom-declare-variable)
  (defun byte-compile-file-form-custom-declare-variable (form)
    (if (memq 'free-vars byte-compile-warnings)
        (setq byte-compile-bound-variables
              (cons (nth 1 (nth 1 form)) byte-compile-bound-variables)))
    form))

(condition-case nil
    (char-after)
  (wrong-number-of-arguments
   ;; Optimize byte code for `char-after'.
   (put 'char-after 'byte-optimizer 'byte-optimize-char-after)
   (defun byte-optimize-char-after (form)
     (if (null (cdr form))
         '(char-after (point))
       form))))

(setq byte-compile-warnings '(free-vars unresolved callargs redefine))

;; v18, v19
(if (boundp 'MULE)
    (setq max-lisp-eval-depth 400))

;; FIXME: it is currently needed to byte-compile with Emacs 21.
(setq recursive-load-depth-limit nil)

(condition-case () (require 'easymenu) (error nil))

(defun config-wl-package ()
  (setq load-path (cons (expand-file-name ".") load-path))
  (setq load-path (cons (expand-file-name UTILSDIR) load-path))
  (when (not (locate-library "product"))
    (setq load-path
          (cons (concat user-emacs-directory "site-lisp/apel" ) load-path)))
  (when (not (locate-library "std11"))
    (setq load-path
          (cons (concat user-emacs-directory "site-lisp/flim" ) load-path)))
  (when (not (locate-library "mime-setup"))
    (setq load-path
          (cons (concat user-emacs-directory "site-lisp/semi" ) load-path)))
  (when (not (locate-library "w3m-ems"))
    (setq load-path
          (cons (concat user-emacs-directory "site-lisp/w3m" ) load-path))
    (setq load-path
          (cons (concat user-emacs-directory "site-lisp/w3m/shimbun" )
                load-path)))
  (require 'install)
  (load "./WL-ELS" nil nil t)
  ;; product.el version check
  (require 'product)
  (require 'smtp)
  (require 'mime-setup)
  (defvar LISPDIR
    (concat user-emacs-directory "site-lisp/wl/lisp")))

(defun compile-wl-package ()
  (config-wl-package)
  (mapc
   (lambda (x)
     (compile-elisp-modules (cdr x) (car x))) modules-alist))

;;; ToDo
;;; * MORE refine code (^_^;

;;; End
