# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2013/04/18 19:17:34$
# License: Expat
#
#+TITLE: el-get で install した雑多な物
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+SETUPFILE: ./export-config.org
#+BEGIN_HTML
---
layout: emacs
title: el-get で install した雑多な物
---
#+END_HTML
* 始めに
  Emacs 24 から =package.el= が公式に同梱されるようになりました.
  これを用いることで, ELPA(Emacs Lisp Package Archive) にある
  膨大なパッケージ群を導入する事ができます.
  ...が, 個人的にはちょっと気にくわない点があって, 多分 [fn:1] にも挙げられている以下の点:
  #+BEGIN_HTML
  <ul>
    <li> まず、アップデート用のコマンドがありません。別バージョンをインストールすることになります。
         だいたいの方は上書きでアップデートすることを望んでいるものだと思います。</li>
    <li> デフォルトでは設定されていませんが、既にレポジトリはいくつかあり、ユーザーが自由に登録できるものもあります。
         ただその際、elisp の側から一定の方法に則って登録してあげる必要がありますので、パッケージの登録が面倒です。
         適当に追加してすぐ使いたい、という訳にはいきません。</li>
    <li> 追加が面倒なので無いものは auto-install 等でインストールすることになってしまうため、
         結局 package.el で管理することはできなくなります。</li>
  </ul>
  #+END_HTML
  が気になっています.

  あとやはりソースそのものと VCS の履歴を覗きたくなる事が多いので, 結局
  =git= の submoudle として管理し始めることに. うーん...

  そこで =el-get= [fn:2] を使う事に.
  - アップデート機能有
  - レシピ(=rcp=)を追加するか =el-get-sources= というリストに追加することで
    気軽にオレオレレシピが書け, パッケージ登録やサーバへの反映を待つ必要が無い
  という点が気にいっています.

  el-get の install 自体は =~/.emacs.d/init.el= ([[file:~/.emacs.d/EmacsBasic.html][解説]]) で行なっているので,
  ここでは実際のパッケージの install を記述しておきます.
* [[http://www.morishima.net/~naoto/elscreen-en/][ElScreen]]
  Emacsのバッファを GNU Screen っぽく扱う素敵 elisp.
  最近新しいリリースが無い & APEL 依存があるのが難点ですかね.
  APEL 非依存にするために改造中の folk もありますが =elscreen-wl= が動かない, とか, まだ前途多難っぽいです.

  ここでは [[https://github.com/knu][MUSHA]] さんが folk している branch から
  取得する [[https://raw.github.com/uwabami/dot.emacs.d/master/recipes/elscreen.rcp][recipes/elscreen.rcp]] を使っています. 中身は以下の通り:
  #+BEGIN_EXAMPLE
    (:name elscreen
           :description "Screen Manager for Emacsen, support Emacs24"
           :type github
           :pkgname "knu/elscreen"
           :depends apel
           )
  #+END_EXAMPLE
  インストールと設定.
  elscreen 自体の設定は, 設定はキーバインドを =\C-o= に変えたくらい.
  ついでに
  #+BEGIN_SRC emacs-lisp
    (el-get 'sync '(elscreen))
    (setq elscreen-prefix-key (kbd "C-o"))
    (setq elscreen-display-tab 4)
    (require 'elscreen nil 'noerror)
  #+END_SRC
  =zsh= と =elscreen= の連携も設定している.
  元ネタは [[http://d.hatena.ne.jp/syohex/20111026/1319606395][cdeを改良 - Life is very short]]
  =~/.zshrc= あたりに
  #+BEGIN_SRC sh
    function cde () {
        EMACS_CWD=`emacsclient -e "
        (if (featurep 'elscreen)
              (elscreen-current-directory)
            (non-elscreen-current-directory))" | sed 's/^"\(.*\)"$/\1/'`
        echo "chdir to $EMACS_CWD"
        cd "$EMACS_CWD"
    }
  #+END_SRC
  と書いておくと吉
  #+BEGIN_SRC emacs-lisp
    (defun elscreen-current-directory ()
      (let* (current-dir
             (active-file-name
              (with-current-buffer
                  (let* ((current-screen (car (elscreen-get-conf-list 'screen-history)))
                         (property (cadr (assoc current-screen
                                                (elscreen-get-conf-list 'screen-property)))))
                    (marker-buffer (nth 2 property)))
                (progn
                  (setq current-dir (expand-file-name (cadr (split-string (pwd)))))
                  (buffer-file-name)))))
        (if active-file-name
            (file-name-directory active-file-name)
          current-dir)))

    (defun non-elscreen-current-directory ()
      (let* (current-dir
             (current-buffer
              (nth 1 (assoc 'buffer-list
                            (nth 1 (nth 1 (current-frame-configuration))))))
             (active-file-name
              (with-current-buffer current-buffer
                (progn
                  (setq current-dir (expand-file-name (cadr (split-string (pwd)))))
                  (buffer-file-name)))))
        (if active-file-name
            (file-name-directory active-file-name)
          current-dir)))
  #+END_SRC
* [[http://d.hatena.ne.jp/mooz/20101003/p1][zlc.el で Emacs のミニバッファ補完 zsh ライクに]] [fn:2]
  anything の候補搾り込みはあんまり好きではないので.
  #+BEGIN_SRC emacs-lisp
    (el-get 'sync '(zlc))
    (require 'zlc nil 'noerror)
    (zlc-mode t)
    (let ((map minibuffer-local-map))
      (define-key map (kbd "<backtab>") 'zlc-select-previous)
      (define-key map (kbd "S-<tab>")   'zlc-select-previous)
     (define-key map (kbd "C-p")       'zlc-select-previous-vertical)
     (define-key map (kbd "C-n")       'zlc-select-next-vertical)
     (define-key map (kbd "C-b")       'zlc-select-previous)
     (define-key map (kbd "C-f")       'zlc-select-next)
     (define-key map (kbd "C-d")       'zlc-reset))
    ;; (setq zlc-select-completion-immediately t)
  #+END_SRC
* [[http://d.hatena.ne.jp/tarao/20101011/1286804507][Yet another icompelete]] [fn:4]
  zlc をさらに素敵にしてくれる.
  #+BEGIN_SRC emacs-lisp
    (el-get 'sync '(yaicomplete))
    (require 'yaicomplete nil 'noerror)
    (yaicomplete-mode)
  #+END_SRC
* [[http://d.hatena.ne.jp/kiwanami/20110221/1298293727][パスワード管理ツール id-manager.el]] [fn:5] [0/1]
  無いと途方に暮れるくらい, 依存しまくり.
  レシピは [[https://raw.github.com/uwabami/dot.emacs.d/master/recipes/id-manager.rcp][recipes/id-manager.rcp]] を使っています. 中身は以下の通り:
  #+BEGIN_EXAMPLE
  (:name id-manager
       :description "ID/Password management tool for emacs users."
       :type github
       :pkgname "kiwanami/emacs-id-manager")
  #+END_EXAMPLE
  インストールと設定は以下. 特に凝った事はしていない...筈
  #+BEGIN_SRC emacs-lisp
    (when (file-exists-p (concat user-emacs-directory ".id-manager-use"))
      (el-get 'sync '(id-manager))
      (require 'id-manager nil 'noerror)
      (global-set-key (kbd "M-7") 'id-manager)
      (setq idm-database-file
            (expand-file-name
             (concat (getenv "HOME") "/.gnupg/idm-db.gpg"))))
  #+END_SRC
  - [ ] KeePassX に import できる形式に変換できないだろうか?
* [[http://d.hatena.ne.jp/rubikitch/20091224/recentf][人は俺を「recentfマスター」と呼ぶ]] [fn:6]
  recentf と recentf-ext の設定.
  #+BEGIN_SRC emacs-lisp
    (el-get 'sync '(recentf-ext))
    (add-hook 'after-init-hook 'recentf-mode)
    (setq recentf-max-saved-items 2000)
    (setq recentf-save-file
          (expand-file-name
           (concat my:user-emacs-temporary-directory "recentf")))
    (setq recentf-auto-cleanup 'never)
    (run-with-idle-timer 300 t 'recentf-save-list)
    (run-with-idle-timer 600 t 'recentf-cleanup)
    (require 'recentf-ext nil 'noerror)
  #+END_SRC
* auto-async-byte-compile
  #+BEGIN_SRC emacs-lisp
    (when emacs24-p
      (progn
        (el-get 'sync '(auto-async-byte-compile))
        (add-hook 'emacs-lisp-mode-hook 'enable-auto-async-byte-compile-mode)))
  #+END_SRC
* RGBコードを popup で表示する
  #+BEGIN_SRC emacs-lisp
    (when emacs24-p
      (progn
        (el-get 'sync '(popup-color-at-point))
        (load (concat el-get-dir "popup-color-at-point/popup-color-at-point"))
        (global-set-key (kbd "C-c c") 'popup-color-at-point)))
  #+END_SRC
* Footnotes

[fn:1] el-get: [[http://www.emacswiki.org/emacs/el-get]]

[fn:2] [[http://shishithefool.blogspot.jp/2012/04/el-get-emacs.html][It's just same as dust ahead of a wind: el-get を使って Emacs でパッケージ管理]]

[fn:3] zlc.el で Emacs のミニバッファ補完 zsh ライクに: [[http://d.hatena.ne.jp/mooz/20101003/p1]]

[fn:4] Yet another icompelete: [[http://d.hatena.ne.jp/tarao/20101011/1286804507]]

[fn:5] パスワード管理ツール id-manager.el: [[http://d.hatena.ne.jp/kiwanami/20110221/1298293727]]

[fn:6] 人は俺を「recentfマスター」と呼ぶ: [[http://d.hatena.ne.jp/rubikitch/20091224/recentf]]
