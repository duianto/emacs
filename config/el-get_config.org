# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2012/12/31 18:20:18$
# License: Expat
#
#+TITLE: el-get で パッケージ管理
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+SETUPFILE: ./export-config.org
#+BEGIN_HTML
---
layout: emacs
title: el-get で パッケージ管理
---
#+END_HTML
* 初期設定
  proxy 環境下で url-retrive するのがうまく行かないので
  submodule として site-lisp 以下に持っておくことにした.
  また, レシピの置き場所を ~/.emacs.d/recipes にしている(default?)
  #+BEGIN_SRC emacs-lisp
    (eval-and-compile (require 'el-get))
    ;;; recipe の置き場所の追加
    (add-to-list 'el-get-recipe-path
                 (expand-file-name
                  (concat user-emacs-directory "recipes")))
    (el-get 'sync)
  #+END_SRC
* [[https://raw.github.com/awasira/cp5022x.el/master/cp5022x.el][cp5022x.el]]
  文字コード関連. 機種依存文字とかをよきにとりはからうために.
  レシピは [[file:~/dot.emacs.d/recipes/cp5022x.rcp][recipes/cp5022x.rcp]] を参照の事.
  取得元は Github なので, git の proxy 設定ができていれば取得可能.
  #+BEGIN_SRC emacs-lisp
    (unless (locate-library "cp5022x")
      (el-get 'sync '(cp5022x)))
  #+END_SRC
* [[http://emacswiki.org/emacs/auto-async-byte-compile.el][auto-async-byte-compile.el]]
  取得元は emacswiki.
  環境変数が正しく設定されていれば, きちんと install できる, 筈.
  #+BEGIN_SRC emacs-lisp
    (unless (locate-library "auto-async-byte-compile")
      (el-get 'sync '(auto-async-byte-compile)))
    ;; theme.el で終わるファイルは compile しない
    (when (require 'auto-async-byte-compile nil t)
      (setq auto-async-byte-compile-exclude-files-regexp "theme\.el$")
      (add-hook 'emacs-lisp-mode-hook
                'enable-auto-async-byte-compile-mode))
  #+END_SRC
* [[http://d.hatena.ne.jp/kiwanami/20110221/1298293727][パスワード管理ツール id-manager.el]]
  無いと途方に暮れるくらい, 依存しまくり.
  レシピは [[file:~/dot.emacs.d/recipes/id-manager.rcp][recipes/id-manager.rcp]] を参照の事.
  取得元は Github なので, git の proxy 設定ができていれば取得可能.
  #+BEGIN_SRC emacs-lisp
    (unless (locate-library "id-manager")
      (el-get 'sync 'id-manager))
    (when (require 'id-manager nil t)
      (global-set-key (kbd "M-7") 'id-manager)
      (setq idm-database-file
            (expand-file-name
             (concat (getenv "HOME") "/.gnupg/idm-db.gpg"))))
  #+END_SRC
* [[http://www.morishima.net/~naoto/elscreen-en/][ElScreen]]
  Emacsのバッファを GNU Screen っぽく扱う素敵 elisp.
  最近新しいリリースが無い & APEL 依存があるのが難点だろうか.
  ここでは [[https://github.com/knu][MUSHA]] さんが folk している branch から
  取得する [[file:~/dot.emacs.d/recipes/elscreen-knu-branch.rcp][recipes/elscreen-knu-branch.rcp]] を使っている.
  #+BEGIN_SRC emacs-lisp
    (unless (locate-library "elscreen")
      (el-get 'sync '(elscreen-knu-branch)))
   #+END_SRC
* [[http://openlab.ring.gr.jp/skk/ddskk-ja.html][Daredevil SKK (DDSKK)]]
  古い skk しか無い場合には ddskk を el-get する.
  ここでは [[https://github.com/hsaito][Hideki Saito]] さんの github にミラーから
  取得する [[file:~/dot.emacs.d/recipes/ddskk-hsaito-branch.rcp][recipes/ddskk-hsaito-branch.rcp]] を使っている.
  #+BEGIN_SRC emacs-lisp
     (unless (locate-library "skk-sticky")
       (el-get 'sync '(ddskk-hsaito-branch)))
  #+END_SRC
* MUA: Wanderlust 関連
  Wanderlust本体と
    - [[http://uwabami.github.com/rail/][RAIL: Replace Agent-String Internal Library]]
    - elscreen-wl
    - google-contacts-wl
    - c-sig
  を導入している.

  elscreen-wl は elscreen と Wanderlust の連携.
  前述の [[https://github.com/knu][MUSHA]] さんが folk している branch から
  install している場合はここで再度 el-get する必要は無いが,
  Debian パッケージの場合には同梱されていなかったりするので,
  ここで再度 =el-get sync= している.

  [[http://uwabami.github.com/rail/][RAIL: Replace Agent-String Internal Library]]
  の recipe は
  [[file:~/.emacs.d/recipes/rail.rcp][recipes/rail.rcp]] を参照の事.

  [[https://github.com/uwabami/google-contacts-wl][google-contacts-wl]] は Google Contacts -> Wanderlust Address file
  の 1-way convertor. el-get 用の recipe は
  [[file:~/.emacs.d/recipes/google-contacts-wl.rcp][recipes/google-contacts-wl.rcp]] を参照の事.

  c-sig は upstream dead?
  Debian のリポジトリ (alioth) から取得する
  [[file:~/.emacs.d/recipes/c-sig-alioth.rcp][recipes/c-sig-alioth.rcp]] を使っている.
  #+BEGIN_SRC emacs-lisp
     (unless (locate-library "wl")
       (el-get 'sync '(wanderlust)))
     (unless (locate-library "rail")
       (el-get 'sync '(rail)))
     (unless (locate-library "elscreen-wl")
       (el-get 'sync '(elscreen-wl-knu-branch)))
     (unless (locate-library "google-contacts-wl")
       (el-get 'sync '(google-contacts-wl)))
  #+END_SRC
