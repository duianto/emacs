# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# License: Expat
#
#+TITLE: [[file:el-get_config.org][el-get での package の install]]
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+DATE: 2015-01-14 02:18:25
#+SETUPFILE: ./export-config.org
* 始めに
  [[http://tapoueh.org/emacs/el-get.html][el-get]] [fn:1] で必要なパッケージを追加インストールします.
  el-get の install 自体は =~/.emacs.d/init.el= ([[file:~/.emacs.d/EmacsBasic.html][解説]]) で行なっているので,
  ここでは実際のパッケージの install を記述しておきます.
  #+BEGIN_SRC emacs-lisp
    (require 'el-get nil 'noerror)
  #+END_SRC
* local recipe の定義
  el-get で定義されていない recipe を定義したり, 既存の recipe を上書きしたり.
  #+BEGIN_SRC emacs-lisp
    (setq
     el-get-sources
     '(
       (:name cp5022x
              :type github
              :pkgname "awasira/cp5022x.el")
       (:name elscreen
              :type github
              :pkgname "emacs-jp/elscreen"
              )
       (:name auto-complete
              :website "https://github.com/auto-complete/auto-complete"
              :description "The most intelligent auto-completion extension."
              :type github
              :pkgname "auto-complete/auto-complete"
              :depends (cl-lib popup fuzzy)
              :features auto-complete-config
              )
       ;; (:name yaicomplete
       ;;        :type http
       ;;        :url "https://raw.githubusercontent.com/tarao/elisp/master/yaicomplete.el"
       ;;        )
       ))
  #+END_SRC
* el-get で定義されているレシピから install するパッケージ
  #+BEGIN_SRC emacs-lisp
        (setq
         my:el-get-packages
         '(  "exec-path-from-shell"
    ;;         "auto-complete"
    ;;         "ido-ubiquitous"
    ;;         "ido-vertical-mode"
    ;;         "smex"
    ;;         "zlc"
           ))
  #+END_SRC
* 環境依存するパッケージの定義
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (when (>= emacs-major-version 24)
       (setq my:el-get-packages
             (append
              my:el-get-packages
              '("flycheck")
              ))
       )
   #+END_SRC
** Theme
   自作のテーマを使用中
   #+BEGIN_SRC emacs-lisp
     (when (>= emacs-major-version 24)
       (setq el-get-sources
             (append
              el-get-sources
              '(
                (:name darkpastel-theme
                       :type github
                       :pkgname "uwabami/darkpastel-theme"
                       :prepare (add-to-list 'custom-theme-load-path default-directory)
                       )
                )))
       )
   #+END_SRC
** id-manager
   #+BEGIN_SRC emacs-lisp
     (when (ignore-errors (file-exists-p (concat (getenv "HOME") "/.gnupg/idm-db.gpg")))
       (setq el-get-sources
             (append
              el-get-sources
              '(
                (:name id-manager
                       :type github
                       :pkgname "kiwanami/emacs-id-manager")
                )))
       )
   #+END_SRC
** DDSKK
   #+BEGIN_SRC emacs-lisp
     (when (or (not (locate-library "skk-sticky"))
               (string-match "14" (skk-version)))
       (setq el-get-sources
             (append
              el-get-sources
              '(
                (:name ddskk_debian
                       :type git
                       :url "https://anonscm.debian.org/git/collab-maint/ddskk.git"
                       :autoloads nil
                       :info "doc/skk.info"
                       :features ("skk-setup")
                       :build `((,el-get-emacs "-batch" "-q" "-no-site-file" "-l" "SKK-MK" "-f" "SKK-MK-compile")
                                (,el-get-emacs "-batch" "-q" "-no-site-file" "-l" "SKK-MK" "-f" "SKK-MK-compile-info")
                                ("mv" "skk-setup.el.in" "skk-setup.el"))
                       ))))
       )
   #+END_SRC
** MUA:: Wanderlust 関連
   #+BEGIN_SRC emacs-lisp
     (when (and (locate-library "wl")
                (file-exists-p (concat user-emacs-directory ".wl-use")))
       (progn
         (setq el-get-sources
               (append
                el-get-sources
                '(
                  (:name gcontacts-get-wl
                         :type github
                         :pkgname "uwabami/gcontacts-get-wl"
                         )
                  (:name elscreen-wl
                         :type github
                         :depends elscreen
                         :pkgname "syohex/emacs-elscreen-wl"
                         )
                  ;; (:name mhc
                  ;;        :type github
                  ;;        :pkgname "yoshinari-nomura/mhc"
                  ;;        :depends (calfw)
                  ;;        :prepare (add-to-list 'load-path (concat default-directory "emacs"))
                  ;;        )
                  )))
         (unless (locate-library "c-sig")
           (setq el-get-sources
                 (append
                  el-get-sources
                  '(
                    (:name c-sig
                           :description "insert custimizable signature"
                           :type git
                           :url "https://anonscm.debian.org/git/collab-maint/c-sig.git"
                           :autoloads nil)
                    ))))
         (unless (locate-library "rail")
           (setq el-get-sources
                 (append
                  el-get-sources
                  '(
                    (:name rail
                           :type github
                           :pkgname "uwabami/rail"
                           :autoloads nil
                           :build `(("make" ,(concat " EMACS=" el-get-emacs)))
                           )
                    ))))
         (setq my:el-get-packages
               (append
                my:el-get-packages
                '("offlineimap")
                ))
         ))
   #+END_SRC
** TeX 関連
   #+BEGIN_SRC emacs-lisp
     (when (and (and (ignore-errors (el-get-executable-find "platex"))
                     (ignore-errors (el-get-executable-find "latexmk")))
                (locate-library "auctex"))
       (progn
         (setq el-get-sources
               (append
                el-get-sources
                '(
                  (:name auctex-latexmk
                         :type github
                         :pkgname "tom-tan/auctex-latexmk"))))
         ;; (setq my:el-get-packages
         ;;       (append
         ;;        my:el-get-packages
         ;;        '("zotelo")))
         ))
   #+END_SRC
** tDiary
   #+BEGIN_SRC emacs-lisp
     (when (and (file-directory-p (expand-file-name "~/ownCloud/tdiary"))
                (file-exists-p (concat user-emacs-directory ".tdiary-use")))
       (progn
         (setq el-get-sources
               (append
                el-get-sources
                '(
                  (:name tdiary-mode
                         :website "https://github.com/tdiary/tdiary-contrib/tree/master/util"
                         :description "Major mode for tDiary editing"
                         :depends http-el
                         :type http
                         :url "https://raw.githubusercontent.com/tdiary/tdiary-contrib/master/util/tdiary-mode/tdiary-mode.el"
                         :prepare (add-to-list 'load-path default-directory)
                         )
                  (:name http-el
                         :website "https://github.com/tdiary/tdiary-contrib/tree/master/util"
                         :description "utils for HTTP"
                         :type http
                         :url "https://raw.githubusercontent.com/tdiary/tdiary-contrib/master/util/tdiary-mode/http.el"
                         :prepare (add-to-list 'load-path default-directory)
                         )
                  )))
         ))
   #+END_SRC
** カレンダー関連
   #+BEGIN_SRC emacs-lisp
     (when (and (>= emacs-major-version 24)
                (file-exists-p (concat user-emacs-directory ".calendar-use")))
       (progn
         (setq el-get-sources
               (append
                el-get-sources
                '(
                  (:name org-gcal
                         :description "Org sync with Google Calendar."
                         :website "https://github.com/myuhe/org-gcal"
                         :type github
                         :depends (deferred request alert cl-lib)
                         :pkgname "myuhe/org-gcal.el"
                         :prepare (add-to-list 'load-path default-directory)
                         )
                  )))
         (setq my:el-get-packages
               (append
                my:el-get-packages
                '("calfw"
                  "japanese-holidays"
                  )
                ))
         ))
   #+END_SRC
** elscreen-howm
   #+BEGIN_SRC emacs-lisp
     (when (locate-library "howm")
       (progn
         (setq el-get-sources
               (append
                el-get-sources
                '(
                  (:name elscreen-howm
                         :website "https://github.com/knu/elscreen"
                         :type http
                         :depends elscreen
                         :url "https://raw.githubusercontent.com/knu/elscreen/master/elscreen-howm.el"
                         :prepare (add-to-list 'load-path default-directory)
                         )
                  )))
         ))
   #+END_SRC
** org-sync
   #+BEGIN_SRC emacs-lisp
     (when (file-directory-p "~/ownCloud/org")
       (progn
         (setq el-get-sources
               (append
                el-get-sources
                '(
                  (:name org-sync
                         :website "http://orgmode.org/worg/org-contrib/gsoc2012/student-projects/org-sync/"
                         :description "Synchronize Org documents with external services."
                         :type git
                         :url "git://orgmode.org/org-sync.git"
                         ;; :depends (org-mode json) <-- skip org-mode because of install as git submodule
                         :depends (json)
                         :prepare (progn
                                    (autoload 'os "os"
                                      "Sync org-mode files with different online services" t)
                                    (autoload 'os-import "os"
                                      "Import information to sync with org-mode from different online services" t)
                                    (autoload 'os-sync "os"
                                      "Sync current org-mode file with service it is bound to" t))
                         )
                  )))
         ))
   #+END_SRC
** Web page & Muse
   #+BEGIN_SRC emacs-lisp
     (setq el-get-sources
           (append
            el-get-sources
            '(
              (:name ox-jekyll
                     :website "https://github.com/yoshinari-nomura/org-octpress"
                     :type http
                     :url "https://raw.githubusercontent.com/yoshinari-nomura/org-octopress/master/ox-jekyll.el"
                     :prepare (add-to-list 'load-path default-directory)
                     )
              )))
     (when (and (file-directory-p "~/Public")
                (not (locate-library "muse")))
       (progn
         (setq my:el-get-packages
               (append
                my:el-get-packages
                '("muse")
                ))
         )
       )
   #+END_SRC
** navi2ch
   #+BEGIN_SRC emacs-lisp
     (when (file-exists-p (concat user-emacs-directory ".navi2ch-use"))
       (progn
         (setq el-get-sources
               (append
                el-get-sources
                '(
                  (:name navi2ch
                         :website "http://navi2ch.sourceforge.net/index.ja.html"
                         :description "navigator for 2ch with emacsen"
                         :type github
                         :pkgname "naota/navi2ch"
                         :build `(("./configure" ,(concat "--with-emacs=" el-get-emacs)) "make")
                         :autoloads nil
                         )
                  )))
         ))
   #+END_SRC
* 実際のインストール作業
  #+BEGIN_SRC emacs-lisp
    (setq my:el-get-packages
          (append
           my:el-get-packages
           (loop for src in el-get-sources collect (el-get-source-name src))))
    (el-get 'sync my:el-get-packages)
  #+END_SRC
* Footnotes

[fn:1] el-get: http://tapoueh.org/emacs/el-get.html
