# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#+TITLE: 環境に依存しない(筈の)設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+DATE: 2016-08-17 10:58:15
#+LANG: ja
#+LAYOUT: page
#+CATEGORIES: cc-env emacs
#+PERMALINK: cc-env/emacs/config/basic_config.html
* 始めに
  主にEmacs本体に同梱されている拡張に関する設定集．
* 無効化するための関数の定義
  =line-number-mode= など「有効無効をtoggleする関数」は
  慣習的に =0= 以下の数字を指定すると明示的に無効化できるので、
  =-1= を設定する関数を定義しておく.
  #+BEGIN_SRC emacs-lisp
    (defun my:disable-builtin-mode (mode)
      "与えられた mode が存在するのであれば -1 をセットして無効化"
      (if (fboundp mode) (funcall mode -1)))
  #+END_SRC
* 基本的なキーバインドの設定
  既に手癖になってしまっているアレコレ．
  特に =[home]= と =[end]= は無いと途方に暮れます．
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-h")     'backward-delete-char)
    (global-set-key (kbd "C-c M-a") 'align-regexp)
    (global-set-key (kbd "C-c ;")   'comment-region)
    (global-set-key (kbd "C-c M-;") 'uncomment-region)
    (global-set-key (kbd "C-/")     'undo)
    (global-set-key (kbd "C-x M-b") 'ibuffer-other-window)
    (global-set-key (kbd "C-c M-r") 'replace-regexp)
    (global-set-key (kbd "C-c r")   'replace-string)
    (global-set-key (kbd "<home>")  'beginning-of-buffer)
    (global-set-key "\M-[7~"        'beginning-of-buffer)
    (global-set-key (kbd "<end>")   'end-of-buffer)
    (global-set-key "\M-[8~"        'end-of-buffer)
  #+END_SRC
  [[https://github.com/k1LoW/emacs-drill-instructor/wiki][鬼軍曹.el]] とかで強制した方が良いのかも、とかごく偶に思いますが(思うだけ)．
* Emacs server
  #+BEGIN_SRC emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+END_SRC
* 組み込みGnuTLS の無効化
  なんか挙動が変な気がするので，とりあえず無効化しておく．
  #+BEGIN_SRC emacs-lisp
    ;; (defun gnutls-available-p ()
    ;;   "Function redefined in order not to use built-in GnuTLS support"
    ;;   nil)
  #+END_SRC
  そのうち戻すかも．
* =whitespace=: 空白の強調表示
  #+BEGIN_SRC emacs-lisp
    (require 'whitespace nil 'noerror)
    (setq whitespace-line-column 72)
    (setq whitespace-style
          '(face              ; faceを使って視覚化する．
            trailing          ; 行末の空白を対象とする．
            tabs              ; tab
            spaces            ; space
            ))
    (setq whitespace-display-mappings
          '((space-mark ?\u3000 [?\u25a1])
            ;; WARNING: the mapping below has a problem. When a TAB
            ;; occupies exactly one column, it will display the character
            ;; ?\xBB at that column followed by a TAB which goes to the
            ;; next TAB column. If this is a problem for you, please,
            ;; comment the line below.
            (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t])))
    (setq whitespace-space-regexp "\\(\u3000+\\)")
    ;; デフォルトで視覚化を有効にする．
    (global-whitespace-mode 1)
  #+END_SRC
* =uniquify=: モードラインのファイル名にディレクトリも表示する
  #+BEGIN_SRC emacs-lisp
    (require 'uniquify nil 'noerror)
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
    (setq uniquify-min-dir-content 1)
  #+END_SRC
* =saveplace=: 前回の修正位置を記憶する.
  記憶の保存先は =~/.emacs.d/tmp/emacs-places= に変更.
  #+BEGIN_SRC emacs-lisp
    (require 'saveplace nil 'noerror)
    (setq-default save-place t)
    (setq save-place-file
          (convert-standard-filename (concat my:temp-dir "emacs-places")))
  #+END_SRC
* =time-stamp=: 保存時に timestamp を自動更新
  デフォルトではいろいろと衝突したので
  更新文字列を変更し， =＄Lastupdate: 2= (＄は半角) があったら timestamp を更新する様にした．
  #+BEGIN_SRC emacs-lisp
    (require 'time-stamp nil 'noerror)
    (setq time-stamp-active t)
    (setq time-stamp-line-limit 10)
    (setq time-stamp-start "$Lastupdate: 2")
    (setq time-stamp-end "\\$")
    (setq time-stamp-format "%03y-%02m-%02d %02H:%02M:%02S")
    (add-hook 'before-save-hook 'time-stamp)
  #+END_SRC
  モード独自の設定(例えば Org とか)に関しては別途．
* =tramp=: 使わないので無効化?
  無効化したいんだけれど，うまくいってない，ような...
  #+BEGIN_SRC emacs-lisp
    (setq tramp-persistency-file-name (concat my:temp-dir "tramp"))
    (setq tramp-default-method "scpx")
  #+END_SRC
* =bookmark=: bookmark ファイル
  イマイチ使いこなせてない.
  #+BEGIN_SRC emacs-lisp
    (setq bookmark-default-file (concat my:share-dir "bookmarks"))
  #+END_SRC
* =edit-server=: chrome/chromium の textarea を Emacs で編集
  chromium を使うのを止めたので無効化
  #+BEGIN_SRC emacs-lisp
    ;; (when (or (executable-find "chromium")
    ;;           (executable-find "chrome"))
    ;;   (progn
    ;;     (el-get-bundle edit-server)
    ;;     (require 'edit-servern nil 'noerror)
    ;;     (setq edit-server-new-frame nil)
    ;;     (edit-server-start)))
  #+END_SRC
* browse-url
  Firefox → emacs-w3m → w3 の順で探索． eww もそのうち試す．
  Firefox の呼び出し方が変わったので、そのために関数を追加．
  詳細は [[http://www.emacswiki.org/emacs/BrowseUrl]] を参照のこと．
  #+BEGIN_SRC emacs-lisp
    (defun browse-url-firefox (url &optional new-window)
      "@see http://www.emacswiki.org/emacs/BrowseUrl"
      (interactive (browse-url-interactive-arg "URL: "))
      (setq url (browse-url-encode-url url))
      (let* ((process-environment (browse-url-process-environment))
             (window-args (if (browse-url-maybe-new-window new-window)
                              (if browse-url-firefox-new-window-is-tab
                                  '("-new-tab")
                                '("-new-window"))))
             (ff-args (append browse-url-firefox-arguments window-args (list url)))
             (process-name (concat "firefox " url))
             (process (apply 'start-process process-name nil
                             browse-url-firefox-program ff-args) ))))
    (require 'browse-url nil 'noerror)
    (with-eval-after-load "browse-url"
      (cond
       ;; ((executable-find "chromium")
       ;;  (setq browse-url-generic-program "chromium"))
       ;; ((executable-find "chrome")
       ;;  (setq browse-url-generic-program "chrome"))
       ((executable-find "firefox")
        (setq browse-url-browser-function 'browse-url-firefox))
       ((and (executable-find "w3m")
             (locate-library "w3m"))
        (setq browse-url-browser-function 'w3m-browse-url))
       (t
        (setq browse-url-browser-function 'browse-url-w3))
       ))
    (global-set-key (kbd "C-c C-j") 'browse-url-at-point)
  #+END_SRC
* 標準機能の設定
** 表示関連
*** 起動時のスプラッシュ画面を表示しない
    #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-screen t)
      (setq inhibit-startup-message t)
    #+END_SRC
*** フレーム, ツールバー等を非表示に
    大抵の場合ターミナル内で =-nw= として起動するし,
    メニューは触ったことないので使わない.
    #+BEGIN_SRC emacs-lisp
      (my:disable-builtin-mode 'tool-bar-mode)
      (my:disable-builtin-mode 'scroll-bar-mode)
      (my:disable-builtin-mode 'menu-bar-mode)
      (my:disable-builtin-mode 'blink-cursor-mode)
      ;; カーソルの位置が何文字目かを表示する
      (my:disable-builtin-mode 'column-number-mode)
      ;; カーソルの位置が何行目かを表示する
      (my:disable-builtin-mode 'line-number-mode)
    #+END_SRC
*** ベル無効化
    #+BEGIN_SRC emacs-lisp
      (setq ring-bell-function 'ignore)
    #+END_SRC
*** 選択リージョンに色付け
    #+BEGIN_SRC emacs-lisp
       (setq transient-mark-mode t)
    #+END_SRC
*** 対応する括弧を強調表示
    #+BEGIN_SRC emacs-lisp
    (show-paren-mode 1)
    (setq show-paren-style 'mixed)
    #+END_SRC
*** linum-mode
    必要に応じて =linum-mode= を有効にするので,
    通常はモードラインに行番号や桁番号を表示しないようする.
    ついでに =linum-mode= を有効にした場合の桁表示を 5 桁に.
    #+BEGIN_SRC emacs-lisp
      (setq linum-format "%5d ")
    #+END_SRC
** 編集関連
*** yes or no を y or n に
    #+BEGIN_SRC emacs-lisp
       (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** ファイル名の大文字小文字を区別しない(zsh風)
    #+BEGIN_SRC emacs-lisp
      (setq read-file-name-completion-ignore-case t)
    #+END_SRC
*** tab 幅 4, tab でのインデントはしない
    #+BEGIN_SRC emacs-lisp
       (setq-default tab-width 4)
       (setq-default indent-tabs-mode nil)
    #+END_SRC
*** 文字列は 72 文字で折り返し(RFC2822風味)
    #+BEGIN_SRC emacs-lisp
       (setq-default fill-column 72)
       (setq paragraph-start '"^\\([ 　・○<\t\n\f]\\|(?[0-9a-zA-Z]+)\\)")
       (setq-default auto-fill-mode nil)
    #+END_SRC
*** 長い行の折り返し
    デフォルトは折り返し有で =\C-c M-l= で toggle
    #+BEGIN_SRC emacs-lisp
      (set-default 'truncate-lines nil)
      (setq truncate-partial-width-windows nil)
      (define-key global-map (kbd "C-c M-l") 'toggle-truncate-lines)
    #+END_SRC
*** バッファ終端で newline を入れない
    #+BEGIN_SRC emacs-lisp
       (setq next-line-add-newlines nil)
    #+END_SRC
*** symlink は常においかける
    #+BEGIN_SRC emacs-lisp
      (setq vc-follow-symlinks t)
    #+END_SRC
*** 変更のあったファイルの自動再読み込み
    #+BEGIN_SRC emacs-lisp
      (global-auto-revert-mode 1)
    #+END_SRC
*** バックアップとauto-saveの作成/位置の変更
   =~/.emacs.d/init.el= にて =my:emacs-backup-dir= を設定して,
   =~/.emacs.d/tmp/= 以下に
   backup と auto-save ファイルを集約する
   #+BEGIN_SRC emacs-lisp
      (setq auto-save-list-file-prefix (concat my:temp-dir ".saves-"))
      (setq auto-save-default t)
      (setq auto-save-timeout 15)
      (setq auto-save-interval 60)
      (setq make-backup-files t)
      (setq backup-by-copying t) ; symlink は使わない
      (setq backup-directory-alist `(("." . ,my:temp-dir)))
      (setq auto-save-file-name-transforms `((".*" ,my:temp-dir t)))
      (setq version-control t)
      (setq kept-new-versions 5)
      (setq kept-old-versions 5)
      (setq delete-old-versions t)
      (setq delete-auto-save-files t)
   #+END_SRC
*** recentf
   最近使ったファイル履歴の保管
   #+BEGIN_SRC emacs-lisp
     (setq recentf-max-saved-items 10000)
     (setq recentf-save-file
           (expand-file-name (concat my:temp-dir "recentf")))
     (setq recentf-auto-cleanup 'never)
     (setq recentf-exclude
           '(".recentf"
             "^/tmp\\.*"
             "^/private\\.*"
             "^/var/folders\\.*"
             "/TAGS$"
             "^/home/uwabami/.mozilla/firefox/jhitnbb2.default/itsalltext\\.*"
             ))
     (add-hook 'after-init-hook 'recentf-mode)
   #+END_SRC
*** Undo/Redo
   そのうち undohist と undo-tree を試そうと思っているのですが、
   今のところ特に弄ってません．
   #+BEGIN_SRC emacs-lisp
     (setq undo-limit 20000)
     ; 無限にしたいができないのでとりあえず30倍に．
     (setq undo-strong-limit 30000)
     (savehist-mode 1)        ; ミニバッファの履歴を保存しリストア
     (setq savehist-file
           (concat my:temp-dir "history"))
     (setq history-length t)  ; t で無制限
   #+END_SRC
** デイレクトリ整理
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'url
       (setq url-configuration-directory (concat my:temp-dir "url")))
   #+END_SRC
* ガベージコレクションの頻度を下げる
  とりあえず 50 MB にしておく.
  #+BEGIN_SRC emacs-lisp
    (setq gc-cons-threshold (* 50 (* 1024 1024)))
  #+END_SRC
* 行末の無駄な空白/改行を削除する
  元ネタ: [[http://d.hatena.ne.jp/tototoshi/20101202/1291289625][無駄な行末の空白を削除する(Emacs Advent Calendar jp:2010)]]

  ただし, RD や Markdown だと空白行に意味があったりするので、
  必要に応じて拡張子で判断して外している．
  #+BEGIN_SRC emacs-lisp
    (defvar my:delete-trailing-whitespace-exclude-suffix
      (list "\\.rd$" "\\.md$" "\\.rbt$" "\\.rab$"))
    (defun my:delete-trailing-whitespace ()
      (interactive)
      (cond
       ((equal nil
               (loop for pattern in my:delete-trailing-whitespace-exclude-suffix
                     thereis (string-match pattern buffer-file-name)))
        (delete-trailing-whitespace))))
    (add-hook 'before-save-hook 'my:delete-trailing-whitespace)
  #+END_SRC
* scratch を殺さない. 消したら再生成
 ...元ネタがどこだったのか忘れてしまった...
 #+BEGIN_SRC emacs-lisp
    (defun my:make-scratch (&optional arg)
      (interactive)
      (progn
        ;; "*scratch*" を作成して buffer-list に放り込む
        (set-buffer (get-buffer-create "*scratch*"))
        (funcall initial-major-mode)
        (erase-buffer)
        (when (and initial-scratch-message (not inhibit-startup-message))
          (insert initial-scratch-message))
        (or arg
            (progn
              (setq arg 0)
              (switch-to-buffer "*scratch*")))
        (cond ((= arg 0) (message "*scratch* is cleared up."))
              ((= arg 1) (message "another *scratch* is created")))))

    (defun my:buffer-name-list ()
      (mapcar (function buffer-name) (buffer-list)))
    (add-hook 'kill-buffer-query-functions
              ;; *scratch* バッファで kill-buffer したら内容を消去するだけにする
              (function (lambda ()
                          (if (string= "*scratch*" (buffer-name))
                              (progn (my:make-scratch 0) nil)
                            t))))
    (add-hook 'after-save-hook
              ;; *scratch* バッファの内容を保存したら
              ;; *scratch* バッファを新しく作る.
              (function
               (lambda ()
                 (unless (member "*scratch*" (my:buffer-name-list))
                   (my:make-scratch 1)))))
 #+END_SRC
* 空になったファイルを尋ねずに自動削除
 ゴミが残らないし、地味に便利．
 #+BEGIN_SRC emacs-lisp
    (if (not (memq 'delete-file-if-no-contents after-save-hook))
        (setq after-save-hook
              (cons 'delete-file-if-no-contents after-save-hook)))
    (defun delete-file-if-no-contents ()
      (when (and
             (buffer-file-name (current-buffer))
             (= (point-min) (point-max)))
        (delete-file
         (buffer-file-name (current-buffer)))))
 #+END_SRC
* =midnight=: 一定期間使用しなかった buffer を自動削除
  #+BEGIN_SRC emacs-lisp
    (require 'midnight)
    (setq clean-buffer-list-delay-general 1)
  #+END_SRC
