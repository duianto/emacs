# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2013/07/01 17:19:19$
# License: Expat
#
#+TITLE: flymake の設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+SETUPFILE: ./export-config.org
#+BEGIN_HTML
---
layout: emacs
title: flymakeの設定
---
#+END_HTML
* はじめに
  [[http://flymake.sourceforge.net/][flymake]] はリアルタイムに動作する文法チェッカです.
* 読み込み
  #+BEGIN_SRC emacs-lisp
    (require 'flymake)
    (add-hook 'find-file-hook 'flymake-find-file-hook)
  #+END_SRC
* Makefile の有無によるコマンドの振り分け
  元ネタ: [[http://moimoitei.blogspot.jp/2010/05/flymake-in-emacs.html][Emacs で文法チェック]] [fn:1]
** Makefile が無い場合のチェック用関数
  #+BEGIN_SRC emacs-lisp
    (defun my:flymake-simple-generic-init (cmd &optional opts)
      (let* ((temp-file (flymake-init-create-temp-buffer-copy
                         'flymake-create-temp-inplace))
             (local-file (file-relative-name
                          temp-file
                          (file-name-directory buffer-file-name))))
        (list cmd (append opts (list local-file)))))
  #+END_SRC
** Makefile が有る場合のチェック用関数
   #+BEGIN_SRC emacs-lisp
     (defun my:flymake-simple-make-or-generic-init (cmd &optional opts)
       (if (file-exists-p "Makefile")
           (flymake-simple-make-init)
         (my:flymake-simple-generic-init cmd opts)))
   #+END_SRC
* C/C++
** Makefile が無い場合の関数定義
*** C
   #+BEGIN_SRC emacs-lisp
     (defun my:flymake-c-init ()
       (my:flymake-simple-make-or-generic-init
        "gcc" '("-O2" "-Wall" "-Wextra" "-Wformat" "-Werror=format-security" "-fsyntax-only")))
   #+END_SRC
*** C++
    #+BEGIN_SRC emacs-lisp
      (defun my:flymake-cc-init ()
        (my:flymake-simple-make-or-generic-init
         "g++" '("-O2" "-Wall" "-Wextra" "-Wformat" "-Werror=format-security" "-fsyntax-only")))
    #+END_SRC
** 関数の追加
   #+BEGIN_SRC emacs-lisp
     (push '("\\.[cC]\\'" my:flymake-c-init)
           flymake-allowed-file-name-masks)
     (push '("\\.\\(?:cc\|cpp\|CC\|CPP\\)\\'" my:flymake-cc-init)
           flymake-allowed-file-name-masks)
   #+END_SRC
* Ruby
  @see [[http://www.emacswiki.org/emacs/FlymakeRuby]] [fn:2]
** 関数定義
  #+BEGIN_SRC emacs-lisp
     (defun my:flymake-ruby-init ()
       (my:flymake-simple-generic-init
        "ruby" '("-c")))
  #+END_SRC
** 関数の追加
  #+BEGIN_SRC emacs-lisp
    (push '("\\.\\(?:rb\|erb\\)\\'" my:flymake-ruby-init) flymake-allowed-file-name-masks)
  #+END_SRC
* Fortran (>=90)
** 関数定義
   gfortran 用と g95 用で関数を切り替え.
   とはいえ g95 は最近使ってないので良く知らない.
   #+BEGIN_SRC emacs-lisp
     (defun my:flymake-gfortran-init ()
       (my:flymake-simple-make-or-generic-init
        "gfortran" '("-O2" "-Wall" "-Wextra" "-fsyntax-only")))
     (defun my:flymake-g95-init ()
       (my:flymake-simple-make-or-generic-init
        "g95" '("-O2" "-Wall" "-Wextra" "-fsyntax-only")))
   #+END_SRC
** 関数の追加
   #+BEGIN_SRC emacs-lisp
     (cond
      ((executable-find "gfortran")
       (push '("\\.\\(?:f90\|F90\|f95\|F95\\)\\'" my:flymake-gfortran-init)
             flymake-allowed-file-name-masks))
      ((executable-find "g95")
       (push '("\\.\\(?:f90\|F90\|f95\|F95\\)\\'" my:flymake-g95-init)
             flymake-allowed-file-name-masks))
      (t nil))
   #+END_SRC
  コンパイラとして gfortran を想定しています.
  ただ, gfortran の -fsyntax-only 出力は gcc とはだいぶ異なるので
  以下の様な安直な wrapper を噛ませてチェックすることにしています
  #+BEGIN_SRC ruby
    #!/usr/bin/env ruby
    # -*- mode: ruby; coding: utf-8; indent-tabs-mode: nil -*-
    #
    # License: WTFPL
    #
    @hold = nil
    @fname = nil
    @line = nil
    @ch = nil
    while input = ARGF.gets
      @input = input
      if @input =~ /^ / || @input =~/^\s*$/ || @input =~/^\s*1\s*$/
        @hold = @input
      elsif @input =~ /^(Warning|Error):/ && ( @fname && @line && @ch)
        puts "#{@fname}:#{@line}: #{@input.chomp} (ch.#{@ch})"
      elsif @input =~ /^(.+?):(\d+?)\.(\d+):(\s*)/
        @fname,@line,@ch = $1, $2, $3
        @hold = @input
      else
        @hold = @input
        puts @hold
        @hold = nil
        @fname = nil
        @line = nil
        @ch = nil
      end
    end
  #+END_SRC
* TeX
  #+BEGIN_SRC emacs-lisp
    (defun flymake-get-tex-args (file-name)
      (list "platex"
            (list "-file-line-error" "-draftmode" "-interaction=nonstopmode" file-name)))
  #+END_SRC
* Footnotes

[fn:1] Emacs で文法チェック : [[http://moimoitei.blogspot.jp/2010/05/flymake-in-emacs.html]]

[fn:2] Flymake Ruby - EmacsWiki: [[http://www.emacswiki.org/emacs/FlymakeRuby]]
