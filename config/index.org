# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2012/12/31 23:22:16$
# License: Expat
#
#+TITLE: Emacsの基本設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+SETUPFILE: ./export-config.org
#+BEGIN_HTML
---
layout: emacs
title: Emacsの基本設定
---
#+END_HTML
* 始めに
  =~/.emacs= → =~/.emacs.d/init.el= ときて,
  このファイルで基本設定と外部 elisp の読み込みを行っています.

  外部 elisp の設定は多くの場合別ファイルに分けていますが,
  設定が短い場合にはこのファイルに記述して終わっていたりします.
* 言語の設定
** 基本設定
   Emacs23 以降は Emacs内部 が UTF-8 で記述されるようになったので,
   極力 UTF-8を使用するようにしています
   (EUC-JPとかで使用すると稀に祟りがあったりします).

   過去の資源(特にTeX)に関しては,
   未だ EUC-JP のファイルも多いので注意する必要があります.
   Debian (>= 7.0) に TeXLive2012 が入ったので,
   そのうち全部 UTF-8 に移行予定です.
   とはいえ過去の資産や共同作業する原稿なんかは無理ですけれど.
   #+BEGIN_SRC emacs-lisp
     (set-language-environment "Japanese")
     (prefer-coding-system 'utf-8)
   #+END_SRC
*** 補足: 言語設定の確認
    #+BEGIN_EXAMPLE
    (set-language-environment "Japanese")
    #+END_EXAMPLE
    によってlocaleが設定されます.
    "Japanese"という大雑把な設定で何が設定されるのかは
    #+BEGIN_EXAMPLE
    (describe-variable 'language-info-alist)
    #+END_EXAMPLE
    を実行して "Japanese"を参照すると良いです. 試しに実行してみると
    #+BEGIN_EXAMPLE
    ...
     ("Japanese"
      (documentation . t)
      (sample-text . "Japanese (日本語)	こんにちは, ｺﾝﾆﾁﾊ")
      (features japan-util)
      (input-method . "japanese")
      (coding-priority iso-2022-jp japanese-iso-8bit japanese-shift-jis iso-2022-jp-2004 euc-jis-2004 japanese-shift-jis-2004 iso-2022-jp-2)
      (coding-system iso-2022-jp japanese-iso-8bit japanese-shift-jis japanese-iso-7bit-1978-irv iso-2022-jp-2004 japanese-shift-jis-2004 euc-jis-2004)
      (charset japanese-jisx0208 japanese-jisx0212 latin-jisx0201 katakana-jisx0201 japanese-jisx0213\.2004-1 japanese-jisx0213-1 japanese-jisx0213-2 japanese-jisx0208-1978)
      (tutorial . "TUTORIAL.ja")
      (iso639-language . ja)
      (exit-function . use-default-char-width-table)
      (setup-function . setup-japanese-environment-internal))
    ...
    #+END_EXAMPLE
    となっていました. coding-priority を見るとわかるように文字コードの自
    動判定などの大雑把な優先順位は iso-2022-jp→shift_jis→euc-jp... となっ
    ていて, どこにも utf-8 がありません.  utf-8 を優先するには
    #+BEGIN_EXAMPLE
    (prefere-coding-system 'utf-8)
    #+END_EXAMPLE
    を設定します.
** OSの違いに起因する条件分岐
   全部 Unix/Linux 環境ならばこういう設定は不要なんでしょうけれど,
   幾つか環境を渡り歩いていると,
   こういった[[http://0xcc.net/misc/bad-knowhow.html][バッドノウハウ]] [fn:1] が増えていきます.

   Mac と Linux では同じ Unicode でも正規化が異なります
   (具体的には Mac のファイルシステムである HFS+ では
   Unicode の正規化が異なります).
   日本語のファイル名を扱うことは滅多にありませんが,
   たまに祟りがあるのでそれを回避するための設定をしておきます.

   Unicode の正規化と Mac OS X 特有の事情については
    - [[http://homepage1.nifty.com/nomenclator/unicode/normalization.htm][Unicode正規化とは]]
    - [[http://www.sakito.com/2010/05/mac-os-x-normalization.html][Mac OS X におけるファイル名に関するメモ(NFC, NFD等)]]
   等が参考になるかと思います.

   Windows の場合はファイル名などは cp932 にしています.
   とはいえ最近 Windows 使っていないので良く知りません.
   #+BEGIN_SRC emacs-lisp
          (cond
           (darwin-p
            (require 'ucs-normalize)
            (setq file-name-coding-system 'utf-8-hfs)
            (setq locale-coding-system 'utf-8-hfs)
            ;; ついでにキーバインド: Ctrl を Mac から奪い取る
            (setq mac-pass-control-to-system t)
            ;; Cmd と Option を逆にする
            (setq ns-command-modifier 'meta)
            (setq ns-alternate-modifier 'super)
            (global-set-key [ns-drag-file] 'ns-find-file))
           (nt-p
            (setq file-name-coding-system 'cp932)
            (setq locale-coding-system 'cp932))
           (t
            (setq file-name-coding-system 'utf-8)
            (setq locale-coding-system 'utf-8))
          )
   #+END_SRC
*** 補足
    =prefer-coding-system= を設定すると =default-file-name-coding-system= が設定されます.
    優先順位は
    #+BEGIN_EXAMPLE
    file-name-coding-system が nil → default-file-name-coding-systemを利用
    #+END_EXAMPLE
    となっています.

    =darwin-p= と =nt-p= は =~/.emacs.d/init.el= で設定した環境判定用の以下の変数です:
    #+BEGIN_EXAMPLE
    (defvar darwin-p (eq system-type 'darwin))      ; Mac OS X 用
    (defvar nt-p (eq system-type 'windows-nt))      ; Windows 用
    #+END_EXAMPLE
** cp5022xの利用
   Emacs23 から内部が Unicode ベースになっています.
   しかし文字コードの変換は GNU libc の iconv をベースにしているため,
   環境によっては文字の変換がうまく行なえません.
   cp5022x については [[http://nijino.homelinux.net/emacs/emacs23-ja.html][Emacs23 日本語向け設定例]] [fn:2] を参照して下さい.
   また, [[http://d.hatena.ne.jp/kiwanami/about][kiwanami]] さんが [[http://d.hatena.ne.jp/kiwanami/20091103/1257243524][Wanderlustと文字コード]] [fn:3]
   というエントリで素晴しい解説を書いて下さっています.

   cp5022x 自体は bundle で install しています.
   #+BEGIN_SRC emacs-lisp
     (unless (locate-library "cp5022x")
       (bundle cp5022x))
     (require 'cp5022x)
   #+END_SRC
* 機種依存しない(ハズ)の雑多な設定
  Emacs そのものの設定集.
  ちなみに =line-number-mode= など「有効無効をtoggleする関数」は,
  慣習的に =0= 以下の数字を指定すると明示的に無効化できる.
* 日本語入力: [[http://openlab.ring.gr.jp/skk/ddskk-ja.html][Daredevil SKK (DDSKK)]]
  SKK をメインで使用中. 無いと途方に暮れる.
  ちなみにGTKが有効になっていると =gtk-immodule= なんかと衝突するので
  =~/.Xresources= で xim を無効にしておくと良い.
  例えば以下の様に:
  #+BEGIN_EXAMPLE
     ! disable XIM
     Emacs*useXIM: false
  #+END_EXAMPLE
  =skk-user-directory= を設定しているので, 辞書や id なんかは
  =~/.emacs.d/etc/skk= 以下に置かれるが, 
  実際の設定は [[file:ddskk_config.org][ddskkの設定]] で行なっている.

  install は bundle を使う
  #+BEGIN_SRC emacs-lisp
  (unless (locate-library "skk-sticky")
    (bundle ddskk-cvs))
  #+END_SRC

  byte-compile 用の変数の読み込み.
  #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (require 'skk-vars)
       (require 'skk-autoloads))
  #+END_SRC

  辞書ファイルは =~/.emacs.d/etc/skk= 以下に置く
  #+BEGIN_SRC emacs-lisp
     (setq skk-user-directory
           (concat my:user-emacs-etc-directory "skk"))
  #+END_SRC

  設定ファイルは =~/.emacs.d/config=  以下に置く → [[file:ddskk_config.org][ddskkの設定]]
  #+BEGIN_SRC emacs-lisp
     (setq skk-init-file
           (concat my:user-emacs-config-directory "ddskk_config"))
  #+END_SRC

  org で書かれた設定ファイルから elisp を抽出
  #+BEGIN_SRC emacs-lisp
     (my:org-babel-tangle-and-compile-file
      (concat my:user-emacs-config-directory "ddskk_config.org"))
  #+END_SRC

  ddskk の設定ファイルは読み込み時に byte-compile する
  #+BEGIN_SRC emacs-lisp
     (setq skk-byte-compile-init-file t)
  #+END_SRC

  skk-autoloads で読み込み
  #+BEGIN_SRC emacs-lisp
     (require 'skk-leim)
     (setq default-input-method "japanese-skk")
     (require 'skk-autoloads)
     (require 'skk-cus)
  #+END_SRC
