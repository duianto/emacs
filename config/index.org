# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#+TITLE: Emacsの設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+DATE: 2015-04-13 00:58:45
#+LANG: ja
#+LAYOUT: page
#+CATEGORIES: cc-env emacs
#+PERMALINK: cc-env/emacs/index.html
* 始めに
  =~/.emacs= → =~/.emacs.d/init.el= ([[http://www.gfd-dennou.org/member/uwabami/cc-env/EmacsBasic.html][解説]]) ときて
  このファイルで設定ファイルの読み込みを行なっています.
  具体的な設定例は, 個々のファイルを参照のこと
* 環境変数の読み込み
  [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] で、=$PATH= 以外の環境変数等も設定しておく。
  #+BEGIN_SRC emacs-lisp
    (setq-default explicit-shell-file-name "zsh")
    (setq shell-file-name "zsh"
          shell-command-switch "-c")
    (el-get-bundle! exec-path-from-shell
                    (when (memq window-system '(mac ns))
                      (exec-path-from-shell-initialize))
                    (exec-path-from-shell-copy-envs
                     '("http_proxy" "DEBFULLNAME" "DEBEMAIL"))
                    (setq user-full-name (concat (getenv "DEBFULLNAME")))
                    (setq user-mail-address (concat (getenv "DEBEMAIL"))))
  #+END_SRC

* 環境に依存しない筈の雑多な設定
  設定が増えてきたら分割することに。
  #+BEGIN_SRC emacs-lisp
    (my:load-org-file "basic_config")
  #+END_SRC
* 言語の設定
  主に East Asian Ambiguos Width に対応するための設定
  #+BEGIN_SRC emacs-lisp
    (my:load-org-file "language_config")
  #+END_SRC
* [[file:config/elscreen_config.org][Elscreenの設定]]
  #+BEGIN_SRC emacs-lisp
    (unless (string-match "ok" (el-get-dpkg-package-status "elscreen"))
      (el-get-bundle emacs-jp/elscreen))
    (my:load-org-file "elscreen_config")
  #+END_SRC
* 日本語入力: [[http://openlab.ring.gr.jp/skk/ddskk-ja.html][Daredevil SKK (DDSKK)]]
  DDSKK をメインで使用中. 無いと途方に暮れる.
  ちなみにGTKが有効になっていると =gtk-immodule= なんかと衝突するので
  =~/.Xresources= で xim を無効にしておくと良い.
  例えば以下の様に:
  #+BEGIN_EXAMPLE
     ! disable XIM
     Emacs*useXIM: false
  #+END_EXAMPLE
  =~/.emacs.d/tmp/skk= 以下に置かれるが,
  実際の設定は [[file:ddskk_config.org][ddskkの設定]] で行なっているため, 設定ファイルの位置変更を変更する
  #+BEGIN_SRC emacs-lisp
    (setq skk-user-directory
          (concat my:temp-dir "skk"))
    (setq skk-init-file
          (concat my:config-dir "ddskk_config"))
  #+END_SRC
  Debian パッケージの ddskk がインストールされていない場合には
  El-Get で install する。
  #+BEGIN_SRC emacs-lisp
    (unless (string-match "ok" (el-get-dpkg-package-status "ddskk"))
      (el-get-bundle ddskk))
  #+END_SRC
  =skk-user-directory= を設定しているので, 辞書や id なんかは
  org で設定を書くために, 一旦 elisp を抽出しておく
  #+BEGIN_SRC emacs-lisp
    (org-babel-tangle-file
     (concat my:config-dir "ddskk_config.org")
     (concat my:config-dir "ddskk_config.el") "emacs-lisp")
  #+END_SRC
  設定ファイルの byte-compile
  #+BEGIN_SRC emacs-lisp
    (setq skk-byte-compile-init-file nil)
    (with-eval-after-load-feature skk
      (progn
        (require 'skk-vars)
        (require 'skk-autoloads)
        (byte-compile-file (concat my:config-dir "ddskk_config.el"))))
  #+END_SRC
  実際の読み込み:
  #+BEGIN_SRC emacs-lisp
    (require 'skk-leim nil 'noerror)
    (setq default-input-method "japanese-skk")
    (require 'skk-autoloads nil 'noerror)
  #+END_SRC
* テーマ
  自作のテーマを使用中
  #+BEGIN_SRC emacs-lisp
    (el-get-bundle uwabami/darkpastel-theme
      :prepare (add-to-list 'custom-theme-load-path default-directory)
      (load-theme 'darkpastel t)
      )
  #+END_SRC
* [[file:frame_config.org][フォントとフレームの設定]]
  #+BEGIN_SRC emacs-lisp
    (my:load-org-file "frame_config")
  #+END_SRC
* [[file:mua_config.org][MUAの設定]]
  MUA として Wanderlust を使っている.
  #+BEGIN_SRC emacs-lisp
    (when (string-match "ok" (el-get-dpkg-package-status "ddskk"))
      (file-exists-p (concat my:temp-dir ".wl-use"))
      (autoload 'wl "wl" "Wanderlust" t)
      (autoload 'wl-other-frame "wl" "Wanderlust on new frame" t)
      (autoload 'wl-draft "wl-draft" "Write draft with Wanderlust." t)
      (if (boundp 'mail-user-agent)
          (setq mail-user-agent 'wl-user-agent))
      (if (boundp 'read-mail-command)
          (setq read-mail-command 'wl))
      (if (fboundp 'define-mail-user-agent)
          (define-mail-user-agent
            'wl-user-agent
            'wl-user-agent-compose
            'wl-draft-send
            'wl-draft-kill
            'mail-send-hook))
      (setq elmo-msgdb-directory "~/Maildir/elmo")
      (my:org-babel-tangle-and-compile-file
       (concat my:config-dir "wl_config"))
      (setq wl-init-file
            (concat my:config-dir "wl_config"))
      )
  #+END_SRC
