# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# License: Expat
#
#+TITLE: Emacsの設定 - 主に org ファイルの読み込み集
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+DATE: 2015-01-02 11:19:15
#+SETUPFILE: ./export-config.org

* 始めに
  =~/.emacs= → =~/.emacs.d/init.el= ([[http://www.gfd-dennou.org/member/uwabami/cc-env/EmacsBasic.html][解説]]) ときて
  このファイルで設定ファイルの読み込みを行なっています.
  具体的な設定例は, 個々のファイルを参照のこと
* [[file:el-get_config.org][el-get での package install]]
  #+BEGIN_SRC emacs-lisp
  (my:load-org-file "el-get_config.org")
  #+END_SRC
* exec-path-from-shell: 環境変数の取得
  Terminal 上で Emacs を起動する場合は問題無いですが
  GUI 環境で Emacs を開くと環境変数が読み込まれない事がしばしばあって
  難儀していました.
  =exec-path-from-shell= によって shell で設定した環境変数を読み込むことで,
  これを解決します.
  #+BEGIN_SRC emacs-lisp
    (require 'exec-path-from-shell nil 'noerror)
    (exec-path-from-shell-copy-envs
     '("http_proxy" "DEBFULLNAME" "DEBEMAIL"))
    (setq user-full-name (concat (getenv "DEBFULLNAME")))
    (setq user-mail-address (concat (getenv "DEBEMAIL")))
  #+END_SRC
* [[file:language_config.org][言語の設定]]
  Emacs23 から内部が Unicode ベースになっています.

  しかし文字コードの変換は GNU libc の iconv をベースにしているため,
  環境によっては文字の変換がうまく行なえません.
  そこで言語設定
  前に =cp5022x.el= をインストールすることにしています.
  #+BEGIN_SRC emacs-lisp
    (require 'cp5022x nil 'noerror)
    (my:load-org-file "language_config.org")
  #+END_SRC
* [[file:basic_config.org][バージョン依存しない(はず)の雑多な設定]]
  GUI 周りの調整等の一般的な設定など
  #+BEGIN_SRC emacs-lisp
   (my:load-org-file "basic_config.org")
  #+END_SRC
* 日本語入力: [[http://openlab.ring.gr.jp/skk/ddskk-ja.html][Daredevil SKK (DDSKK)]]
  DDSKK をメインで使用中. 無いと途方に暮れる.
  ちなみにGTKが有効になっていると =gtk-immodule= なんかと衝突するので
  =~/.Xresources= で xim を無効にしておくと良い.
  例えば以下の様に:
  #+BEGIN_EXAMPLE
     ! disable XIM
     Emacs*useXIM: false
  #+END_EXAMPLE
  =skk-user-directory= を設定しているので, 辞書や id なんかは
  =~/.emacs.d/tmp/skk= 以下に置かれるが,
  実際の設定は [[file:ddskk_config.org][ddskkの設定]] で行なっているため, 設定ファイルの位置変更を変更する
  #+BEGIN_SRC emacs-lisp
    (setq skk-user-directory
          (concat my:user-emacs-temporary-directory "skk"))
    (setq skk-init-file
          (concat my:user-emacs-config-directory "ddskk_config"))
  #+END_SRC
  org で設定を書くために, 一旦 elisp を抽出しておく
  #+BEGIN_SRC emacs-lisp
    ;; org で書かれた設定ファイルから elisp を抽出
    (my:org-babel-tangle-and-compile-file
     (concat my:user-emacs-config-directory "ddskk_config.org"))
    ;; ddskk の設定ファイルは読み込み時に byte-compile する
    (setq skk-byte-compile-init-file t)
  #+END_SRC
  実際の読み込み:
  #+BEGIN_SRC emacs-lisp
    (require 'skk-leim nil 'noerror)
    (setq default-input-method "japanese-skk")
    (require 'skk-autoloads nil 'noerror)
    (require 'skk-cus nil 'noerror)
  #+END_SRC
* [[file:frame_config.org][フォントとフレームの設定]]
  #+BEGIN_SRC emacs-lisp
    (my:load-org-file "frame_config.org")
  #+END_SRC
* [[file:elscreen_config.org][Elscreenの設定]]
  install 先ですが,
  APEL 非依存版 [[https://github.com/knu/elscreen][knu/elscreen]] を使用しています．
  #+BEGIN_SRC emacs-lisp
    (my:load-org-file "elscreen_config.org")
  #+END_SRC
* [[http://d.hatena.ne.jp/kiwanami/20110221/1298293727][パスワード管理ツール id-manager.el]]
  無いと途方に暮れるくらい, 依存しまくり.
  インストールと設定は以下.
  #+BEGIN_SRC emacs-lisp
    (when (require 'id-manager nil 'noerror)
      (progn
        (require 'id-manager nil 'noerror)
        (global-set-key (kbd "M-7") 'id-manager)
        (setq idm-database-file
              (expand-file-name
               (concat (getenv "HOME") "/.gnupg/idm-db.gpg")))
        (setq idm-clipboard-expire-time-sec 15)))
  #+END_SRC
* [[http://d.hatena.ne.jp/mooz/20101003/p1][zlc.el で Emacs のミニバッファ補完 zsh ライクに]]
  anything の候補搾り込みはあんまり好きではないので.
  これは非常に便利です.
  #+BEGIN_SRC emacs-lisp
;;    (require 'zlc nil 'noerror)
;;    (zlc-mode t)
;;    (let ((map minibuffer-local-map))
;;      (define-key map (kbd "C-p")       'zlc-select-previous-vertical)
;;      (define-key map (kbd "C-n")       'zlc-select-next-vertical)
;;      (define-key map (kbd "C-b")       'zlc-select-previous)
;;      (define-key map (kbd "C-f")       'zlc-select-next)
;;      (define-key map (kbd "C-d")       'zlc-reset))
;;    (setq zlc-select-completion-immediately nil)
  #+END_SRC
* [[http://d.hatena.ne.jp/tarao/20101011/1286804507][Yet another icompelete]]
  zlc をさらに素敵にしてくれます.
  #+BEGIN_SRC emacs-lisp
;;    (require 'yaicomplete nil 'noerror)
;;    (yaicomplete-mode)
  #+END_SRC
* [[file:migemo_config.org][C/Migemo]]
  #+BEGIN_SRC emacs-lisp
    (when (and (executable-find "cmigemo")
               (locate-library "migemo"))
      (my:load-org-file "migemo_config.org"))
  #+END_SRC
* [[file:mua_config.org][MUAの設定]]
  MUA として Wanderlust を使っている.
  #+BEGIN_SRC emacs-lisp
    (when (and (locate-library "wl")
               (file-exists-p (concat user-emacs-directory ".wl-use")))
      (autoload 'wl "wl" "Wanderlust" t)
      (autoload 'wl-other-frame "wl" "Wanderlust on new frame" t)
      (autoload 'wl-draft "wl-draft" "Write draft with Wanderlust." t)
      (if (boundp 'mail-user-agent)
          (setq mail-user-agent 'wl-user-agent))
      (if (boundp 'read-mail-command)
          (setq read-mail-command 'wl))
      (if (fboundp 'define-mail-user-agent)
          (define-mail-user-agent
            'wl-user-agent
            'wl-user-agent-compose
            'wl-draft-send
            'wl-draft-kill
            'mail-send-hook))
      (setq elmo-msgdb-directory "~/Maildir/elmo")
      (my:org-babel-tangle-and-compile-file
       (concat my:user-emacs-config-directory "wl_config.org"))
      (setq wl-init-file
            (concat my:user-emacs-config-directory "wl_config"))
      )
  #+END_SRC
* TeX関連: [[file:auctex_config.org][AUCTeX の設定]]
  [[http://www.gnu.org/software/auctex/][AUCTeX]] に LaTeXmk 用のコマンドを追加する.
  [[https://github.com/tom-tan/auctex-latexmk][auctex-latexmk]] を愛用中.
  =pLaTeX= を使う場合には文字コードオプションも追加してくれる.
  実際の設定は [[file:auctex_config.org][AUCTeXの設定]] で.
  #+BEGIN_SRC emacs-lisp
    (when (locate-library "auctex-latexmk")
      (my:load-org-file "auctex_config.org"))
  #+END_SRC
* org-mode
  #+BEGIN_SRC emacs-lisp
    (my:load-org-file "org-mode_config.org")
  #+END_SRC
* MuseMode
  #+BEGIN_SRC emacs-lisp
    (when (locate-library "muse")
      (my:load-org-file "muse_config.org"))
  #+END_SRC
* [[http://orgmode.org/worg/org-contrib/gsoc2012/student-projects/org-sync/][org-sync]]
  Redmine や Bugzilla なんかのチケットを org の Todo リストと同期
  #+BEGIN_SRC emacs-lisp
    (when (locate-library "org-sync")
      (mapc 'load
            '("org-element" "os" "os-bb" "os-github" "os-rmine")))
  #+END_SRC
* howm
  #+BEGIN_SRC emacs-lisp
    (when (locate-library "howm")
      (my:load-org-file "howm_config.org"))
  #+END_SRC
* [[file:lookup_config.org][lookup-el]]
  =lookup= がインストールされていて, 辞書が存在する場合にだけ読み込む.
  #+BEGIN_SRC emacs-lisp
    (if (and (locate-library "lookup")
             (file-exists-p "/usr/local/share/dict/lookup-enabled"))
        (my:load-org-file "lookup_config.org"))
  #+END_SRC
* tdiary
  #+BEGIN_SRC emacs-lisp
    (when (locate-library "tdiary-mode")
      (progn
        (setq tdiary-init-file "~/ownCloud/tdiary/tdiary-mode.gpg")
        (setq tdiary-browser-function 'browse-url)
        (setq tdiary-style-mode 'rd-mode)
        (setq tdiary-hour-offset 2)
        (setq tdiary-text-save-p t)
        (setq tdiary-text-suffix ".rd")
        (autoload 'tdiary-mode "tdiary-mode" nil t)
        (autoload 'tdiary-new "tdiary-mode" nil t)
        (autoload 'tdiary-new-diary "tdiary-mode" nil t)
        (autoload 'tdiary-replace "tdiary-mode" nil t)
        ))
  #+END_SRC
* カレンダー関連
  Google Calendar との同期に org-gcal, 表示に calfw を使う
  #+BEGIN_SRC emacs-lisp
    (when (and (locate-library "org-gcal")
               (locate-library "calfw-org"))
      (progn
        (require 'japanese-holidays)
        (setq calendar-holidays
              (append japanese-holidays local-holidays other-holidays))
        (add-hook 'calendar-load-hook
                  (lambda ()
                    (require 'japanese-holidays)
                    (setq calendar-holidays
                          (append japanese-holidays local-holidays other-holidays))))
        ;; 月
        (setq calendar-month-name-array
              ["01" "02" "03" "04" "05" "06" "07" "08" "09" "10" "11" "12" ])
        (setq calendar-day-name-array
              ["日" "月" "火" "水" "木" "金" "土"])
        ;; 週の先頭の曜日
        (setq calendar-week-start-day 0) ; 日曜日は0, 月曜日は1
        ;; calfw
        (require 'calfw-org)
        (define-key global-map (kbd "C-x <f2>") 'my:cfw:open-calendar)
        (defun my:cfw:open-calendar ()
          "open Org file as calfw calendar source"
          (interactive)
          (let* (
                 (src1
                  (lexical-let ((file "~/ownCloud/org/Schedule.org"))
                    (make-cfw:source
                     :name "個人"
                     :data (lambda (begin end)
                             (let ((org-agenda-files (list file)))
                               (cfw:org-schedule-period-to-calendar begin end)))
                     :color "#7f7fff"
                     )))
                 (src2
                  (lexical-let ((file "~/ownCloud/org/Schedule_KUSM.org"))
                    (make-cfw:source
                     :name "京大数学"
                     :data (lambda (begin end)
                             (let ((org-agenda-files (list file)))
                               (cfw:org-schedule-period-to-calendar begin end)))
                     :color "#7fff7f"
                     )))
                 (src3
                  (lexical-let ((file "~/ownCloud/org/Schedule_GFD.org"))
                    (make-cfw:source
                     :name "電脳倶楽部"
                     :data (lambda (begin end)
                             (let ((org-agenda-files (list file)))
                               (cfw:org-schedule-period-to-calendar begin end)))
                     :color "#ffff7f"
                     )))
                 (src4
                  (lexical-let ((file "~/ownCloud/org/Schedule_DebianJP.org"))
                    (make-cfw:source
                     :name "DebianJP"
                     :data (lambda (begin end)
                             (let ((org-agenda-files (list file)))
                               (cfw:org-schedule-period-to-calendar begin end)))
                     :color "#ff7fff"
                     )))
                 (cp (cfw:create-calendar-component-buffer
                      :view 'month
                      :contents-sources (list src1 src2 src3 src4)
                      :custom-map cfw:org-schedule-map
                      :sorter 'cfw:org-schedule-sorter)))
            (switch-to-buffer (cfw:cp-get-buffer cp)))
            )
        (setq request-storage-directory
              (concat my:user-emacs-temporary-directory "request"))
        (unless (file-directory-p request-storage-directory)
          (make-directory request-storage-directory))
        (require 'org-gcal nil 'noerror)
        (require 'alert nil 'noerror)
        (setq alert-default-style 'libnotify)
        (setq org-gcal-up-days    356) ;; 1 years
        (setq org-gcal-down-days  365) ;; 1 years
        (setq org-gcal-auto-archive nil)
        (setq org-gcal-dir
              (concat my:user-emacs-temporary-directory "org-gcal"))
        (unless (file-directory-p org-gcal-dir)
          (make-directory org-gcal-dir))
        (setq org-gcal-token-file
              (expand-file-name ".org-gcal-token" org-gcal-dir))
        (load "~/.mua/org-gcal-settings.gpg")
        ))
  #+END_SRC
* テスト
  #+BEGIN_SRC emacs-lisp
    (define-key global-map   (kbd "C-x M-b")     'ibuffer-other-window)
    ;; (setq gnutls-algorithm-priority "SECURE:-VERS-SSL3.0")
    ;; (setq gnutls-log-level 0)
    ;; (setq gnutls-verify-error t)
  #+END_SRC
