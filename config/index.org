# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#+TITLE: Emacsの設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+DATE: 2016-02-12 12:30:19
#+LANG: ja
#+LAYOUT: page
#+CATEGORIES: cc-env emacs
#+PERMALINK: cc-env/emacs/config/index.html
* 始めに
  =~/.emacs= → =~/.emacs.d/init.el= ([[http://www.gfd-dennou.org/member/uwabami/cc-env/EmacsBasic.html][解説]]) ときて
  このファイルで設定ファイルの読み込みを行なっています。
  具体的な設定例は、個々のファイルを参照のこと。
* [[config/basic_config.org][環境に依存しない(筈の)設定]]
  どんな場所でも無いと途方に暮れてしまう様な基本的な設定など
 #+BEGIN_SRC emacs-lisp
    (my:load-org-file "basic_config")
  #+END_SRC
* Copy & Paste
  #+BEGIN_SRC emacs-lisp
    (when (executable-find "xclip")
      (progn
        (el-get-bundle xclip)
        (require 'xclip nil 'noerror)
        (turn-on-xclip)))
  #+END_SRC
* Elscreen
  #+BEGIN_SRC emacs-lisp
    (unless (my:dpkg-status "elscreen")
      (el-get-bundle knu/elscreen))
    (setq elscreen-prefix-key (kbd "C-o"))
    (setq elscreen-display-tab 4)
    (setq elscreen-display-screen-number nil)
    (require 'elscreen nil 'noerror)
    (elscreen-start)
  #+END_SRC
  ついでに modeline の表示そのものを無効化しておく
  #+BEGIN_SRC emacs-lisp
    (defadvice elscreen-mode-line-update
        (around my:disable-elscreen-mode-line-update activate)
      )
    (remove-hook 'elscreen-screen-update-hook 'elscreen-mode-line-update)
  #+END_SRC
* 日本語入力: [[file:config/ddskk_config.org][DDSKKの設定]]
  [[http://openlab.ring.gr.jp/skk/ddskk-ja.html][Daredevil SKK (DDSKK)]] をメインで使用中。無いと途方に暮れる。
  ちなみにGTKが有効になっていると =gtk-immodule= なんかと衝突するので
  =~/.Xresources= で xim を無効にしておくと良い。
  例えば以下の様に:
  #+BEGIN_SRC conf :tangle no
     ! disable XIM
     Emacs*useXIM: false
  #+END_SRC
  インストール
  #+BEGIN_SRC emacs-lisp
  (unless (my:dpkg-status "ddskk")
    (el-get-bundle ddskk))
  #+END_SRC
  =~/.emacs.d/tmp/skk= 以下に置かれるが,
  実際の設定は [[file:ddskk_config.org][DDSKKの設定]] で行なっているため, 設定ファイルの位置変更を変更する
  #+BEGIN_SRC emacs-lisp
    (setq skk-user-directory (concat my:temp-dir "skk"))
    (setq skk-init-file (concat my:config-dir "ddskk_config"))
  #+END_SRC
  設定ファイルの byte-compile: skk 読み込み時に必要に応じて byte-compile する．
  #+BEGIN_SRC emacs-lisp
    (setq skk-byte-compile-init-file t)
    (my:org-babel-tangle-and-compile-file (concat my:config-dir "ddskk_config"))
  #+END_SRC
  実際の読み込み。
  #+BEGIN_SRC emacs-lisp
    (require 'skk-leim nil 'noerror)
    (setq default-input-method "japanese-skk")
    (require 'skk-autoloads nil 'noerror)
  #+END_SRC
* 校正，辞書等
** spell checker
   #+BEGIN_SRC emacs-lisp
     (require 'ispell nil 'noerror)
     (with-eval-after-load "ispell"
       (add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")))
     (setq-default ispell-program-name "aspell")
     ;; (autoload 'flyspell-mode "flyspell" "spell checking on the fly")
   #+END_SRC
** 辞書
   #+BEGIN_SRC emacs-lisp
     (when (and (my:dpkg-status "lookup-el")
                (file-exists-p "/usr/local/share/dict/lookup-enabled"))
       (progn
         (autoload 'lookup "lookup" nil t)
         (autoload 'lookup-region "lookup" nil t)
         (autoload 'lookup-pattern "lookup" nil t)
         (global-set-key "\C-cw" 'lookup-pattern)
         (global-set-key "\C-cW" 'lookup-word)
         (setq lookup-search-agents
               '(
                 (ndeb "/usr/local/share/dict/eijiro"    :alias "英辞郎")
                 (ndeb "/usr/local/share/dict/waeijiro"  :alias "和英辞郎")
                 (ndeb "/usr/local/share/dict/rikagaku5" :alias "理化学辞典 第5版")
                 (ndeb "/usr/local/share/dict/koujien4"  :alias "広辞苑 第4版")
                 (ndeb "/usr/local/share/dict/wadai5"    :alias "研究社 和英大辞典 第5版")
                 (ndeb "/usr/local/share/dict/eidai6"    :alias "研究社 英和大辞典 第6版")
                 (ndeb "/usr/local/share/dict/colloc"    :alias "研究社 英和活用大辞典 ")
                 ))))
   #+END_SRC
** Ginger
   英文校正, 類義語提案等
   #+BEGIN_SRC emacs-lisp
     (el-get-bundle gist:5457732:ginger-api.el
       :depends (request))
     (el-get-bundle gist:7349439:ginger-rephrase-api.el
       :depends (request))
   #+END_SRC
* 認証関連
  =auth-source= と =id-manager= を使っている
** id-manager の設定
   #+BEGIN_SRC emacs-lisp
     (when (file-exists-p (expand-file-name "~/.gnupg/idm-db.gpg"))
       (progn
         (el-get-bundle id-manager)
         (setq idm-database-file
               (expand-file-name "~/.gnupg/idm-db.gpg"))
         (require 'id-manager)
         (global-set-key (kbd "M-7") 'id-manager)
         (setq idm-clipboard-expire-time-sec 15)))
   #+END_SRC
** plstore, auth-source の設定
   自分の秘密鍵で暗号化⇔複合
   #+BEGIN_SRC emacs-lisp
     (require 'auth-source nil 'noerror)
     (setq plstore-secret-keys 'silent)
     (setq plstore-encrypt-to (getenv "GPG_KEY_ID"))
     (setq oauth2-token-file (concat my:temp-dir "oauth2.plstore"))
   #+END_SRC
   任意の key を格納/取得できるよう, 関数を定義しておく
   #+BEGIN_SRC emacs-lisp
     (defun* my:auth-source-get-property (prop-name &rest spec &allow-other-keys)
       (let* ((founds (apply 'auth-source-search spec))
              (pkey (intern (concat ":" (format "%s" prop-name))))
              (ret (when founds (plist-get (nth 0 founds) pkey))))
         (if (functionp ret)
             (funcall ret)
           ret)))
   #+END_SRC
   auth-source の追加:
   #+BEGIN_SRC emacs-lisp
     (if (file-exists-p (expand-file-name "~/.gnupg/auth-source.plist"))
         (add-to-list 'auth-sources
                      (expand-file-name "~/.gnupg/auth-source.plist")))
  #+END_SRC
* [[file:mua_config.org][MUAの設定]]
  MUA として Wanderlust を使っている．
  #+BEGIN_SRC emacs-lisp
    (when (or (my:dpkg-status "wl")
              (my:dpkg-status "wl-beta"))
      (progn
        (unless (my:dpkg-status "rail")
          (el-get-bundle uwabami/rail))
        (el-get-bundle syohex/emacs-elscreen-wl
          :features elscreen-wl)
        (el-get-bundle uwabami/gcontacts-get-wl
          :depends (oauth2 json))
        (el-get-bundle 'mbsync)
        (autoload 'wl "wl" "Wanderlust" t)
        (autoload 'wl-other-frame "wl" "Wanderlust on new frame" t)
        (autoload 'wl-draft "wl-draft" "Write draft with Wanderlust." t)
        (if (boundp 'mail-user-agent)
            (setq mail-user-agent 'wl-user-agent))
        (if (boundp 'read-mail-command)
            (setq read-mail-command 'wl))
        (if (fboundp 'define-mail-user-agent)
            (define-mail-user-agent
              'wl-user-agent
              'wl-user-agent-compose
              'wl-draft-send
              'wl-draft-kill
              'mail-send-hook))
        (setq mime-view-mailcap-files '("~/.mailcap"))
        (setq mime-play-find-every-situations nil
              mime-play-delete-file-immediately nil
              process-connection-type nil)
        (setq elmo-msgdb-directory "~/Maildir/.elmo"
              elmo-maildir-folder-path "~/Maildir/.elmo"
              wl-init-file (concat my:config-dir "wl_config"))
        (unless (file-directory-p elmo-msgdb-directory)
          (make-directory elmo-msgdb-directory))
        (unless (file-directory-p (concat elmo-msgdb-directory "/local/Trash"))
          (make-directory (concat elmo-msgdb-directory "/local/Trash")))
        (eval-when-compile
          (progn
            (add-to-list 'load-path
                         (concat "/usr/share/emacs24/site-lisp/wl"))
            (my:org-babel-tangle-and-compile-file (concat my:config-dir "wl_config"))))
        ))
  #+END_SRC
* zlc + yaicomplete
** zlc
   #+BEGIN_SRC emacs-lisp
     (el-get-bundle zlc)
     (require 'zlc nil 'noerror)
     (zlc-mode t)
     (with-eval-after-load "zlc"
       (let ((map minibuffer-local-map))
         ;; (define-key map (kbd "<backtab>") 'zlc-select-previous)
         ;; (define-key map (kbd "S-<tab>")   'zlc-select-previous)
         (define-key map (kbd "C-p")       'zlc-select-previous-vertical)
         (define-key map (kbd "C-n")       'zlc-select-next-vertical)
         (define-key map (kbd "C-b")       'zlc-select-previous)
         (define-key map (kbd "C-f")       'zlc-select-next)
         (define-key map (kbd "C-d")       'zlc-reset)
         )
       (setq zlc-select-completion-immediately nil)
       )
   #+END_SRC
** yaicomplete
   #+BEGIN_SRC emacs-lisp
     ;; (el-get-bundle yaicomplete
     ;;   :type http
     ;;   :url "https://raw.github.com/tarao/elisp/master/yaicomplete.el"
     ;;   :features "yaicomplete"
     ;;   )
     ;; (custom-set-faces
     ;;  '(yaicomplete-completion-suffix-face ((t nil))))
     ;; (yaicomplete-mode)
   #+END_SRC
* Helm
** 読み込み
   #+BEGIN_SRC emacs-lisp
     (el-get-bundle helm)
     (require 'helm-config nil 'noerror)
   #+END_SRC
*** 読み込み時の警告を止める
    良い事だとは決して思わないけれど.
    - [[https://github.com/syl20bnr/spacemacs/issues/192][ad-handle-definition errors at startup · Issue #192 · syl20bnr/spacemacs]]
    #+BEGIN_SRC emacs-lisp
      (setq ad-redefinition-action 'accept)
    #+END_SRC
** history の位置変更
   デフォルトだと =~/.emacs.d/= 直下に作成するので, =~/.emacs.d/tmp= 以下に移動
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load "helm-adaptive"
       (setq helm-adaptive-history-file (concat my:temp-dir "helm-adaptive-history")))
   #+END_SRC
** 補完挙動の調整
   #+BEGIN_SRC emacs-lisp
     (setq
      ;; 候補を直ちに表示
      helm-idle-delay 0.0
      ;; タイプしてから再描画するまでの時間を 0.1 に: default?
      helm-input-idle-delay 0.1
      ;; 体感速度向上
      helm-quick-update t
      ;; 余計なファイルは表示しない
      helm-ff-skip-boring-files t
      ;; 折り返し無し
      helm-truncate-lines t
      ;; C-k の動作調整
      helm-delete-minibuffer-contents-from-point t
      )
   #+END_SRC
** キーバインド
   #+BEGIN_SRC emacs-lisp
     (define-key global-map (kbd "C-z")     'helm-command-prefix)
     (global-unset-key (kbd "C-x c"))
     (define-key global-map (kbd "M-X")     'helm-M-x)
     ;; (define-key global-map (kbd "C-x C-f") 'helm-find-files)
     ;; (define-key global-map (kbd "C-x C-f") 'find-file)
     (define-key global-map (kbd "C-x C-r") 'helm-recentf)
     (define-key global-map (kbd "M-y")     'helm-show-kill-ring)
     (define-key global-map (kbd "C-c i")   'helm-imenu)
     (define-key global-map (kbd "C-x b")   'helm-for-files)
     (define-key global-map (kbd "C-x C-o") 'helm-elscreen)
     (define-key global-map (kbd "C-x C-b") 'helm-buffers-list)
     ;; C-h -> always delete backward-char
     (with-eval-after-load "helm"
       (define-key helm-map (kbd "C-h")      'delete-backward-char))
     (with-eval-after-load "helm-files"
       (define-key helm-find-files-map (kbd "C-h") 'delete-backward-char)
       (define-key helm-read-file-map  (kbd "TAB") 'helm-execute-persistent-action)
       (define-key helm-find-files-map (kbd "TAB") 'helm-execute-persistent-action))
     ;; For helm-find-files etc.
     ;; (defadvice helm-ff-kill-or-find-buffer-fname (around execute-only-if-exist activate)
     ;;   "Execute command only if CANDIDATE exists"
     ;;   (when (file-exists-p candidate)
     ;;         ad-do-it))
     ;; (global-set-key (kbd "M-x")                          'helm-M-x)
     ;; (global-set-key (kbd "M-y")                          'helm-show-kill-ring)
     ;; (global-set-key (kbd "C-c f")                        'helm-recentf)
     ;; (global-set-key (kbd "C-x C-f")                      'helm-find-files)
     ;; (global-set-key (kbd "C-c <SPC>")                    'helm-all-mark-rings)
     ;; (global-set-key (kbd "C-x r b")                      'helm-filtered-bookmarks)
     ;; (global-set-key (kbd "C-h r")                        'helm-info-emacs)
     ;; (global-set-key (kbd "C-:")                          'helm-eval-expression-with-eldoc)
     ;; (global-set-key (kbd "C-,")                          'helm-calcul-expression)
     ;; (global-set-key (kbd "C-h d")                        'helm-info-at-point)
     ;; (global-set-key (kbd "C-x C-d")                      'helm-browse-project)
     ;; (global-set-key (kbd "<f1>")                         'helm-resume)
     ;; (global-set-key (kbd "C-h C-f")                      'helm-apropos)
     ;; (global-set-key (kbd "<f5> s")                       'helm-find)
     ;; (global-set-key (kbd "<f2>")                         'helm-execute-kmacro)
     ;; (global-set-key (kbd "C-c g")                        'helm-gid)
     ;; (global-set-key (kbd "C-c i")                        'helm-imenu-in-all-buffers)
     ;; (define-key global-map [remap jump-to-register]      'helm-register)
     ;; (define-key global-map [remap list-buffers]          'helm-buffers-list)
     ;; (define-key global-map [remap dabbrev-expand]        'helm-dabbrev)
     ;; (define-key global-map [remap find-tag]              'helm-etags-select)
     ;; (define-key global-map [remap xref-find-definitions] 'helm-etags-select)
     ;; (define-key shell-mode-map (kbd "M-p")               'helm-comint-input-ring) ; shell history.
     ;; (global-unset-key (kbd "C-z"))
     ;; (setq helm-command-prefix-key "C-z")
   #+END_SRC
** =helm-descbinds=
   #+BEGIN_SRC emacs-lisp
     (el-get-bundle helm-descbinds)
     (require 'helm-descbinds nil 'noerror)
     (helm-descbinds-mode)
   #+END_SRC
** =helm-gtags=
   #+BEGIN_SRC emacs-lisp
     (when (executable-find "gtags")
       (progn
         (el-get-bundle helm-gtags)
         (require 'helm-gtags nil 'noerror)))
     (with-eval-after-load "helm-gtags"
       (setq helm-gtags-path-style 'root)
       (setq helm-gtags-ignore-case t)
       (add-hook 'helm-gtags-mode-hook
                 '(lambda ()
                    (local-set-key (kbd "M-t") 'helm-gtags-find-tag)
                    (local-set-key (kbd "M-r") 'helm-gtags-find-rtag)
                    (local-set-key (kbd "M-s") 'helm-gtags-find-symbol)
                    (local-set-key (kbd "C-t") 'helm-gtags-pop-stack)))
       )
     (add-hook 'c-mode-hook    'helm-gtags-mode)
     (add-hook 'cc-mode-hook    'helm-gtags-mode)
     (add-hook 'f90-mode-hook  'helm-gtags-mode)
     (add-hook 'ruby-mode-hook 'helm-gtags-mode)
     (add-hook 'emacs-lisp-mode-hook 'helm-gtags-mode)
   #+END_SRC
** =helm-ag=
   #+BEGIN_SRC emacs-lisp
     (when (executable-find "ag")
       (progn
         (el-get-bundle helm-ag)
         (require 'helm-ag nil 'noerror)))
     (with-eval-after-load "helm-ag"
       (setq helm-ag-base-command "ag --nocolor --nogroup --ignore-case")
       (setq helm-ag-command-option "--all-text")
       (setq helm-ag-insert-at-point 'symbol)
       (define-key global-map (kbd "M-g .") 'helm-ag)
       (define-key global-map (kbd "M-g ,") 'helm-ag-pop-stack)
       (define-key global-map (kbd "C-M-s") 'helm-ag-this-file))
   #+END_SRC
** =helm-locate=
   #+BEGIN_SRC emacs-lisp
     (when (executable-find "mlocate")
       (with-eval-after-load "helm-locate"
         (setq helm-locate-command "mlocate %s -e -A --regex %s")
         ))
   #+END_SRC
** =ido-mode= の完全無効化
   #+BEGIN_SRC emacs-lisp
     (when (fboundp 'ido-mode)
       (ido-mode -1))
   #+END_SRC
* 補完: =yasnippet=, =auto-complete=
** yasnippet
   #+BEGIN_SRC emacs-lisp
     ;; (el-get-bundle yasnippet)
     ;; (require 'yasnippet nil 'noerror)
     ;; (setq yas-snippet-dirs (list (concat my:share-dir "yasnippet")
     ;;                              yas-installed-snippets-dir))
     ;; (yas-global-mode 1)
     ;; (define-key yas-minor-mode-map (kbd "C-x y i") 'yas-insert-snippet)
     ;; (define-key yas-minor-mode-map (kbd "C-x y n") 'yas-new-snippet)
     ;; (define-key yas-minor-mode-map (kbd "C-x y v") 'yas-visit-snippet-file)
     ;; (define-key yas-minor-mode-map (kbd "<tab>")   nil)
     ;; (define-key yas-minor-mode-map (kbd "TAB")     nil)
     ;; (define-key yas-minor-mode-map (kbd "C-<tab>") 'yas-expand)
     ;; (setq yas-verbosity 2)
     ;; ;; (custom-set-variables '(yas-trigger-key (kbd "C-[tab]")))
   #+END_SRC
*** snippet を helm で選択
    #+BEGIN_SRC emacs-lisp
      ;; (defun my:yas/prompt (prompt choices &optional display-fn)
      ;;   (let* ((names (loop for choice in choices
      ;;                       collect (or (and display-fn (funcall display-fn choice))
      ;;                                   choice)))
      ;;          (selected (helm-other-buffer
      ;;                     `(((name . ,(format "%s" prompt))
      ;;                        (candidates . names)
      ;;                        (action . (("Insert snippet" . (lambda (arg) arg))))))
      ;;                     "*helm yas/prompt*")))
      ;;     (if selected
      ;;         (let ((n (position selected names :test 'equal)))
      ;;           (nth n choices))
      ;;       (signal 'quit "user quit!"))))
      ;; (custom-set-variables '(yas/prompt-functions '(my:yas/prompt)))
    #+END_SRC
** auto-complete
*** 基本設定
    #+BEGIN_SRC emacs-lisp
      (el-get-bundle auto-complete)
      (require 'auto-complete-config nil 'noerror)
      ;; 追加メジャーモード
      (add-to-list 'ac-modes 'org-mode)
      (ac-flyspell-workaround)
      ;; 辞書追加
      (add-to-list 'ac-dictionary-directories (concat my:share-dir "ac-dict"))
      (setq ac-comphist-file (concat my:temp-dir "ac-comphist.dat"))
      (setq ac-auto-start 4)                         ; 4 文字以上で起動
      (setq ac-auto-show-menu 1)                     ; 1秒でメニュー表示
      (setq ac-use-comphist t)                       ; 補完候補をソート
      (setq ac-candidate-limit nil)                  ; 補完候補表示を無制限に
      (setq ac-use-quick-help nil)                   ; tool tip 無し
      (setq ac-use-menu-map t)                       ; キーバインド
      (define-key ac-menu-map (kbd "C-n")         'ac-next)
      (define-key ac-menu-map (kbd "C-p")         'ac-previous)
      (define-key ac-completing-map (kbd "<tab>") 'ac-complete)
      (define-key ac-completing-map (kbd "RET")   nil) ; return での補完禁止
      (define-key ac-completing-map (kbd "M-/")   'ac-stop)
      ;; yasnippet 対応
      (setf (symbol-function 'yas-active-keys)
            (lambda ()
              (remove-duplicates
               (mapcan #'yas--table-all-keys (yas--get-snippet-tables)))))
      (ac-config-default)
      ;; (defun ac-org-mode-setup ()
      ;;   (setq ac-sources
      ;;         '(
      ;;           ;; ac-source-abbrev ; Emacs の略語
      ;;           ;; ac-source-css-property ; heavy
      ;;           ac-source-dictionary ; 辞書
      ;;           ac-source-features
      ;;           ac-source-filename
      ;;           ac-source-files-in-current-dir
      ;;           ac-source-functions
      ;;           ;; ac-source-gtags
      ;;           ;; ac-source-imenu
      ;;           ;; ac-source-semantic
      ;;           ;; ac-source-symbols
      ;;           ;; ac-source-variables
      ;;           ;; ac-source-yasnippet
      ;;           )))
      ;; ;; (defun ac-default-setup ()
      ;; ;;   ;;            (message " >> ac-default-setup")
      ;; ;;   (setq ac-sources
      ;; ;;         '(ac-source-abbrev
      ;; ;;           ac-source-dictionary
      ;; ;;           ac-source-words-in-same-mode-buffers)))
      ;; (add-hook 'org-mode-hook 'ac-org-mode-setup)
    #+END_SRC
*** =look= で英単語の補完
    - [[http://syohex.hatenablog.com/entry/20121225/1356449561][英文を書く際の tips - syohex’s diary]]
    #+BEGIN_SRC emacs-lisp
      (defun my:ac-look ()
        "`look' command with auto-completelook"
        (interactive)
        (unless (executable-find "look")
          (error "Please install `look' command"))
        (let ((cmd (format "look %s" ac-prefix)))
          (with-temp-buffer
            (call-process-shell-command cmd nil t)
            (split-string-and-unquote (buffer-string) "\n"))))

      (defun ac-look ()
        (interactive)
        (let ((ac-menu-height 25)
              (ac-candidate-limit t))
          (auto-complete '(ac-source-look))))

      (defvar ac-source-look
        '((candidates . my:ac-look)
          (requires . 5)))

      (add-hook 'after-change-major-mode-hook
                (lambda ()
                  (setq ac-sources (append '(ac-source-look) ac-sources))))
    #+END_SRC
* カレンダー
** =calendar-holidays=
  日本の祝日を表示するために =calendar-holidays= をインストール
  #+BEGIN_SRC emacs-lisp
    (el-get-bundle emacs-jp/japanese-holidays)
    (require 'japanese-holidays nil 'noerror)
  #+END_SRC
** 表示させる祝日
   とりあえず日本のみを表示
   #+BEGIN_SRC emacs-lisp
    (setq calendar-holidays
          (append japanese-holidays holiday-local-holidays))
   #+END_SRC
** カレンダー表示の調整
   祝日をカレ ンダーに表示
   #+BEGIN_SRC emacs-lisp
    (setq mark-holidays-in-calendar t)
   #+END_SRC
   月を曜日の表示調整
   #+BEGIN_SRC emacs-lisp
     (setq calendar-month-name-array
           ["01" "02" "03" "04" "05" "06" "07" "08" "09" "10" "11" "12" ])
     (setq calendar-day-name-array
           ["日" "月" "火" "水" "木" "金" "土"])
     (setq calendar-day-header-array
           ["日" "月" "火" "水" "木" "金" "土"])
   #+END_SRC
   ISO format (YYYY/MM/DD) に変更
   #+BEGIN_SRC emacs-lisp
   (setq calendar-date-style 'iso)
   (calendar-set-date-style 'iso)
   #+END_SRC
** 土曜日・日曜日を祝日として表示
   #+BEGIN_SRC emacs-lisp
     (setq japanese-holiday-weekend '(0 6)
           japanese-holiday-weekend-marker
           '(holiday nil nil nil nil nil japanese-holiday-saturday))
    (add-hook 'calendar-today-visible-hook   'japanese-holiday-mark-weekend)
    (add-hook 'calendar-today-invisible-hook 'japanese-holiday-mark-weekend)
    (add-hook 'calendar-today-visible-hook   'calendar-mark-today)
   #+END_SRC
** 週の開始
   日曜日にする.
   #+BEGIN_SRC emacs-lisp
    (setq calendar-week-start-day 0)
   #+END_SRC
* Org
  org-mode が無いと生きていけない体になりました
** 基本設定
*** 読み込み
    #+BEGIN_SRC emacs-lisp
      (require 'org)    ;; ~/.emacs.d/init.el でも require しているけれど
      (require 'org-capture)
      (require 'org-archive)
      (require 'org-agenda)
      (require 'org-mobile)
      (el-get-bundle org-agenda-property)
      (require 'org-agenda-property nil 'noerror)
      (el-get-bundle bastibe/org-journal
        :autoloads nil)
      (require 'org-journal nil 'noerror)
    #+END_SRC
*** auto-mode-alist
    以前のメモの整理のために [[http://howm.osdn.jp/index-j.html][howm: Hitori Otegaru Wiki Modoki]] も使っているので, howm も有効に
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
      (add-to-list 'auto-mode-alist '("\\.howm$" . org-mode))
    #+END_SRC
*** キーバインド
    #+BEGIN_SRC emacs-lisp
      (define-key global-map (kbd "C-c a") 'org-agenda)
      ;; (define-key global-map (kbd "C-c l") 'org-store-link)
      ;; (define-key global-map (kbd "C-c b") 'org-iswitchb)
    #+END_SRC
*** =timestamp=: 更新文字列の変更
    保存時の timestamp 更新に引っかける正規表現をちょっと変更．
    デフォルトでは $Lastupdate: ...$ を使っているけれど，org-mode では +DATE: を引っかける.
    #+BEGIN_SRC emacs-lisp
      (defun my:org-timestamp-hook ()
        "Change `time-stamp-start' in org-mode"
        (set (make-local-variable 'time-stamp-start) "#\\+DATE: 2")
        (set (make-local-variable 'time-stamp-end)   "\$")
        )
      (add-hook 'org-mode-hook 'my:org-timestamp-hook)
    #+END_SRC
*** default は Dropbox に保存
    #+BEGIN_SRC emacs-lisp
      (setq org-directory (concat (file-name-as-directory (getenv "HOME")) "Dropbox/org/"))
    #+END_SRC
*** return でリンクを辿る
    #+BEGIN_SRC emacs-lisp
    (setq org-return-follows-link t)
    #+END_SRC
*** 見出しを畳んで表示
    #+BEGIN_SRC emacs-lisp
    (setq org-startup-folded t)
    #+END_SRC
*** 画面端での改行はしない
    #+BEGIN_SRC emacs-lisp
    (setq org-startup-truncated t)
    #+END_SRC
*** narrowing: 編集中の subtree に集中するために
    #+BEGIN_SRC emacs-lisp
      ;; default
      ;; C-x n s -> org-narrow-to-subtree
      ;; C-x n w -> widen
      (defun my:org-narrowing-toggle ()
        "buffer の narrowing 状態を toggle する"
        (interactive)
        (cond ((buffer-narrowed-p)
               (widen))
              ((region-active-p)
               (narrow-to-region (region-beginning) (region-end)))
              ((equal major-mode 'org-mode)
               (org-narrow-to-subtree))
              (t (error "Please select a region to narrow to"))))
      (define-key org-mode-map (kbd "<f3>")   'my:org-narrowing-toggle)
    #+END_SRC
** Capture: メモ取り
*** デフォルトのメモファイル
    #+BEGIN_SRC emacs-lisp
      (setq org-default-notes-file (concat org-directory "Memo.org"))
    #+END_SRC
*** メモ取り用のキーバインドの追加
    以前 changelog memo をやっていた時の癖で =C-x m= をメモにしている
    #+BEGIN_SRC emacs-lisp
      (define-key global-map (kbd "C-x m") 'org-capture)
    #+END_SRC
*** GTD: 状態の追加
    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keywords
            '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "CANCEL(c)" "SOMEDAY(s)")
              (type "ARTICLE(a)")
              (type "MEMO(m)")
              ))
    #+END_SRC
*** GTD: タグの追加
    #+BEGIN_SRC emacs-lisp
      (setq org-tag-alist
        '(
          ("OFFICE"   . ?o)
          ("HOME"     . ?h)
          ("MAIL"     . ?m)
          ("WORK"     . ?w)
          ("DEBIAN"   . ?d)
          ("COMP"     . ?c)
          ))
    #+END_SRC
*** Archive の設定
    TODO→...→DONE としたエントリを =Arhive.org= に移動
     #+BEGIN_SRC emacs-lisp
       (setq org-archive-location "Archive.org::")
       (defun my:org-archive-done-tasks ()
         (interactive)
         ;; ARCHIVE タグを付けるだけなら以下
         ;;   (org-map-entries 'org-archive-set-tag "/DONE" 'file))
         ;; org-archive-location に refile したいなら以下
         (org-map-entries 'org-archive-subtree "/DONE" 'file))
       (add-hook 'org-todo-statistics-hook 'my:org-archive-done-tasks)
       (add-hook 'org-todo-after-statistics-hook 'my:org-archive-done-tasks)
     #+END_SRC
*** Refile
    #+BEGIN_SRC emacs-lisp
      ;; (setq org-refile-targets
      ;;       '(("Diary.org" :level . 1)))
    #+END_SRC
*** Capture Template の追加
    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
            `(
              ("t" "Todo" plain
               (file (concat org-directory "Memo.org"))
               "* TODO %^{title} %^g\n  %?\n  %a"
               :prepend t
               :unnarrowed nil
               :kill-buffer t
               )
              ("s" "scheduled TODO" plain
               (file (concat org-directory "Schedule.org"))
               "* TODO %^{title} %^g\n  %?\n  %a\n %^t"
               :prepend t
               :unnarrowed nil
               :kill-buffer t
               )
              ("m" "Memo" plain
               (file (concat org-directory "Memo.org"))
               "* MEMO %t %^{titlle}\n  %?\n  %a"
               :prepend t
               :unnarrowed nil
               :kill-buffer t
               )
              ))
              ;; ("d" "Diary" plain
              ;;  (file (concat org-directory "Diary.org"))
              ;;  "* DIARY %t %^{title}\n  %?\n"
              ;;  :prepend t
              ;;  :unnarrowed nil
              ;;  :kill-buffer t
              ;;  ))
            ;; )
      ;; (setq org-capture-templates
      ;;       `(
      ;;         ("p"
      ;;          "Project Task"
      ;;          entry (file+headline (expand-file-name "~/project/project.org") "Inbox") "** TODO %?\n    %i\n    %a\n    %T")a
      ;;         ("t" "Todo" plain
      ;;          (file (concat org-directory "Memo.org"))
      ;;          ;; "* TODO <%<%Y-%m-%d>> %^{title} %^g\n  %?\n  %a\n  #+BEGIN_QUOTE\n%i\n  #+END_QUOTE"
      ;;          "* TODO <%<%Y-%m-%d>> %^{title} %^g\n  %?\n  %a"
      ;;          :prepend nil
      ;;          :unnarrowed nil
      ;;          :kill-buffer t
      ;;          )
      ;;         ;; ("e" "Email Todo" plain
      ;;         ;;  (file (concat org-directory "Memo.org"))
      ;;         ;;  ;; "* TODO <%<%Y-%m-%d>> %:subject %^g\n  %?\n  %a\n  #+BEGIN_QUOTE\n%i\n  #+END_QUOTE"
      ;;         ;;  "* TODO <%<%Y-%m-%d>> %:subject %^g\n  %?\n  %a"
      ;;         ;;  :prepend nil
      ;;         ;;  :unnarrowed nil
      ;;         ;;  :kill-buffer t
      ;;         ;;  )
      ;;         ;; ("s" "Schedule" plain
      ;;         ;;  (file (concat org-directory "Schedule.org"))
      ;;         ;;  ;; "* TODO <%<%Y-%m-%d>> %^{title} %^g\n  %?\n  %a\n  #+BEGIN_QUOTE\n%i\n  #+END_QUOTE"
      ;;         ;;  "* TODO <%<%Y-%m-%d>> %^{title} %^g\n  %?\n  %a"
      ;;         ;;  :prepend nil
      ;;         ;;  :unnarrowed nil
      ;;         ;;  :kill-buffer t
      ;;         ;;  )
      ;;         ;; ("S" "Schedule from Email" plain
      ;;         ;;  (file (concat org-directory "Schedule.org"))
      ;;         ;;  ;; "* <%<%Y-%m-%d>> %:subject %^g\n  %?\n  %a\n  #+BEGIN_QUOTE\n%i\n  #+END_QUOTE"
      ;;         ;;  "* <%<%Y-%m-%d>> %:subject %^g\n  %?\n  %a"
      ;;         ;;  :prepend nil
      ;;         ;;  :unnarrowed nil
      ;;         ;;  :kill-buffer t
      ;;         ;;  )
      ;;         ;; ("m" "Memo" plain
      ;;         ;;  (file (concat org-directory "Memo.org"))
      ;;         ;;  ;; (file (concat org-directory (format-time-string "%Y%m%d-%H%M%S.howm")))
      ;;         ;;  ;; "* MEMO <%<%Y-%m-%d>> %?\n  %a\n  #+BEGIN_QUOTE\n%i\n  #+END_QUOTE"
      ;;         ;;  "* MEMO <%<%Y-%m-%d>> %?\n  %a"
      ;;         ;;  :prepend t
      ;;         ;;  :unnarrowed nil
      ;;         ;;  :kill-buffer t
      ;;         ;;  )
      ;;         ;; ("d" "Diary" plain
      ;;         ;;  (file (concat org-directory "Diary.org"))
      ;;         ;;  ;; (file (concat org-directory (format-time-string "%Y%m%d-%H%M%S.howm")))
      ;;         ;;  "* DIARY <%<%Y-%m-%d>> %^{title}\n  %?"
      ;;         ;;  :prepend t
      ;;         ;;  :unnarrowed nil
      ;;         ;;  :kill-buffer t
      ;;         ;;  )
      ;;         ))
    #+END_SRC
*** Capture での bookmark の使用禁止?
    refile 時には使われてしまうので, 実は意味が無かったりするの?
    #+BEGIN_SRC emacs-lisp
    ;;  (setq org-capture-bookmark nil)
    #+END_SRC
** Agenda
*** Agenda 表示で使用するファイル
    #+BEGIN_SRC emacs-lisp
      ;; (setq org-agenda-files (list org-directory))
      (setq org-agenda-files nil)
      (dolist (file
               '("Archive.org"
                 "Diary.org"
                 "Memo.org"
                 "Schedule.org"
                 "GFD.org"
                 "KUSM.org"
                 "DebianJP.org"
                 ;; "mobile.org"
                 "twitter.org"
                 ;; "twitter_2014.org"
                 ;; "twitter_2013.org"
                 ;; "twitter_2012.org"
                 ;; "twitter_2011.org"
                 ;; "twitter_2010.org"
                 ;; "twitter_2009.org"
                 ;; "twitter_2008.org"
                 ;; "twitter_2007.org"
                 "journal.org"
                 ))
        (add-to-list 'org-agenda-files (concat org-directory file)))
    #+END_SRC
*** 表示のカスタマイズ
    初期表示
    #+BEGIN_SRC emacs-lisp
    ;; (setq org-agenda-span 'week)
    (setq org-agenda-span 'day)
    #+END_SRC

    趣味で土曜日をの face を追加.
    祝日, 休日を日曜と同じfaceにする. 元ネタは以下:
    @see: [[https://julien.danjou.info/blog/2010/org-mode-and-holidays][Org-mode and holidays | Julien Danjou]]
    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-weekend-days '(0))
      (defface my:org-agenda-date-saturday
        '((t (:foreground "blue")))
        "Agenda 表示中の土曜日用のface"
        :group 'org-agenda )

      (defun my:org-agenda-day-face-function (date)
        "Compute DATE face for saturday, holidays."
        (unless (org-agenda-todayp date)
          (dolist (file (org-agenda-files nil 'ifmode))
            (when (member (calendar-day-of-week date) '(6))
              (return 'my:org-agenda-date-saturday))
            (let ((face
                   (dolist (entry (org-agenda-get-day-entries file date))
                     (let ((category (with-temp-buffer
                                       (insert entry)
                                       (org-get-category (point-min)))))
                       (when (or (string= "祝日" category)
                                 (string= "休日" category)))))))
              (when face (return face))))))
      (setq org-agenda-day-face-function 'my:org-agenda-day-face-function)
    #+END_SRC
    日付表示を =YYYY/MM/DD= に: =calendar-date-style= で変わってくれると良いのに.
    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-format-date "%Y/%m/%d (%a)")
    #+END_SRC
    Org-gcal で取得したカレンダーファイルに合わせて色分け
    #+BEGIN_SRC emacs-lisp
      (defface my:org-agenda-calendar-KUSM
        '((t (:foreground "green")))
        "Agenda 表示中, KUSM.org の表示 face"
        :group 'org-agenda )
      (defface my:org-agenda-calendar-Schedule
        '((t (:foreground "blue")))
        "Agenda 表示中, Schedule.org の表示 face"
        :group 'org-agenda )
      (defface my:org-agenda-calendar-GFD
        '((t (:foreground "yellow")))
        "Agenda 表示中, GFD.org の表示 face"
        :group 'org-agenda )
      (defface my:org-agenda-calendar-DebianJP
        '((t (:foreground "purple")))
        "Agenda 表示中, DebianJP.org の表示 face"
        :group 'org-agenda )
      (defface my:org-agenda-calendar-twitter
        '((t (:foreground "gray")))
        "Agenda 表示中, Twiiter log の表示 face"
        :group 'org-agenda )
      (add-hook 'org-finalize-agenda-hook
                (lambda ()
                  (save-excursion
                    (goto-char (point-min))
                    (while (re-search-forward "KUSM:" nil t)
                      (add-text-properties (match-beginning 0) (point-at-eol)
                                           '(face my:org-agenda-calendar-KUSM)))
                    (goto-char (point-min))
                    (while (re-search-forward "Schedule:" nil t)
                      (add-text-properties (match-beginning 0) (point-at-eol)
                                           '(face my:org-agenda-calendar-Schedule)))
                    (goto-char (point-min))
                    (while (re-search-forward "DebianJP:" nil t)
                      (add-text-properties (match-beginning 0) (point-at-eol)
                                           '(face my:org-agenda-calendar-DebianJP)))
                    (goto-char (point-min))
                    (while (re-search-forward "GFD:" nil t)
                      (add-text-properties (match-beginning 0) (point-at-eol)
                                           '(face my:org-agenda-calendar-GFD)))
                    (goto-char (point-min))
                    (while (re-search-forward "twitter:" nil t)
                      (add-text-properties (match-beginning 0) (point-at-eol)
                                           '(face my:org-agenda-calendar-twitter)))
                    )))
    #+END_SRC
*** =org-agenda-custom-commands= GTD 用の表示の追加
    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-custom-commands
            '(
              ("n" "agenda and all TODO list"
               (
                (agenda " ")
                (todo "TODO")
                (todo "WAIT")
                (todo "SOMEDAY")
                )
               )
              ("N" "All memo entry"
               (
                (todo "MEMO")
                )
               )
              ("d" "journal and diary"
               (
                (todo "JOURNAL")
                (todo "DIARY")
                )
               )
              ))
    #+END_SRC
** =org-journal=: 日記
   #+BEGIN_SRC emacs-lisp
     (setq org-journal-dir org-directory)
     (setq org-journal-file-format "journal.org")
     (setq org-journal-date-format "%x (%a)")
     (setq org-journal-date-prefix "* ")
     (setq org-journal-time-format "<%Y-%m-%d %R> ")
     (setq org-journal-time-prefix "** ")
     (with-eval-after-load "org-journal"
       (global-set-key (kbd "C-c C-j") 'browse-url-at-point)
       (global-set-key (kbd "C-x M")   'org-journal-new-entry))
     ;; Key bindings
     ;; (define-key org-journal-mode-map (kbd "C-c C-f") 'org-journal-open-next-entry)
     ;; (define-key org-journal-mode-map (kbd "C-c C-b") 'org-journal-open-previous-entry)
     ;; (define-key org-journal-mode-map (kbd "C-c C-j") 'org-journal-new-entry)
     ;; (define-key calendar-mode-map "j" 'org-journal-read-entry)
     ;; (define-key calendar-mode-map (kbd "C-j") 'org-journal-display-entry)
     ;; (define-key calendar-mode-map "]" 'org-journal-next-entry)
     ;; (define-key calendar-mode-map "[" 'org-journal-previous-entry)
     ;; (define-key calendar-mode-map (kbd "i j") 'org-journal-new-date-entry)
     ;; (define-key calendar-mode-map (kbd "f f") 'org-journal-search-forever)
     ;; (define-key calendar-mode-map (kbd "f w") 'org-journal-search-calendar-week)
     ;; (define-key calendar-mode-map (kbd "f m") 'org-journal-search-calendar-month)
     ;; (define-key calendar-mode-map (kbd "f y") 'org-journal-search-calendar-year)))
   #+END_SRC
*** エントリ作成時に日付を入れる
    単一ファイルで運用するために: どっちが良いのかなぁ...．
    #+BEGIN_SRC emacs-lisp
      (defadvice org-journal-new-entry (before my:org-journal-add-date-entry)
        "Insert date entry"
        (find-file-other-window (concat org-journal-dir org-journal-file-format))
        (org-journal-decrypt)
        (unless
            (string-match (format-time-string org-journal-date-format)
                          (buffer-substring-no-properties (point-min) (point-max)))
          (progn
            (goto-char (point-max))
            (insert (concat "\n" org-journal-date-prefix
                            (format-time-string org-journal-date-format)))
            ))
        )
      (ad-activate 'org-journal-new-entry)
    #+END_SRC
** Babel
*** コードブロックの font-lock
    #+BEGIN_SRC emacs-lisp
      (setq org-src-fontify-natively t)
    #+END_SRC
*** ditaa
    #+BEGIN_SRC emacs-lisp
      (when (file-exists-p (concat (getenv "HOME") "/bin/jditaa.jar"))
        (progn
          (setq org-ditaa-jar-path (concat (getenv "HOME") "/bin/jditaa.jar"))
          (org-babel-do-load-languages
           'org-babel-load-languages
           '((ditaa . t)))))
    #+END_SRC
** Export
*** 読み込み
    #+BEGIN_SRC emacs-lisp
    (require 'ox)
    #+END_SRC
*** 余計な空白の削除
    #+BEGIN_QUOTE
    upTeX以外のTeXやHTMLは，日本語の途中で改行があると、
    それを空白とみなしてしまうので、それを除去するようにする。
    ここでは単純に、U+2000 以降の文字同士が改行で分割されていた場合は
    改行を削除する関数に例を示す。
    #+END_QUOTE
    とのことで，これを頂くことに．
    #+BEGIN_SRC emacs-lisp
      (defun my:remove-org-newlines-at-cjk-text (&optional _mode)
        "先頭が '*', '#', '|' でなく，改行の前後が日本の文字の場合はその改行を除去する．"
        (interactive)
        (goto-char (point-min))
        (while (re-search-forward "^\\([^|#*\n].+\\)\\(.\\)\n *\\(.\\)" nil t)
          (if (and (> (string-to-char (match-string 2)) #x2000)
                   (> (string-to-char (match-string 3)) #x2000))
              (replace-match "\\1\\2\\3"))
          (goto-char (point-at-bol))))

      (eval-after-load "ox"
        '(progn
           (add-hook 'org-export-before-processing-hook
                     'my:remove-org-newlines-at-cjk-text)))
    #+END_SRC
** Org-Wunderlist
   #+BEGIN_SRC emacs-lisp
     ;; (el-get-bundle myuhe/org-wunderlist.el
     ;;   :depends (deferred request alert cl-lib s))
     ;; (require 'org-wunderlist nil t)
     ;; (with-eval-after-load "org-wunderlist"
     ;;   (setq org-wunderlist-client-id (my:auth-source-get-property 'id :apps "org-wunderlist")
     ;;         org-wunderlist-token (my:auth-source-get-property 'token :apps "org-wunderlist")
     ;;         org-wunderlist-file  (concat org-directory "Wunderlist.org")
     ;;         org-wunderlist-dir   (concat my:temp-dir "org-wunderlist/"))
     ;;   (unless (file-directory-p org-wunderlist-dir)
     ;;     (make-directory org-wunderlist-dir)))
   #+END_SRC
** Mobile
   #+BEGIN_SRC emacs-lisp
     ;; (setq org-id-locations-file (concat my:temp-dir "org-id-locations"))
     ;; (setq org-mobile-directory "~/Dropbox/MobileOrg")
     ;; (setq org-mobile-files
     ;;       (list "~/Dropbox/org/Memo.org"
     ;;             "~/Dropbox/org/mobile.org"))
     ;; (setq org-mobile-inbox-for-pull "~/Dropbox/org/mobile.org")
   #+END_SRC
** Org-gcal
   Google カレンダーと org の予定を同期
*** token 等の置き場所の変更
    #+BEGIN_SRC emacs-lisp
      (setq request-storage-directory (concat my:temp-dir "request"))
      (unless (file-directory-p request-storage-directory)
        (make-directory request-storage-directory))
      (setq org-gcal-dir (concat my:temp-dir "org-gcal"))
      (unless (file-directory-p org-gcal-dir)
        (make-directory org-gcal-dir))
    #+END_SRC
*** org-gcal 本体の設定
    実際の情報等は auth-source を使って設定しておく.
    #+BEGIN_SRC emacs-lisp
      ;; org-cal
      (el-get-bundle myuhe/org-gcal.el
        :depends (deferred request alert cl-lib))
      (require 'org-gcal nil t)
      (with-eval-after-load "org-gcal"
        ;; (require 'alert nil 'noerror)
        (setq alert-log-messages t)
        (setq alert-default-style 'log)
        ;; (setq org-gcal-use-notifications t)
        (setq org-gcal-up-days    365) ;; 1 years
        (setq org-gcal-down-days  365) ;; 1 years
        (setq org-gcal-auto-archive nil)
        (setq org-gcal-token-file (expand-file-name ".org-gcal-token" org-gcal-dir))
        (setq org-gcal-client-id (my:auth-source-get-property 'id :apps "org-gcal"))
        (setq org-gcal-client-secret (my:auth-source-get-property 'secret :apps "org-gcal"))
        ;; カレンダーIDをキー、スケジュールを取りこむOrgファイルをvalueとするalist
        (setq org-gcal-file-alist (cadr (my:auth-source-get-property 'calendar-alist :apps "org-gcal")))
        )
    #+END_SRC
* Howm
  Org を使う前は Howm を使っていました.
  過去のメモを検索するためだけに未だに Howm を使っています.
** ディレクトリの設定
   メモの内容は Dropbox で同期することに
   #+BEGIN_SRC emacs-lisp
     (setq howm-directory "~/Dropbox/org")
     ;; メニューと履歴を検索対象から除外するために別ディレクトリへ
     (setq howm-keyword-file "~/Dropbox/.howm/keys")
     (setq howm-history-file "~/Dropbox/.howm/history")
     (setq howm-menu-file "~/Dropbox/.howm/menu")
     (setq howm-file-name-format "%Y%m%d-%H%M%S.howm")
   #+END_SRC
** org-mode でメモを書くためにその1
   メモはorgで書くので, org-mode の hook として howm-mode を登録しておきます.
   こうすると C-c が org に取られるので,
   howm の prefix は C-xC-z にしておきます
   #+BEGIN_SRC emacs-lisp
     ;; org と howm の連携
     (add-hook 'org-mode-hook 'howm-mode)
     (global-unset-key (kbd "C-x C-z"))
     (setq howm-prefix (kbd "C-x C-z"))
     ;; title header は "*"
     (setq howm-view-title-header "*")
    #+END_SRC
** 読み込み
   #+BEGIN_SRC emacs-lisp
     (require 'howm nil 'noerror)
     (require 'elscreen-howm nil 'noerror)
   #+END_SRC
** org-mode でメモを書くためにその2
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "howm-mode"
       '(progn
         ;; \C-c \C-c は org に渡す
         (define-key howm-mode-map (kbd "C-c C-c") nil)
         ;; メモを書いたら elscreen を kill
         (define-key howm-mode-map (kbd "C-x C-z C-c")
           'howm-save-and-kill-buffer/screen)
         ))
     ;; skk と併用するための設定(Dired-X に C-xC-j を奪われないように)
     (setq dired-bind-jump nil)
     ;; 色付けは org-mode 任せ: howm の font-lock を無効化
     (setq howm-use-color nil)
   #+END_SRC
** 検索などの設定
   結構きまり文句かも.
   Linux以外の環境で GNU grep を使う際の条件分岐は
   ちょっと真面目に設定した方が良いかも. あるいは grep 使わない?
*** 検索で大文字小文字を区別しない
     #+BEGIN_SRC emacs-lisp
       (setq howm-keyword-case-fold-search t)
     #+END_SRC
*** grep の設定
     #+BEGIN_SRC emacs-lisp
     (setq howm-view-grep-command "egrep")
     (setq howm-view-fgrep-command "fgrep")
     (setq howm-view-grep-extended-option nil)
     (setq howm-view-grep-fixed-option nil)
     (setq howm-view-grep-file-stdin-option nil)
     #+END_SRC
*** 検索の対象ディレクトリ
    とりあえず追加しないことに
    #+BEGIN_SRC emacs-lisp
      (setq howm-search-other-dir nil)
    #+END_SRC
*** 検索対象除外ファイル
    ad hoc にどんどん増えていくなぁ...
    #+BEGIN_SRC emacs-lisp
      (setq howm-excluded-file-regexp
            "/\\.#\\|[~#]$\\|\\.bak$\\|/CVS/\\|\\.doc\\|\\.pdf\\|\\.txt$\\|\\.html$\\|\\.tex$\\|\\.dvi$\\|\\.fdb_latexmk$\\|\\.ppt$\\|\\.xls$\\|\\.howm-menu$\\|.howm-keys$\\|\\.png$\\|\\.gif$\\|\\.tif$\\|\\.tiff$\\|\\.jpg$\\|\\.jpeg$\\|\\.el$\\|\\.aux$\\|\\.log$\\|Makefile\\|\\.txt$\\|EUC-UCS2\\|\\.fdb_latexmk$\\|latexmkrc\\|\\.gpg$\\|\\.org$")
    #+END_SRC
*** org-mode 連携用
    日付検索用の regexp
    #+BEGIN_SRC emacs-lisp
      (setq howm-reminder-regexp-grep-format
            (concat "<" howm-date-regexp-grep "[ :0-9]*>%s"))
      (setq howm-reminder-regexp-format
            (concat "\\(<" howm-date-regexp "[ :0-9]*>\\)\\(\\(%s\\)\\([0-9]*\\)\\)"))
    #+END_SRC
** メニューなどの表示の設定
*** 決まり文句?
    #+BEGIN_SRC emacs-lisp
     (setq howm-menu-top nil)
     (setq howm-menu-lang 'ja)
    #+END_SRC
*** 一覧にタイトル表示しない
    #+BEGIN_SRC emacs-lisp
     (setq howm-list-title nil)
    #+END_SRC
*** save 時にメニューを更新しない
    #+BEGIN_SRC emacs-lisp
     (setq howm-menu-refresh-after-save nil)
     (setq howm-refresh-after-save nil)
    #+END_SRC
*** 新規メモを上に
    #+BEGIN_SRC emacs-lisp
     (setq howm-prepend t)
    #+END_SRC
*** 全メモ一覧時にタイトル表示
    #+BEGIN_SRC emacs-lisp
    (setq howm-list-all-title t)
    #+END_SRC
*** 「最近のメモ」一覧時にタイトル表示
    #+BEGIN_SRC emacs-lisp
    (setq howm-list-recent-title t)
    #+END_SRC
*** 「最近のメモ」の表示件数
    #+BEGIN_SRC emacs-lisp
    (setq howm-menu-recent-num 20)
    #+END_SRC
*** メニューを 2 時間キャッシュ
    #+BEGIN_SRC emacs-lisp
    (setq howm-menu-expiry-hours 2)
    #+END_SRC
*** RET でファイルを開く際, 一覧バッファを消す. C-u RET なら残る
    #+BEGIN_SRC emacs-lisp
    (setq howm-view-summary-persistent nil)
    #+END_SRC
** メニュー表示用の関数定義
*** 正規表現で検索, 逆順,  表示件数は =howm-menu-recent-num=, という ad hoc な関数
    #+BEGIN_SRC emacs-lisp
      (defun my:howm-menu-search (key &optional formatter regexp-p)
        "Embed search result of KEY into menu, reverse-order, howm-menu-recent-num"
        (let ((fixed-p (not regexp-p)))
          (howm-menu-general "menu-search"
                             formatter
                             (howm-first-n
                              (howm-sort-items-by-reverse-date
                               (howm-view-search-folder-items key (howm-folder) nil fixed-p)
                               ) howm-menu-recent-num)
                             )))
        (setq howm-menu-allow
              (append '(my:howm-menu-search) howm-menu-allow))
    #+END_SRC
** 編集テンプレートの設定
   最近は =org-capture= でメモを取る事が多いので, あんまり使っていないけれども．
   #+BEGIN_SRC emacs-lisp
     (setq howm-dtime-format (concat "<" howm-dtime-body-format ">"))
     (setq howm-insert-date-format "<%s>")
     (setq howm-template-date-format "<%Y-%m-%d %a %H:%M:%S>")
     (setq howm-template-file-format "==>%s")
     (setq howm-template "* MEMO %date %cursor\n%file\n")
     (setq howm-reminder-today-format (format howm-insert-date-format howm-date-format))
   #+END_SRC
*
* tDiary
  #+BEGIN_SRC emacs-lisp
    (when (file-directory-p "~/Dropbox/tdiary/")
      (progn
        (el-get-bundle http-el
          :type http
          :url "https://raw.githubusercontent.com/tdiary/tdiary-contrib/master/util/tdiary-mode/http.el")
        (el-get-bundle tdiary-mode
          :type http
          :depends http-el
          :url "https://raw.githubusercontent.com/tdiary/tdiary-contrib/master/util/tdiary-mode/tdiary-mode.el")
        (with-eval-after-load "tdiary-mode"
          (setq tdiary-diary-list  '(("log" "http://uwabami.junkhub.org/log/")))
          (setq tdiary-csrf-key    (my:auth-source-get-property 'csrf-key    :apps "tdiary"))
          (setq tdiary-passwd-file (my:auth-source-get-property 'passwd-file :apps "tdiary"))
          (setq tdiary-text-directory (expand-file-name "~/Dropbox/tdiary"))
          (setq tdiary-browser-function 'browse-url)
          (setq tdiary-style-mode 'rd-mode)
          (setq tdiary-hour-offset 2)
          (setq tdiary-text-save-p t)
          (setq tdiary-text-suffix ".rd")
          )
        (autoload 'tdiary-mode "tdiary-mode" nil t)
        (autoload 'tdiary-new "tdiary-mode" nil t)
        (autoload 'tdiary-new-diary "tdiary-mode" nil t)
        (autoload 'tdiary-replace "tdiary-mode" nil t)
        ))
  #+END_SRC
* Markdown
  #+BEGIN_SRC emacs-lisp
    (unless (locate-library "markdown-mode")
      (el-get-bundle markdown-mode))
    (add-to-list 'auto-mode-alist
                 '("\\.\\(md\\|mdown\\|markdown\\)\\'" . markdown-mode))
    (with-eval-after-load "markdown-mode"
      (add-hook 'markdown-mode-hook
                '(lambda ()
                   (electric-indent-local-mode -1))))
  #+END_SRC
* プログラム関連
** flycheck
   プログラム作成時に buffer 内部で lint を走らせてくれる優れモノ．
   ただし，lint は別プログラムなので，適切に導入しておく必要がある．
   #+BEGIN_SRC emacs-lisp
   ;;  (el-get-bundle 'flycheck)
   ;;  (require 'flycheck nil 'noerror)
   #+END_SRC
** systemd
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.service$" . conf-unix-mode))
     (add-to-list 'auto-mode-alist '("\\.timer$" . conf-unix-mode))
     (add-to-list 'auto-mode-alist '("\\.target$" . conf-unix-mode))
     (add-to-list 'auto-mode-alist '("\\.mount$" . conf-unix-mode))
     (add-to-list 'auto-mode-alist '("\\.automount$" . conf-unix-mode))
     (add-to-list 'auto-mode-alist '("\\.slice$" . conf-unix-mode))
     (add-to-list 'auto-mode-alist '("\\.socket$" . conf-unix-mode))
     (add-to-list 'auto-mode-alist '("\\.path$" . conf-unix-mode))
   #+END_SRC
* Ruby
  素の =ruby-mode=. =Gemfile= も ruby-mode で扱う
  #+BEGIN_SRC emacs-lisp
    (autoload 'ruby-mode "ruby-mode" "Mode for editing ruby source files" t)
    (add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
    ;; (add-to-list 'auto-mode-alist '("\\.rb$latex " . ruby-mode))
    ;; (add-to-list 'auto-mode-alist '("Capfile$" . ruby-mode))
  #+END_SRC
  =ruby-electric=: 括弧や =do ... end= の補完
  #+BEGIN_SRC emacs-lisp
    (el-get-bundle ruby-electric)
    (require 'ruby-electric nil 'noerror)
    (add-hook 'ruby-mode-hook '(lambda () (ruby-electric-mode t)))
    (setq ruby-electric-expand-delimiters-list nil)
  #+END_SRC
  =ruby-block=: =do...end= の対応をハイライト
  #+BEGIN_SRC emacs-lisp
    (el-get-bundle ruby-block)
    (require 'ruby-block nil 'noerror)
    (ruby-block-mode t)
    (setq ruby-block-highlight-toggle t)
  #+END_SRC
  =rspec-mode=:
  #+BEGIN_SRC emacs-lisp
    (el-get-bundle rspec-mode)
    (require 'rspec-mode nil 'noerror)
    (setq rspec-use-rake-flag nil)
  #+END_SRC

* Fortran (>=90)
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.\\(f|F\\)\\(90|95|03|08\\)$" . f90-mode))
    (setq f90-do-indent 2
          f90-if-indent 2
          f90-type-indent 2
          f90-program-indent 2
          f90-continuation-indent 2
          f90-comment-region "!"
          f90-indented-comment-re "!" )
  #+END_SRC
* TeX
*** 読み込み
    Debian パッケージの場合, =/etc/emacs/site-start.d/50auctex.el= において
    既に =auctex.el= と =preview-latex.el= が load されているため
    特に読み込みの設定は必要無い.
    Debian 以外の場合に, =auctex.el= と =preview-latex= を読み込む.
    #+BEGIN_SRC emacs-lisp
      (unless (file-exists-p "/etc/emacs/site-start.d/50auctex.el")
        (load "auctex.el" nil t)
        (load "preview-latex" nil t))
    #+END_SRC
*** [[https://github.com/tom-tan/auctex-latexmk][auctex-latexmk]]
    AUCTeX で [[http://users.phys.psu.edu/~collins/software/latexmk-jcc/][Latexmk]] を使い,
    かつ platex 実行時に文字コード指定も追加してくれる.
    #+BEGIN_SRC emacs-lisp
      (when (and (and (ignore-errors (el-get-executable-find "platex"))
                      (ignore-errors (el-get-executable-find "latexmk")))
                 (locate-library "auctex"))
        (el-get-bundle tom-tan/auctex-latexmk))
    #+END_SRC
    ここでは,
    - default の "LaTeX" を上書き
    - =dvips + ps2pdfwr= での処理の追加
    をしている.
    #+BEGIN_SRC emacs-lisp
      (defun my:auctex-latexmk-setup ()
        "Add LatexMk command to TeX-command-list."
        (delq (assoc "LaTeX" TeX-command-list) TeX-command-list)
        (add-to-list 'TeX-command-list
                     '("LaTeX" "latexmk -gg -pdfdvi %t" TeX-run-latexmk nil
                       (plain-tex-mode latex-mode doctex-mode) :help "Run LatexMk, with epLaTeX, dvipdfmx"))
        (add-to-list 'TeX-command-list
                     '("LaTeXMk" "latexmk %t" TeX-run-latexmk nil
                       (plain-tex-mode latex-mode doctex-mode) :help "Run LatexMk without any options"))
        (add-to-list 'TeX-command-list
                     '("LaTeXMk(ps2pdfwr)" "latexmk -gg -pdfps %t" TeX-run-latexmk nil
                       (plain-tex-mode latex-mode doctex-mode) :help "Run LatexMk, with (e)pLaTeX, dvips, ps2pdfwr"))
        (setq LaTeX-clean-intermediate-suffixes
              (append
               '("\\.nav" "\\.snm" "\\.fdb_latexmk" "\\.aux.bak" "\\.synctex.gz") LaTeX-clean-intermediate-suffixes))
        (setq TeX-command-output-list
              '(("latexmk" ("pdf")))))
      (add-hook 'LaTeX-mode-hook
                (function (lambda ()
                            (require 'auctex-latexmk nil 'noerror)
                            (my:auctex-latexmk-setup)
                            ;; (add-to-list 'auctex-latexmk-encoding-alist
                            ;;              '(iso-2022-jp      . "jis"))
                            ;; (add-to-list 'auctex-latexmk-encoding-alist
                            ;;              '(iso-2022-jp-unix . "jis"))
                            )))
    #+END_SRC
    =~/.latexmkrc= の設定は以下の通り
    #+BEGIN_SRC perl :tangle no
      #!/usr/bin/env perl
      $kanji  = defined $ENV{"LATEXENC"} ? "-kanji=$ENV{\"LATEXENC\"}" : "-kanjii=utf8" ;
      $latex  = "platex -interaction=nonstopmode -src-specials -shell-escape --synctex=1 $kanji";
      $latex_silent = "platex -interaction=batchmode -src-specials -shell-escape --synctex=1 $kanji";
      $bibtex = "pbibtex $kanji";
      $makeindex = "touch -m %D";
      $dvipdf = "dvipdfmx %O -o %D %S";
      $dvips = 'dvips %O -z -f %S | convbkmk -u > %D';
      $ps2pdf = 'ps2pdfwr %O %S %D';
      $pdf_mode = 3;
      $pdf_previewer = 'start xdg-open';
      $pdf_update_method = 0;
      $clean_ext = "snm nav vrb synctex.gz";
    #+END_SRC
*** 日本語用の設定
**** japanese-latex-mode 用の細工
     =japanese-latex-mode= において, 幾つかのコマンドが追加/上書きされている.
     あまり使うことの無いコマンドが表示されるのが嫌なので,
     それらを削除したり.
     #+BEGIN_SRC emacs-lisp
       (with-eval-after-load "tex-jp"
         (dolist (command '("pTeX" "pLaTeX" "pBibTeX" "jTeX" "jLaTeX" "jBibTeX"))
           (delq (assoc command TeX-command-list) TeX-command-list)))
     #+END_SRC
**** TeX-engine の設定
     どのタイミングで使われているのか良くわかっていないのだけれど, 一応設定しておく.
     #+BEGIN_SRC emacs-lisp
       (setq TeX-engine-alist
             '((ptex "pTeX"
                     "ptex %(kanji)%`%S%(PDFout)%(mode)% -shell-escape"
                     "platex %(kanji)%`%S%(PDFout)%(mode)% -shell-escape"
                     "eptex")
               (uptex "upTeX"
                      "uptex %(kanji)%`%S%(PDFout)%(mode)% -shell-escape"
                      "uplatex %(kanji)%`%S%(PDFout)%(mode)% -shell-escape"
                      "uptex")
               (pdfptex "PDFpLaTeX"
                        "ptex2pdf -e -ot ' %(kanji) %S -shell-escape %(mode)'"
                        "ptex2pdf -e -l -ot '%(kanji) %S -shell-escape %(mode)'"
                        "eptex")
               (pdfuptex "PDFupLaTeX"
                        "ptex2pdf -e -u -ot '%(kanji) %S -shell-escape %(mode)'"
                        "ptex2pdf -u -l -ot '%(kanji) %S -shell-escape %(mode)'"
                        "euptex")
               ))
       (setq TeX-engine 'pdfptex)
     #+END_SRC
     ちなみに
     =japanese-latex-mode= では
     =TeX-engine-alist-builtin= に =ptex, jtex, uptex= が追加(=setq=) されているため
     上記設定は不要(かも).
*** zotero との連携
    #+BEGIN_SRC emacs-lisp
      (el-get-bundle zotelo)
      (setq zotelo-translator-charsets '((BibTeX . "Unicode")
                                         (Default . "Unicode")))
      (add-hook 'LaTeX-mode-hook 'zotelo-minor-mode)
    #+END_SRC
* 独自関数
** カーソルのある位置の face を調べる関数
   わりと良く使う. 地味に便利
   #+BEGIN_SRC emacs-lisp
     (defun my:describe-face-at-point ()
       (interactive)
       (message "%s" (get-char-property (point) 'face)))
   #+END_SRC
* フォントと色
  テーマにした方が良い
  #+BEGIN_SRC emacs-lisp
    (when window-system
      (progn
        (add-to-list 'default-frame-alist '(font . "Ricty Discord-13.5"))
        (set-fontset-font t 'symbol
                          (font-spec :family "Symbola") nil 'prepend)
        ;; (add-to-list 'default-frame-alist '(font . "SeptemberMMono-13.5"))
        ))
    (setq frame-background-mode (frame-parameter nil 'background-mode))
    ;; (setq default-frame-alist
    ;;       '((background-color . "black")
    ;;         (foreground-color . "azure1")
    ;;         (scroll-bar-foreground-color . "red")
    ;;         (vertical-scroll-bars . right)
    ;;         (cursor-color . "green")))
  #+END_SRC
  テスト
  #+BEGIN_SRC emacs-lisp
        (set-foreground-color                                  "#F6F3E8") ; 文字色
        (set-background-color                                  "#333333") ; 背景色
        (set-cursor-color                                      "#FF0000") ; カーソル色
        (set-face-background 'region                           "#222244") ; リージョン
        (set-face-foreground 'mode-line                        "#333333") ; モードライン文字
        (set-face-background 'mode-line                        "#CCCCCC") ; モードライン背景
        (set-face-foreground 'mode-line-inactive               "#999999") ; モードライン文字(非アクティブ)
        (set-face-background 'mode-line-inactive               "#111111") ; モードライン背景(非アクティブ)
        (set-face-foreground 'font-lock-builtin-face           "#7FBFFF") ; 組み込み関数
        (set-face-foreground 'font-lock-comment-delimiter-face "#aaaaaa") ; コメントデリミタ
        (set-face-foreground 'font-lock-comment-face           "#888888") ; コメント
        (set-face-foreground 'font-lock-constant-face          "#FFBF7F") ; 定数(this, selfなども)
        (set-face-foreground 'font-lock-doc-face               "#7FFF7F") ; ドキュメント
        ;; (set-face-foreground 'font-lock-doc-string-face               "#7FFF7F") ; ドキュメント
        (set-face-foreground 'font-lock-function-name-face     "#BF7FFF") ; 関数名
        (set-face-foreground 'font-lock-keyword-face           "#FF7F7F") ; キーワード
        ;; (set-face-foreground 'font-lock-link-face              "#7FFFFF") ; リンク
        ;; (set-face-foreground 'font-lock-negation-char-face        )
        ;; (set-face-foreground 'font-lock-preprocessor-face         )
        ;; (set-face-foreground 'font-lock-regexp-grouping-backslash )
        ;; (set-face-foreground 'font-lock-regexp-grouping-construct )
        (set-face-foreground 'font-lock-string-face            "#7FFF7F") ; 文字列
        (set-face-foreground 'font-lock-type-face              "#FFFF7F") ; クラス
        (set-face-foreground 'font-lock-variable-name-face     "#7F7FFF") ; 変数
        (set-face-foreground 'font-lock-warning-face           "#FF7FBF") ; 警告
        (set-face-foreground 'fringe                           "#666666") ; fringe(折り返し記号などが出る部分)
        (set-face-background 'fringe                           "#282828") ; fringe
        (set-face-foreground 'minibuffer-prompt                "#BF7FFF") ; minibuffer
        (set-face-background 'highlight                        "#444444") ; hl-line 等
        ;;
        (set-face-foreground 'org-agenda-date                  "#FFFFFF") ; org-agenda: 平日
        (set-face-foreground 'my:org-agenda-date-saturday      "#7FBFFF") ; org-agenda: 土曜日
        (set-face-foreground 'my:org-agenda-calendar-KUSM      "#7FFF7F") ; org-agenda:
        (set-face-foreground 'my:org-agenda-calendar-GFD       "#FFFF7F") ; org-agenda:
        (set-face-foreground 'my:org-agenda-calendar-Schedule  "#7FFFFF") ; org-agenda:
        (set-face-foreground 'my:org-agenda-calendar-DebianJP  "#BF7FFF") ; org-agenda:
        (set-face-foreground 'my:org-agenda-calendar-twitter   "#CCCCCC") ; org-agenda:
        (set-face-foreground 'org-agenda-date-weekend          "#FF7F7F") ; org-agenda: 日祝日
        (set-face-foreground 'org-agenda-calendar-event        "#F6F3E8") ; イベント
        (custom-set-faces
         '(org-agenda-date-today ((t (:bold t))))
         ;; custom-set-faces was added by Custom.
         ;; If you edit it by hand, you could mess it up, so be careful.
         ;; Your init file should contain only one such instance.
         ;; If there is more than one, they won't work right.
         ;; '(fixed-pitch ((t (:family "Ricty"))))
         ;; '(variable-pitch ((t (:family "Ricty"))))
         '(fixed-pitch ((t (:family "SeptemberMMono"))))
         '(variable-pitch ((t (:family "SeptemberMMono"))))
         ;; helm: header-line
         '(helm-source-header ((t (:foreground "#F6F3E8" :background "#224488" :bold t))))
         '(helm-visible-mark ((t (:inherit highlight ))))
         '(helm-selection ((t (:inherit highlight ))))
         '(helm-selection-line ((t (:inherit highlight ))))
         ;; helm: directory
         ;; '(helm-ff-directory ((t (:inherit default :foreground "#7FBFFF" :bold t))))
         '(helm-ff-directory ((t (:inherit default :foreground "#7F7FFF" :bold t))))
         '(helm-bookmark-directory ((t (:inherit helm-ff-directory ))))
         '(helm-buffer-directory ((t (:inherit helm-ff-directory ))))
         '(helm-ff-dotted-directory ((t (:inherit helm-ff-directory ))))
         ;; helm: file
         '(helm-ff-file   ((t (:inherit default ))))
         '(helm-bookmark-file ((t (:inherit helm-ff-file ))))
         '(helm-buffer-file ((t (:inherit helm-ff-file ))))
         ;; '(helm-grep-file ((t (:inherit helm-ff-file ))))
         ;; '(helm-etags-file ((t (:inherit helm-ff-file ))))
         ;; helm: file + executable
         '(helm-ff-executable ((t (:inherit helm-ff-file :foreground "#7FFF7F" :bold t))))
         ;; helm: symlink
         '(helm-ff-symlink ((t (:inherit default :foreground "#7FFFFF" :bold t))))
         '(helm-ff-dotted-symlink-directory  ((t (:inherit helm-ff-symlink ))))
         '(helm-ff-invalid-symlink ((t (:inherit default :foreground "#FF7F7F"))))
         ;;
         '(outline-1 ((t (:inherit font-lock-function-name-face :bold t))))
         '(outline-2 ((t (:inherit font-lock-string-face :bold t))))
         '(outline-3 ((t (:inherit font-lock-keyword-face :bold t))))
         '(outline-4 ((t (:inherit font-lock-type-face :bold t ))))
         '(outline-5 ((t (:inherit font-lock-constant-face :bold t ))))
         '(outline-6 ((t (:inherit font-lock-variable-name-face :bold t))))
         '(outline-7 ((t (:inherit font-lock-builtin-face :bold t ))))
         '(outline-8 ((t (:inherit font-lock-comment-face :bold t ))))
         )
  #+END_SRC
* 2ch ビューア: navi2ch
  #+BEGIN_SRC emacs-lisp
    (el-get-bundle navi2ch)
    (autoload 'navi2ch "navi2ch" "Navigator for 2ch for Emacs" t)
    (setq navi2ch-directory my:temp-dir)
    (setq navi2ch-net-http-proxy "127.0.0.1:40000")
    (setq navi2ch-article-auto-range nil)
    (with-eval-after-load "navi2ch"
      (setq navi2ch-message-save-sendlog t)
      (setq navi2ch-search-web-search-method 'navi2ch-search-union-method)
      (setq navi2ch-search-union-method-list '(navi2ch-search-find-2ch-method
                                               navi2ch-search-hula-method))
      (add-to-list 'navi2ch-list-navi2ch-category-alist
                   navi2ch-message-sendlog-board)
      (setq navi2ch-message-sendlog-message-format-function
            'navi2ch-message-sendlog-message-format-with-board-name)
      (require 'navi2ch-head))

  #+END_SRC
* Test
  #+BEGIN_SRC emacs-lisp
    ;; (setq glyphless-char-display "--")
  #+END_SRC
