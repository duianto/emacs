# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2012/09/13 21:00:37$
# License: Expat
#
#+TITLE: フォントとフレームの設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+SETUPFILE: ./export-config.org
#+BEGIN_HTML
---
layout: emacs
title: フォントとフレームの設定
---
#+END_HTML
* カーソルのある位置の face を調べる関数
  #+BEGIN_SRC emacs-lisp
    (defun describe-face-at-point ()
      (interactive)
      (message "%s" (get-char-property (point) 'face)))
  #+END_SRC
* [[http://d.hatena.ne.jp/khiker/20090809/emacs_opacity][フレームを半透明にする]] [fn:1]
  飽きたら止めると思うけれど.
  #+BEGIN_SRC emacs-lisp
    (defun my-opacity-change (action)
      (let* ((op
              (frame-parameter
               (selected-frame) 'alpha)) val)
        (unless op
          (setq op 100))
        (when (setq val
                    (cond
                     ((eq action 'up)
                      (if (> op 90) 100 (+ op 10)))
                     ((eq action 'down)
                      (if (> 10 op) 10 (- op 10)))
                     ((eq action 'clear) 100)
                     ((numberp action) action)
                     (t nil)))
          (set-frame-parameter (selected-frame) 'alpha val))))
    (when window-system
      (my-opacity-change 95)     ; default の透明度は 90 に
      )
  #+END_SRC
* フォントの設定
  #+BEGIN_SRC emacs-lisp
    ;; (when window-system
    ;;   (modify-frame-parameters nil '((wait-for-wm . nil)))
    ;;   (create-fontset-from-ascii-font "Ricty-13.5" nil "ricty")
    ;;   (dolist (charset '(
    ;;                      unicode
    ;;                      japanese-jisx0208
    ;;                      japanese-jisx0208-1978
    ;;                      japanese-jisx0212
    ;;                      japanese-jisx0213-1
    ;;                      japanese-jisx0213-2
    ;;                      japanese-jisx0213-a
    ;;                      japanese-jisx0213.2004-1
    ;;                      katakana-jisx0201
    ;;                      ))
    ;;     (set-fontset-font "fontset-ricty"
    ;;                       charset
    ;;                       (font-spec :family "Ricty" :size 13.5 nil 'prepend)))
    ;;   (add-to-list 'default-frame-alist '(font ."fontset-ricty"))
    ;;   (custom-set-faces
    ;;    '(variable-pitch ((t (:family "Ricty" :size 13.5 nil 'prepend))))
    ;;    '(fixed-pitch ((t (:family "Ricty" :size 13.5 nil 'prepend))))
    ;;    ))
    (when window-system
      (set-default-font
       "-shinonome-gothic-medium-r-normal--16-*-*-*-*-*-*-*")
      (progn
        (set-face-font 'default
                       "-shinonome-gothic-medium-r-normal--16-*-*-*-*-*-*-*")
        (set-face-font 'bold
                       "-shinonome-gothic-medium-r-normal--16-*-*-*-*-*-*-*")
        (set-face-font 'italic
                       "-shinonome-gothic-medium-r-normal--16-*-*-*-*-*-*-*")
        (set-face-font 'bold-italic
                       "-shinonome-gothic-medium-r-normal--16-*-*-*-*-*-*-*")
        )
      (custom-set-faces
       ;; '(fixed-pitch ((t (:family "Ricty" :size 13.5 nil (quote prepend)))))
       ;; '(variable-pitch ((t (:family "Ricty" :size 13.5 nil (quote prepend)))))
       '(custom-group-tag ((t (:inherit fixed-pitch :foreground "light blue" :weight bold :height 1.0))))
       '(custom-group-tag-1 ((t (:inherit fixed-pitch :foreground "pink" :weight bold :height 1.0))))
       '(e2wm:face-subtitle ((t (:inherit fixed-pitch :foreground "Gray90" :height 1.0))))
       '(e2wm:face-title ((t (:inherit fixed-pitch :foreground "yellow" :height 1.0)))))
      )
  #+END_SRC
* color-theme
  #+BEGIN_SRC emacs-lisp
    (unless (locate-library "color-theme-darkpastel")
      (el-get 'sync 'color-theme-darkpastel))
  #+END_SRC
* Space や Tab に色付け
  whitespace-mode の方が良いのかもしれないけれど,
  設定が面倒なのと多少重いので...
  #+BEGIN_SRC emacs-lisp
    ;; (require 'whitespace)
    ;; (setq whitespace-style '(newline-mark))
    ;; (setq whitespace-display-mappings
    ;;       '(
    ;;         (newline-mark 10 [8629 10])
    ;;         ))
    ;; (global-set-key (kbd "C-x w") 'global-whitespace-mode)
    (defface my-face-r-1 '((t (:background "gray10"))) nil)
    (defface my-face-b-1 '((t (:background "gray"))) nil)
    (defface my-face-b-2 '((t (:background "gray50"))) nil)
    (defface my-face-u-1 '((t (:foreground "SteelBlue" :underline t))) nil)
    (defvar my-face-r-1 'my-face-r-1)
    (defvar my-face-b-1 'my-face-b-1)
    (defvar my-face-b-2 'my-face-b-2)
    (defvar my-face-u-1 'my-face-u-1)
    (defadvice font-lock-mode (before my-font-lock-mode ())
      (font-lock-add-keywords
       major-mode
       '(("\t" 0 my-face-b-2 append)
         ("　" 0 my-face-b-1 append)
         ("[ \t]+$" 0 my-face-u-1 append)
         ;; ("[\r]*\n" 0 my-face-r-1 append)
         )))
    (ad-enable-advice 'font-lock-mode 'before 'my-font-lock-mode)
    (ad-activate 'font-lock-mode)
  #+END_SRC
* e2wm
** 読み込み
  #+BEGIN_SRC emacs-lisp
    (unless (locate-library "e2wm")
      (el-get 'sync 'e2wm))
    (require 'e2wm)
    (global-set-key (kbd "M-+") 'e2wm:start-management)
    (require 'e2wm-config)
  #+END_SRC
** frame の設定
   #+BEGIN_SRC emacs-lisp
     (when window-system
       (cond
        ((and (>= (x-display-pixel-width) 1440)
              (>= (x-display-pixel-height) 900))
           (setq e2wm:c-code-recipe
                 '(| (:left-max-size 35)
                     (- (:upper-size-ratio 0.7)
                        files history)
                     (- (:upper-size-ratio 0.7)
                        (| (:right-max-size 30)
                           main imenu)
                        sub)))
           )
        ((and (>= (x-display-pixel-width) 1280)
              (>= (x-display-pixel-height) 768))
         (setq e2wm:c-code-recipe
               '(| (:left-max-size 30)
                   (- (:upper-size-ratio 0.7)
                      files history)
                   (- (:upper-size-ratio 0.7)
                      (| (:right-max-size 25)
                         main imenu)
                      sub)))
         )
        (t
         ;; for 1024x768
         (setq e2wm:c-code-recipe
               '(| (:left-max-size 35)
                   (- (:upper-size-ratio 0.7)
                      (- (:upper-size-ratio 0.6)
                         files imenu)
                      history)
                   (- (:upper-size-ratio 0.7)
                      main sub)))
         )
        ))
   #+END_SRC
** Top 無しの dashboard みたいなアレ
   Top などの情報は conky で表示しているので,
   があれば良いのだけれど, どしたら良いかな.
   - 時計
   - multi-term
   - twittering-mode
* Footnotes

[fn:1] フレームを半透明にする: http://d.hatena.ne.jp/khiker/20090809/emacs_opacity
