# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2012/05/03 19:46:42$
# License: Expat
#
#+TITLE: auto-installとinstallしたelispの設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
* 始めに
  emacs-lispが公開されているURIやEmacsWikiからファイルを取得して
  installするライブラリ.
  auto-installについては[[http://www.emacswiki.org/emacs/AutoInstall][EmacsWiki - AutoInstall]] [fn:1]を参考に.
* 基本設定
** load-path の追加
   Debian にはパッケージがある[fn:2]. パッケージが無い/使えない環境では
   ~/.emacs.d/site-lisp/auto-install-elを読みこむ.
  #+BEGIN_SRC emacs-lisp
  (my:not-locate-library auto-install "site-lisp/auto-install-el")
  (require 'auto-install nil t)
  #+END_SRC
** 取得する際のネットワークの設定
   wgetで取得する. proxyもwgetに任せるので適宜 ~/.wgetrc を
   書いておく.
   url-handlerでのproxy設定はなんか上手く動かないけれど,
   深追いはしていない.
  #+BEGIN_SRC emacs-lisp
  (setq auto-install-use-wget t)
  ;; (setq url-proxy-services '(("http" . "localhost:20080")))
  #+END_SRC
** install 先の設定
   auto-installでinstallするelispのinstall先は
   ~/.emacs.d/auto-install/ 以下に.
   #+BEGIN_SRC emacs-lisp
     (setq auto-install-directory
           (expand-file-name
            (concat user-emacs-directory "auto-install/")))
   #+END_SRC
* cp5022x.el
  文字コード関連. 無いと途方にくれてしまう.
** install
   #+BEGIN_SRC emacs-lisp
     (unless (locate-library "cp5022x")
       (auto-install-from-url "http://nijino.homelinux.net/emacs/cp5022x.el"))
   #+END_SRC
* auto-async-byte-compile
  auto-installした際に自動でbyte-compileしてくれる.
  他にも, emacs-lisp-mode なファイルを保存するときに,
  非同期にbyte-compileを走らせたりできるので,
  byte-compile 忘れが無い. 結構素敵.
** install
   #+BEGIN_SRC emacs-lisp
     (unless (locate-library "auto-async-byte-compile")
       (auto-install-from-url "http://www.emacswiki.org/emacs/download/auto-async-byte-compile.el"))
   #+END_SRC
** 設定
   先頭が "_" で始まるファイルは compile しない
   #+BEGIN_SRC emacs-lisp
     (when (require 'auto-async-byte-compile nil t)
       (setq auto-async-byte-compile-exclude-files-regexp "^_")
       (add-hook 'emacs-lisp-mode-hook
                 'enable-auto-async-byte-compile-mode))
   #+END_SRC
* [[http://d.hatena.ne.jp/kiwanami/20110221/1298293727][パスワード管理ツール id-manager.el]]
** インストール
   #+BEGIN_SRC emacs-lisp
     (unless (locate-library "id-manager")
       (auto-install-from-url "https://github.com/kiwanami/emacs-id-manager/raw/master/id-manager.el"))
   #+END_SRC
** 設定
  #+BEGIN_SRC emacs-lisp
    (when (require 'id-manager nil t)
      ;; (autoload 'id-manager "id-manager" nil t)
      (global-set-key (kbd "M-7") 'id-manager)
      (setq idm-database-file "~/.gnupg/idm-db.gpg"))
  #+END_SRC
* recentf の拡張
  詳細は rubikitch さんの[[http://d.hatena.ne.jp/rubikitch/20091224/recentf][人は俺を「recentfマスター」と呼ぶ]] [fn:5] を参照.
** インストール
   #+BEGIN_SRC emacs-lisp
     (unless (locate-library "recentf-ext")
       (auto-install-from-url "http://www.emacswiki.org/cgi-bin/wiki/download/recentf-ext.el"))
   #+END_SRC
** 読み込み
   #+BEGIN_SRC emacs-lisp
     (require 'recentf-ext nil t)
   #+END_SRC
* color-moccur
** install
   #+BEGIN_SRC emacs-lisp
     (unless (locate-library "color-moccur")
       (auto-install-from-url "http://emacswiki.org/emacs/download/color-moccur.el"))
   #+END_SRC
** 設定
   #+BEGIN_SRC emacs-lisp
     (when (require 'color-moccur nil t)
       ;; M-o に割り当て
       (define-key global-map (kbd "M-o") 'occur-by-moccur)
       ;; スペース区切りで AND 検索
       (setq moccur-split-word t)
       ;; ディレクトリ検索時に除外するファイル
       (add-to-list 'dmoccur-exclusion-mask "^#.+#$")
       ;; Migemo が使えるなら Migemo を使う
       (when (and (locate-library "migemo")
                  (executable-find "cmigemo"))
         (setq moccur-use-migemo t))
       )
   #+END_SRC
* moccur-edit
  color-moccurの結果を一括編集
** install
   #+BEGIN_SRC emacs-lisp
     (unless (locate-library "moccur-edit")
       (auto-install-from-url "http://www.emacswiki.org/emacs/download/moccur-edit.el"))
   #+END_SRC
** 設定
   #+BEGIN_SRC emacs-lisp
     (when (and (locate-library "color-moccur")
                (locate-library "moccur-edit"))
       (require 'moccur-edit)
       (defadvice moccur-edit-change-file
         (after save-after-moccur-edit-buffer-activate)
         (save-buffer))
       )
   #+END_SRC
* zotexo
  Firefox の plugin のひとつである Zotero を使って
  BibTeX 情報を更新するための emacs-lisp.
  設定は [[file:auctex_config.org][AUCTeX の設定]] で
  #+BEGIN_SRC emacs-lisp
    (unless (locate-library "zotexo")
      (auto-install-from-url "https://zotexo.googlecode.com/svn/trunk/zotexo.el"))
  #+END_SRC
* popup-color-at-point
** install
   #+BEGIN_SRC emacs-lisp
    (when (and (locate-library "popup")
               (not (locate-library "popup-color-at-point")))
      (auto-install-from-url "https://gist.github.com/raw/762297/b2a27ccd471a21e30dd82b3adb126b8caed41548/popup-color-at-point.el"))
   #+END_SRC
** 設定
   #+BEGIN_SRC emacs-lisp
     (when (locate-library "popup")
       (require 'popup-color-at-point))
   #+END_SRC
* [[http://d.hatena.ne.jp/khiker/20070503/emacs_text_translator][Emacs でテキスト翻訳をする elisp]].[fn:6]
   その名も text-translator-el.
   #+BEGIN_SRC emacs-lisp
     (setq text-translator-proxy-server "localhost")
     (setq text-translator-proxy-port "20080")
     (require 'text-translator)
     (global-set-key (kbd "C-x t") 'text-translator-all-by-auto-selection)
   #+END_SRC
#* 以下, コメントアウト
* [[http://d.hatena.ne.jp/mooz/20101003/p1][zlc.el で Emacs のミニバッファ補完 zsh ライクに]] [fn:3]
  find-file には zlc を使う
** install
   #+BEGIN_SRC emacs-lisp
     (unless (locate-library "zlc")
       (auto-install-from-url "https://github.com/mooz/emacs-zlc/raw/master/zlc.el"))
   #+END_SRC
** 設定
   補完時のキーバインド.
   zlc-reset がうまく動いてくれないような...
   #+BEGIN_SRC emacs-lisp
     (require 'zlc)
     (let ((map minibuffer-local-map))
       (define-key map (kbd "<backtab>") 'zlc-select-previous)
       (define-key map (kbd "S-<tab>")   'zlc-select-previous)
       (define-key map (kbd "C-p")       'zlc-select-previous-vertical)
       (define-key map (kbd "C-n")       'zlc-select-next-vertical)
       (define-key map (kbd "C-b")       'zlc-select-previous)
       (define-key map (kbd "C-f")       'zlc-select-next)
       (define-key map (kbd "C-d")       'zlc-reset)
       )
   #+END_SRC
* [[http://d.hatena.ne.jp/tarao/20101011/1286804507][Yet another icompelete]] [fn:4]
  find-file には yaicomplete を使う
** install
   #+BEGIN_SRC emacs-lisp
     (unless (locate-library "yaicomplete")
       (auto-install-from-url "http://github.com/tarao/elisp/raw/master/yaicomplete.el"))
   #+END_SRC
** 設定
   #+BEGIN_SRC emacs-lisp
     (require 'yaicomplete)
     (yaicomplete-mode)
   #+END_SRC
* Footnotes

[fn:1] EmacsWiki - AutoInstall: [[http://www.emacswiki.org/emacs/AutoInstall]]

[fn:2] qa.debian.org - auto-install-el: [[http://packages.qa.debian.org/a/auto-install-el.html]]

[fn:3] zlc.el で Emacs のミニバッファ補完を zsh ライクに: [[http://d.hatena.ne.jp/mooz/20101003/p1]]

[fn:4] Yet another icomplete: [[http://d.hatena.ne.jp/tarao/20101011/ 1286804507]]

[fn:5] 人は俺を「recentfマスター」と呼ぶ: [[http://d.hatena.ne.jp/rubikitch/20091224/recentf]]

[fn:6] text-translator-el: http://d.hatena.ne.jp/khiker/20070503/emacs_text_translator



