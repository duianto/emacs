# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2013/02/05 16:33:28$
# License: Expat.
#
#+TITLE: Wanderlust の設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+SETUPFILE: ./export-config.org
#+BEGIN_HTML
---
layout: emacs
title: Wanderlustの設定
---
#+END_HTML
* Wanderlust の設定
  MUA として Wanderlust を愛用している.
  ちなみに, 配布御本尊である m17n.org が運用停止したので,
  一時配布元がどこになるのか良くわかりません.

  Emacs24 で動く版は配布先が github になっています. [fn:1]
* 依存/追加ライブラリのインストールと読み込み
  インストールしているのは今のところ以下の通り:
  - rail
  - elscreen-wl
  - google-contacts-wl
  - c-sig
  - offlineimap-el
** rail
   SEMI や FLIM などの UA の表示に [[http://uwabami.github.com/rail/][rail]] [fn:2]を使っている.
   #+BEGIN_SRC emacs-lisp
     (unless (my:dpkg-status 'rail)
       (el-get 'sync '(rail)))
     (require 'rail nil 'noerror)
   #+END_SRC
   ちなみに rail を有効にすると, 以下の様に User-Agent が表示される
   #+ATTR_HTML: with="50%"
   [[file:https:/raw.github.com/uwabami/rail/gh-pages/images/wanderlust_with_or_without_rail.png]]
** elscreen-wl
   elscreen と Wanderlust の連携.
   メール作成時に draft 用の screen を追加して,
   送信後に screen を閉じる.
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (add-to-list 'load-path
                    (concat user-emacs-directory "el-get/elscreen")))
     (require 'elscreen-wl)
   #+END_SRC
** cp5022x を使う
   ISO-2022-JP を CP50220 として扱う.
   [[http://d.hatena.ne.jp/kiwanami/20091103/1257243524][Wanderlustと文字コード]] [fn:3] も参照のこと.
   #+BEGIN_SRC emacs-lisp
    (when (require 'cp5022x nil t)
      (add-to-list 'mime-charset-coding-system-alist '(iso-2022-jp . cp50220)))
   #+END_SRC
   default mime charset -> iso-2022-jp に
   #+BEGIN_SRC emacs-lisp
   (setq wl-mime-charset 'iso-2022-jp)
   #+END_SRC
** emacs-w3m + SEMI の追加設定
   HTML メールを表示するための設定.
   mime-setup がロードされる前に記述する必要あり.
   #+BEGIN_SRC emacs-lisp
     (setq mime-setup-enable-inline-html nil)
   #+END_SRC
   MIME の例の保存先の変更
   #+BEGIN_SRC emacs-lisp
     (setq mime-situation-examples-file
           (concat my:user-emacs-temporary-directory "mime-example"))
   #+END_SRC
   HTML パートの表示に w3m を使う
   #+BEGIN_SRC emacs-lisp
     (require 'mime-setup)
     (when (locate-library "mime-w3m")
       (require 'w3m-ems)
       (require 'w3m-load)
       (require 'mime-w3m)
       )
   #+END_SRC
   大きいメッセージを送信時に分割しない
   #+BEGIN_SRC emacs-lisp
     (setq mime-edit-split-message nil)
   #+END_SRC
   text/plain を html より優先
   #+BEGIN_SRC emacs-lisp
     (set-alist 'mime-view-type-subtype-score-alist '(text . html) 0)
   #+END_SRC
** google-contacts-wl
   GoogleContacts から Wanderlust の AddressBook へ変換する
   #+BEGIN_SRC emacs-lisp
     (el-get 'sync '(google-contacts-wl))
     (require 'google-contacts-wl nil 'noerror)
   #+END_SRC
** offlineimap-el
   #+BEGIN_SRC emacs-lisp
     (el-get 'sync 'offlineimap-el)
     (require 'offlineimap nil 'noerror)
     (setq offlineimap-command "offlineimap -u machineui -o ")
     (setq offlineimap-mode-line-style 'symbol)
     (setq offlineimap-mode-line-symbol "imap")
     (setq offlineimap-enable-mode-line-p
           '(member
             major-mode
             '(offlineimap-mode
               wl-folder-mode
               wl-summary-mode
               wl-folder-mode
               wl-message-mode
               wl-draft-mode
               )))
     (global-set-key [f1] 'offlineimap)
   #+END_SRC
* ssl.elの代わりにopentlsを使う
  ついで(あれば) =/etc/ssl/certs/ca-ceritficats.crt= で証明書を検証.
  #+BEGIN_SRC emacs-lisp
    (require 'tls)
    (set-alist 'elmo-network-stream-type-alist
               "!opentls" '(opentls nil open-tls-stream))
    (set-alist 'elmo-network-stream-type-alist
               "!" '(ssl ssl open-tls-stream))
    ;; (setq ssl-program-name "gnutls-cli")
    (cond
     ((file-exists-p "/etc/ssl/certs/ca-certificates.crt")
      ;; (setq ssl-program-arguments
      ;;       '("--port" service
      ;;         "--x509cafile" "/etc/ssl/certs/ca-certificates.crt" host))
      (setq tls-program
            '("gnutls-cli --x509cafile /etc/ssl/certs/ca-certificates.crt -p %p %h"
              "gnutls-cli --x509cafile /etc/ssl/certs/ca-certificates.crt -p %p %h --protocols ssl3")))
     (t
      ;; (setq ssl-program-arguments
      ;;       '("--port" service
      ;;         "--insecure" host))
      (setq tls-program
            '("gnutls-cli --insecure -p %p %h"))
      )
     )
  #+END_SRC
* 個人情報の設定
  具体的な設定内容は
  設定自体は =~/.mua/wl-info.gpg= に書いて読み込んでいる.
   #+BEGIN_SRC emacs-lisp
     (load "~/.mua/wl-info.gpg")
   #+END_SRC
  設定している内容は以下の通り
** 自身のメールアドレスと購読メーリングリストの設定
  #+BEGIN_EXAMPLE
    ;; From: の設定
    (setq wl-from (concat user-full-name " <" user-mail-address ">"))
    ;; (system-name) が FQDN を返さない場合、
    ;; `wl-local-domain' にホスト名を除いたドメイン名を設定してください。
    ;(setq wl-local-domain "example.com")
    ;; 自分のメールアドレスのリスト
    (setq wl-user-mail-address-list
          (list (wl-address-header-extract-address wl-from)
            ;; "e-mail2@example.com"
            ;; "e-mail3@example.net" ...
            ))
    ;; 自分の参加しているメーリングリストのリスト
    (setq wl-subscribed-mailing-list
          '("wl@lists.airs.net"
        "apel-ja@m17n.org"
        "emacs-mime-ja@m17n.org"
        ;; "ml@example.com" ...
        ))
  #+END_EXAMPLE
** 送信用SMTPサーバの設定
   #+BEGIN_EXAMPLE
     (setq wl-smtp-connection-type 'starttls)
     (setq wl-smtp-posting-server "your smtp server")
     (setq wl-smtp-authenticate-type "login")
     (setq wl-smtp-posting-port 587)
     (setq wl-smtp-posting-user "your account")
   #+END_EXAMPLE
** From に応じて送信サーバをきりかえる.
   本来はメール作成時/返信時の template の切り替えなのだれど,
   送信時の SMTP の設定を from に合わせてきりかえるようにする.
   #+BEGIN_EXAMPLE
     (setq wl-template-alist
         '(("default"
            ("From" . wl-from)
            )
           ("example1"
            ("From" . "Your Name <account@example1.com>")
            (wl-smtp-posting-server . "smtp.example1.com")
            (wl-smtp-posting-user . "your account")
            (wl-smtp-posting-port . 587)
            (wl-smtp-connection-type . 'starttls)
            (wl-smtp-authenticate-type . "login")
            )
           ("example2"
            ("From" . "Your Name <account@example2.com>")
            (wl-smtp-posting-server . "smtp.example2.com")
            (wl-smtp-posting-user . "your account")
            (wl-smtp-posting-port . 587)
            (wl-smtp-connection-type . 'starttls)
            (wl-smtp-authenticate-type . "plain")
            )
           ("ssh:smtp"
            ;; need ssh tunnel
            ;; ssh -f -N -L 20025:localhost:25 smtp.server.com
            ("From" . "Your Name <account@example3.com>")
            (wl-smtp-posting-server . "localhost")
            (wl-smtp-posting-user . "your ssh account")
            (wl-smtp-posting-port . 20025)
            (wl-smtp-connection-type . 'nil)
            (wl-smtp-authenticate-type . 'nil)
            )
           ))
   #+END_EXAMPLE
   ssh tunnel を自動的にやる事はできないモンだろうか
   (送信時に open して, 送信後に close する, みたいなの).

   ついでに template の切り替えに関して幾つか設定.
    #+BEGIN_SRC emacs-lisp
     ;; template 切り替え時に 内容を表示
     (setq wl-template-visible-select t)
    #+END_SRC
    =draft-mode= で =C-c C-n= をするとテンプレートを切り替え
    #+BEGIN_SRC emacs-lisp
     (define-key wl-draft-mode-map "\C-c\C-n" 'wl-template-select)
    #+END_SRC
    from に応じて wl-from, wl-envelope-from, 送信 smtp サーバを
    変更する送信時に変更
   #+BEGIN_SRC emacs-lisp
     (add-hook 'wl-draft-send-hook
               (lambda ()
                 (set (make-local-variable 'wl-from)
                      (std11-fetch-field "From"))))
     ;; 送信時に自動的に wl-draft-config-alist を適用しない
     (remove-hook 'wl-draft-send-hook 'wl-draft-config-exec)
   #+END_SRC
* 基本設定
** imap 関連
   デフォルトの認証設定
   #+BEGIN_SRC emacs-lisp
    (setq elmo-imap4-default-authenticate-type 'clear)
    (setq elmo-imap4-default-port '993)
    (setq elmo-imap4-default-stream-type 'opentls)
   #+END_SRC
   フォルダ名は UTF-7 でエンコードされているので,
   表示する際にこれをデコードする
   #+BEGIN_SRC emacs-lisp
      (setq elmo-imap4-use-modified-utf7 t)
   #+END_SRC
** フォルダの位置の default からの変更
   =~/Mail/= もしくは =~/.mua/= 以下に集約している

   local の Mail folder の位置
   #+BEGIN_SRC emacs-lisp
    (setq elmo-maildir-folder-path "~/Mail")
   #+END_SRC
   lost+found フォルダの設定:
   =elmo-maildir-folder-path= からの相対パスになっている
   #+BEGIN_SRC emacs-lisp
   (setq elmo-lost+found-folder ".lost+found")
   #+END_SRC
   folders の位置の変更
   =~/.mua/wl-folders.gpg= に変更
   #+BEGIN_SRC emacs-lisp
     (setq wl-folders-file "~/.mua/wl-folders.gpg")
   #+END_SRC
   draft や trash は
   Gmail と同期すると大変な事になるので local に持つ.
   #+BEGIN_SRC emacs-lisp
     (setq wl-draft-folder "+Drafts")
     ;;(setq wl-trash-folder "%ゴミ箱")
     (setq wl-trash-folder "+Trash")
     (setq wl-temporary-file-directory "~/Downloads/")
   #+END_SRC
   アドレス帳 -> google-contacts-wl を使う
   #+BEGIN_SRC emacs-lisp
     (setq wl-use-petname t)
     (setq wl-address-file   "~/.mua/Address.wl")
   #+END_SRC
   LDAP サーバからアドレスを引くことも可能.
   以前は GCALDaemon を使って local に ldap サーバを上げていたのだけれども,
   Google Contacts の API が変わったらしく
   GCALDaemon で LDAP サーバは使えなくなったのでコメントアウト.
   #+BEGIN_SRC emacs-lisp
     ;; ldap からアドレスを引く設定
     ;; (setq wl-use-ldap t)
     ;; (setq wl-ldap-server "localhost")
     ;; (setq wl-ldap-port "636")
     ;; (setq wl-ldap-base "ou=People,dc=example,dc=com")
   #+END_SRC
   パスワードの保存先
   #+BEGIN_SRC emacs-lisp
    (setq elmo-passwd-alist-file-name "~/.mua/wl-passwd.gpg")
   #+END_SRC
** フォルダ編集時に backup を作成しない.
   #+BEGIN_SRC emacs-lisp
   (setq wl-fldmgr-make-backup nil)
   #+END_SRC
** FCC, BCC の設定
   #+BEGIN_SRC emacs-lisp
      (setq wl-fcc nil)
   #+END_SRC
   送信済は既読にする → ちゃんと動いていない気がする
   #+BEGIN_SRC emacs-lisp
      (setq wl-fcc-force-as-read t)
   #+END_SRC
   Gmail だと bcc でも Message-ID が同じなので表示されない
   or ML への投稿のスレッドが切れる.
   安直な対応として SMTP サーバとして gmail 以外を使えば良い.
    #+BEGIN_SRC emacs-lisp
      (setq wl-bcc (concat user-mail-address))
    #+END_SRC
** 起動時に =%INBOX= のみをチェック
   #+BEGIN_SRC emacs-lisp
      (setq wl-auto-check-folder-name "%INBOX")
   #+END_SRC
** confirm 関連の設定
   スキャン時の問い合わせの無効化.
   ちなみ
   confirm を nil にしても 問い合わせが無いだけで
   threshold は効くので, 明示的に nil に.
   #+BEGIN_SRC emacs-lisp
     (setq elmo-folder-update-confirm nil)
     (setq elmo-folder-update-threshold nil)
     (setq elmo-message-fetch-confirm nil)
     (setq elmo-message-fetch-threshold nil)
     (setq wl-prefetch-confirm nil)
     (setq wl-prefetch-threshold nil)
   #+END_SRC
   終了時に確認しない
   #+BEGIN_SRC emacs-lisp
      (setq wl-interactive-exit nil)
   #+END_SRC
   送信時は確認する
   #+BEGIN_SRC emacs-lisp
      (setq wl-interactive-send t)
   #+END_SRC
** misc.
   スレッドは常に閉じる
   #+BEGIN_SRC emacs-lisp
     (setq wl-thread-insert-opened nil)
   #+END_SRC
   3 pain 表示 -> 使わない
   #+BEGIN_SRC emacs-lisp
      (setq wl-stay-folder-window nil)
   #+END_SRC
   未読を優先的に読む
   #+BEGIN_SRC emacs-lisp
     (setq wl-summary-move-order 'unread)
   #+END_SRC
   改ページ無視
   #+BEGIN_SRC emacs-lisp
   (setq wl-break-pages nil)
   #+END_SRC
   icon を使わない → GUI でもメニュー表示してないし, 体感的には遅くなる
   #+BEGIN_SRC emacs-lisp
     (setq wl-highlight-folder-with-icon nil)
   #+END_SRC
** 折り返しの設定
   message は折り返す.
   #+BEGIN_SRC emacs-lisp
     (setq wl-message-truncate-lines nil)
   #+END_SRC
   draft も折り返す
   #+BEGIN_SRC emacs-lisp
     (setq wl-draft-truncate-lines nil)
   #+END_SRC
* キーバインド関連
  =<f2>= で Addrbook の更新
  #+BEGIN_SRC emacs-lisp
    (global-set-key [f2] 'google-contacts-wl-update-address)
  #+END_SRC
  =C-c C-j= を browse-url に明け渡す
  #+BEGIN_SRC emacs-lisp
     (define-key wl-draft-mode-map "\C-c\C-j" 'browse-url-at-point)
  #+END_SRC
  =M-u= で unread にする
  #+BEGIN_SRC emacs-lisp
     (define-key wl-summary-mode-map "\M-u" 'wl-summary-mark-as-unread)
  #+END_SRC
  =i= で sync <- Mew 風
  #+BEGIN_SRC emacs-lisp
     (define-key wl-summary-mode-map "i" 'wl-summary-sync-update)
  #+END_SRC
  =C-o= を elscreen にあけわたす -> auto-refile は =M-o= で (Mew 風)
  #+BEGIN_SRC emacs-lisp
    (define-key wl-summary-mode-map "\C-o" elscreen-map)
  #+END_SRC
  =M-o= で =auto-refile=
  #+BEGIN_SRC emacs-lisp
     (define-key wl-summary-mode-map "\M-o" 'wl-summary-auto-refile)
  #+END_SRC
* flag とフォルダを行き来する関数の追加
  "=" でフラグ付きフォルダと
  実際にメッセージのあるフォルダを行き来する.
  Gmail の「スター付き」フォルダでも有効
  #+BEGIN_SRC emacs-lisp
    (defun my:wl-summary-jump-to-referer-message ()
      (interactive)
      (when (wl-summary-message-number)
        (if (equal
             (elmo-folder-type-internal wl-summary-buffer-elmo-folder) 'flag)
            (progn
              (let* ((referer (elmo-flag-folder-referrer
                               wl-summary-buffer-elmo-folder
                               (wl-summary-message-number)))
                     (folder (if (> (length referer) 1)
                                 (completing-read
                                  (format "Jump to (%s): " (car (car referer)))
                                  referer
                                  nil t nil nil (car (car referer)))
                               (car (car referer)))))
                (wl-summary-goto-folder-subr folder 'no-sync nil nil t)
                (wl-summary-jump-to-msg (cdr (assoc folder referer)))))
          (when (equal (elmo-folder-type wl-summary-last-visited-folder)
                       'internal)
            (wl-summary-goto-last-visited-folder)))))
    (define-key wl-summary-mode-map "=" 'my:wl-summary-jump-to-referer-message)
  #+END_SRC

* summary-mode の表示のカスタマイズ
** 自分が差出人である mail は To:某 と表示
   #+BEGIN_SRC emacs-lisp
   (setq wl-summary-showto-folder-regexp ".*")
   (setq wl-summary-from-function 'wl-summary-default-from)
   #+END_SRC
** サマリ行の表示関連
   サマリ行のフォーマット指定
   #+BEGIN_SRC emacs-lisp
     (setq wl-summary-line-format
        "%T%P%1@%1>%Y/%M/%D %21(%t%[%19(%c %f%)%]%) %#%~%s")
   #+END_SRC
   サマリ表示は切り詰めない
   #+BEGIN_SRC emacs-lisp
     (setq wl-subject-length-limit t)
   #+END_SRC
   スレッドの幅の指定
   #+BEGIN_SRC emacs-lisp
     (setq wl-thread-indent-level 2)
     (setq wl-thread-have-younger-brother-str "+"
           wl-thread-youngest-child-str "+"
           wl-thread-vertical-str "|"
           wl-thread-horizontal-str "-"
           wl-thread-space-str " ")

   #+END_SRC
   以下の二つの設定を有効にするには
   =elmo-msgdb-extra-fields= を設定する必要がある.
   この変数は振り分け判定にも使用するのでそこで設定している
*** Gmail 風に, 自分宛のメールに ">" をつけて表示する
    元ネタ [fn:4]: [[http://d.hatena.ne.jp/khiker/20080206/wanderlust]]
    #+BEGIN_SRC emacs-lisp
      (setq wl-user-mail-address-regexp
            "^uwabami.*\\|^sasakyh.*")
      ;; 一覧表示での置き換え規則に追加
      (defun my:wl-summary-line-for-me ()
        (if (catch 'found
              (let ((to (elmo-message-entity-field wl-message-entity 'to))
                    (cc (elmo-message-entity-field wl-message-entity 'cc)))
                (when (or (stringp to) cc)
                  (setq to
                        (append (if (stringp to) (list to) to)
                                (when cc
                                  (if (stringp cc) (list cc) cc)))))
                (dolist (i to)
                  (when (wl-address-user-mail-address-p (eword-decode-string i))
                    (throw 'found t)))))
            ">"
          ""))
      ;; > を summary-line-format に追加
      (setq wl-summary-line-format-spec-alist
            (append wl-summary-line-format-spec-alist
                    '((?> (my:wl-summary-line-for-me)))))
    #+END_SRC
*** 添付ファイルがあったら, サマリ行に "@" を付ける
    #+BEGIN_SRC emacs-lisp
      (setq wl-summary-line-format-spec-alist
            (append wl-summary-line-format-spec-alist
                    '((?@ (wl-summary-line-attached)))))
    #+END_SRC
** クォートされた文字列もデコードする
   #+BEGIN_SRC emacs-lisp
     (setq mime-header-lexical-analyzer
           '(
             ;; eword-analyze-quoted-string
             eword-analyze-domain-literal
             eword-analyze-comment
             eword-analyze-spaces
             eword-analyze-special
             eword-analyze-encoded-word
             eword-analyze-atom))
   #+END_SRC
** Subject が変わったらスレッドを切る
   #+BEGIN_SRC emacs-lisp
     (setq wl-summary-divide-thread-when-subject-changed nil)
   #+END_SRC
** Subject での Tab や複数スペースを無視
   #+BEGIN_SRC emacs-lisp
     (defadvice std11-unfold-string (after simply activate)
       (setq ad-return-value
             (elmo-replace-in-string ad-return-value "[ \t]+" " ")))
   #+END_SRC
** 重複メッセージを非表示に
   フォルダ内の Message-ID が同じメールを非表示にする
   #+BEGIN_SRC emacs-lisp
     (setq wl-folder-process-duplicates-alist
           '(
             (".*" . hide)
             ))
   #+END_SRC
* 振り分け設定
  =$= 以外を振り分け対象に
  #+BEGIN_SRC emacs-lisp
   (setq wl-summary-auto-refile-skip-marks '("$"))
  #+END_SRC
** 振り分け判定に使用するヘッダ
   添付の有無の表示にも使うので =Content-Type= も登録.
   あと =Delivered-To= はメールの検索の時に結構重宝している.
   #+BEGIN_SRC emacs-lisp
     (setq elmo-msgdb-extra-fields
           '(
             "List-Post"
             "List-Id"
             "Resent-CC"
             "Mailing-List"
             "X-Mailing-List"
             "X-ML-Address"
             "X-ML-Name"
             "X-ML-To"
             "Delivered-To"
             "Content-Type" ;; 添付の有無の表示の為に追加
             "X-Google-Appengine-App-Id";; GAEの送信するメールの振り分け用
             "To"
             "Cc"
             "From"
             "Subject"
             "Reply-To"
             ))
   #+END_SRC
** 自動振り分け
   =wl-expire= の設定
*** log
    良い感じになってきたら nil にして log を残さないようにすること
    #+BEGIN_SRC emacs-lisp
        (setq wl-expire-use-log t)
    #+END_SRC
*** 起動時に自動振り分けを有効化する
    正規表現をミスすると致命的なので注意
    #+BEGIN_SRC emacs-lisp
    ;;  (add-hook 'wl-summary-prepared-pre-hook 'wl-summary-expire)
    #+END_SRC
*** 実際の expire rule
    あまり細かい事は考えず, 一年前のメールは =hide= にしている.
    #+BEGIN_SRC emacs-lisp
      ;; (setq wl-expire-alist
      ;;       '(
      ;;         ("^\\%.*$" (date 365) hide)
      ;;         ))
    #+END_SRC
* 日本語添付ファイル名のデコード
  日本語の添付ファイルに関しては, いまだにうまくいかない時がある.
  #+BEGIN_SRC emacs-lisp
    (defvar my-mime-filename-coding-system-for-decode
      '(iso-2022-jp japanese-shift-jis japanese-iso-8bit))
    (defun my-mime-decode-filename (filename)
      (let ((filename (if (string-match "\n\t*" filename)
                          (replace-match "" nil nil filename)
                        filename))
            (rest (eword-decode-string filename)))
        (or (when (and my-mime-filename-coding-system-for-decode
                       (string= rest filename))
              (let ((dcs (mapcar (function coding-system-base)
                                 (detect-coding-string filename))))
                (unless (memq 'emacs-mule dcs)
                  (let ((pcs my-mime-filename-coding-system-for-decode))
                    (while pcs
                      (if (memq (coding-system-base (car pcs)) dcs)
                          (setq rest (decode-coding-string filename (car pcs))
                                pcs nil)
                        (setq pcs (cdr pcs))))))))
            rest)))
    (eval-after-load "mime"
      '(defadvice mime-entity-filename
         (after eword-decode-for-broken-MUA activate)
         "Decode encoded file name for BROKEN MUA."
         (when (stringp ad-return-value)
           (setq ad-return-value (my-mime-decode-filename ad-return-value)))))
    (require 'std11)
    (eval-after-load "std11"
      '(defadvice std11-wrap-as-quoted-string
         (before encode-string activate)
         "Encode a string."
         (require 'eword-encode)
         (ad-set-arg 0 (eword-encode-string (ad-get-arg 0)))))
    ;; 二重エスケープを回避
    (defun shell-quote-argument (file) file)
  #+END_SRC

* 添付ファイルの扱い
  =/etc/mailcap= と =~/.mailcap= の二つに
  同じエントリがあると, 動作が微妙になるらしい [fn:6] .
  ここでは =~/.mailcap= だけを見にいくように
  #+BEGIN_SRC emacs-lisp
    (setq mime-view-mailcap-files '("~/.mailcap"))
  #+END_SRC
  ちなみに
  =~/.mailcap= 自体は
  #+BEGIN_EXAMPLE
  applications/*; xdg-open %s;
  image/*; xdg-open %s;
  video/*; xdg-open %s;
  #+END_EXAMPLE
  として xdg-open に丸投げ.
* メッセージ表示
** いったん全て非表示に
   #+BEGIN_SRC emacs-lisp
     (setq wl-message-ignored-field-list '("^.*:"))
   #+END_SRC
** 見たいヘッダだけ表示
   #+BEGIN_SRC emacs-lisp
     (setq wl-message-visible-field-list
           '("^Subject:"
             "^From:"
             "^To:"
             "^Cc:"
             "^Date:"
             "^Message-ID:"
             ))
   #+END_SRC
** 表示順の変更 → Mew 風
   #+BEGIN_SRC emacs-lisp
     (setq wl-message-sort-field-list
           '("^Subject:"
             "^From:"
             "^To:"
             "^Cc:"
             "^Date:"
             "^Message-ID:"
             ))
   #+END_SRC
** mime の画像表示の切り替え
   =M-T= でトグル
   #+BEGIN_SRC emacs-lisp
     (defun wl-summary-w3m-safe-toggle-inline-images (&optional arg)
       "Toggle displaying of all images in the message buffer.
     If the prefix arg is given, all images are considered to be safe."
       (interactive "P")
       (with-current-buffer wl-message-buffer
         (w3m-toggle-inline-images arg)))
     (eval-after-load "wl-summary"
       '(define-key wl-summary-mode-map
          "\M-T" 'wl-summary-w3m-safe-toggle-inline-images))
   #+END_SRC

* 返信設定
  自分宛のメールに返信する場合は =To:=, =Cc:= から自分のアドレスを削除
  #+BEGIN_SRC emacs-lisp
    (setq wl-draft-always-delete-myself t)
  #+END_SRC
  "a" (without-argument)では =Reply-To:= や =From:= などで
  指定された唯一人または唯一つの投稿先に返信.
  また, =X-ML-Name:= と =Reply-To:= がついているなら =Reply-To:= 宛に返信
  #+BEGIN_SRC emacs-lisp
    (setq wl-draft-reply-without-argument-list
          '((("X-ML-Name" "Reply-To") . (("Reply-To") nil nil))
            ("X-ML-Name" . (("To" "Cc") nil nil))
            ("Followup-To" . (nil nil ("Followup-To")))
            ("Newsgroups" . (nil nil ("Newsgroups")))
            ("Reply-To" . (("Reply-To") nil nil))
            ("Mail-Reply-To" . (("Mail-Reply-To") nil nil))
            ("From" . (("From") nil nil))))
  #+END_SRC
  =C-u a= (with-argument)であれば関係する全ての人・投稿先に返信
  #+BEGIN_SRC emacs-lisp
    (setq wl-draft-reply-with-argument-list
          '(("Followup-To" . (("From") nil ("Followup-To")))
            ("Newsgroups" . (("From") nil ("Newsgroups")))
            ("Mail-Followup-To" . (("Mail-Followup-To") nil ("Newsgroups")))
            ("From" . (("From") ("To" "Cc") ("Newsgroups")))))
  #+END_SRC
  サマリ表示には petname を使うが, 引用には使わない
  #+BEGIN_SRC emacs-lisp
  (setq wl-default-draft-cite-decorate-author nil)
  #+END_SRC
** c-sig
   署名の選択に c-sig を使用している.
  #+BEGIN_SRC emacs-lisp
    (unless (my:dpkg-status 'c-sig)
      (el-get 'sync '(c-sig)))
  #+END_SRC
  設定は以下の通り. Mew 風に =C-c <tab>= で signature を挿入するようにしている
  #+BEGIN_SRC emacs-lisp
    (eval-and-compile (require 'c-sig))
    (setq sig-insert-end t)
    (setq sig-save-to-sig-name-alist nil)
    (setq message-signature-file nil)
    ;; Mew 風に \C-c \t で c-sig -> signature 挿入
    (define-key wl-draft-mode-map "\C-c\t" 'insert-signature-eref)
    (add-hook 'wl-draft-mode-hook
              '(lambda ()
                 (define-key (current-local-map) "\C-c\C-w"
                   'insert-signature-eref)))
  #+END_SRC
* Face の設定
  color-theme で細かく指定するために, 幾つかの face 定義を追加.
  実際の色指定は [[https://github.com/uwabami/color-theme-darkpastel][color-theme-darkpastel]] 参照のこと[fn:5]
  #+BEGIN_SRC emacs-lisp
    (setq wl-highlight-message-header-alist
          '(("Subject[ \t]*:"
             . wl-highlight-message-subject-header-contents)
            ("From[ \t]*:"
             . wl-highlight-message-from-header-contents)
            ("Date[ \t]*:"
             . wl-highlight-message-date-header-contents)
            ("\\(.*To\\|Cc\\|Newsgroups\\)[ \t]*:"
             . wl-highlight-message-important-header-contents)
            ("\\(User-Agent\\|X-Mailer\\|X-Newsreader\\)[ \t]*:" .
             wl-highlight-message-unimportant-header-contents)
            ))
  #+END_SRC
* GPG 署名
  以前は mailcrypt を使っていたけれど,
  epa があるので主にキーバインドの設定のみ.
  =draft-mode= の文字コードをあらかじめ指定しておかないと,
  送信時に文字コードが変換されるので不正な署名となってしまう.

  もっとうまい方法/正攻法がありそうな気がするけれど,
  使えてるから, まあ良いかな, とか.
  #+BEGIN_SRC emacs-lisp
    (setq pgg-default-keyserver-address "pool.sks-keyservers.net")
    (setq pgg-scheme "gpg")
    (setq pgg-messages-coding-system 'utf-8)
    (add-hook 'wl-draft-mode-hook
              '(lambda ()
                 (set-buffer-file-coding-system 'iso-2022-jp)
                 ))
    (defun my:epa-wl-decrypt-message ()
      (interactive)
      (save-window-excursion
        (wl-summary-jump-to-current-message)
        (wl-message-decrypt-pgp-nonmime)))
    (defun my:epa-wl-verify-message ()
      (interactive)
      (save-selected-window
        (wl-summary-jump-to-current-message)
        (wl-message-verify-pgp-nonmime)))
    (define-key wl-summary-mode-map "\C-c:d" 'my:epa-wl-decrypt-message)
    (define-key wl-summary-mode-map "\C-c:v" 'my:epa-wl-verify-message)
    (define-key wl-draft-mode-map "\C-c:s" 'epa-mail-sign)
    (define-key wl-draft-mode-map "\C-c:e" 'epa-mail-encrypt)
  #+END_SRC
* Footnotes

[fn:1] wanderlust - github : [[https://github.com/wanderlust/wanderlust]]

[fn:2] rail - github pages : [[http://uwabami.github.com/rail/]]

[fn:3] Wanderlustと文字コード : [[http://d.hatena.ne.jp/kiwanami/20091103/1257243524]]

[fn:4] Wanderlustで自分宛てのメールをGMailのように「>」で強調する : [[http://d.hatena.ne.jp/khiker/20080206/wanderlust]]

[fn:5] color-theme-darkpastel : [[https://github.com/uwabami/color-theme-darkpastel]]

[fn:6] [[http://comments.gmane.org/gmane.mail.wanderlust.general.japanese/8618]]
