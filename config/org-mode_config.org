# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2012/09/16 07:57:56$
# License: Expat
#
#+TITLE: org-modeの設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+SETUPFILE: ./export-config.org
#+BEGIN_HTML
---
layout: emacs
title: org-modeの設定
---
#+END_HTML
* 基本設定
  #+BEGIN_SRC emacs-lisp
    (require 'org-install)
    (require 'org)
    ;; 打ち切らない.
    (setq org-startup-truncated nil)
    ;; ファイルを開く時は項目を折り畳んだ状態にする
    (setq org-startup-folded t)
    ;; 開いた時に画像を inline で表示しない
    (setq org-startup-with-inline-images nil)
    ;; ;; link を return で追う
    (setq org-return-follows-link t)
    ;; フォントロックを有効に
    (add-hook 'org-mode-hook 'turn-on-font-lock)
    ;; 基本ディレクトリ
    (setq org-directory "~/Documents/Dropbox/org/")
    ;; 時刻のフォーマット
    (setq org-display-custom-times "<%Y-%m-%d %H:%M:%S>")
    (setq org-time-stamp-custom-formats "<%Y-%m-%d %H:%M:%S>")
  #+END_SRC
* org-capture
** firefox との連携
   mozreplを使ったメモも残せるようにしておく.
  #+BEGIN_SRC emacs-lisp
    (unless (locate-library "moz")
      (el-get 'sync 'moz-repl))
    (require 'moz)
    ;; @see http://blogs.openaether.org/?p=236
    (defun jk/moz-get (attr)
      (comint-send-string (inferior-moz-process) attr)
      ;; try to give the repl a chance to respond
      (sleep-for 0 100))
    (defun jk/moz-get-current-url ()
      (interactive)
      (jk/moz-get "repl._workContext.content.location.href"))
    (defun jk/moz-get-current-title ()
      (interactive)
      (jk/moz-get "repl._workContext.content.document.title"))
    (defun jk/moz-get-current (moz-fun)
      (funcall moz-fun)
      ;; doesn't work if repl takes too long to output string
      (save-excursion
        (set-buffer (process-buffer (inferior-moz-process)))
        (goto-char (point-max))
        (previous-line)
        (setq jk/moz-current
              (buffer-substring-no-properties
               (+ (point-at-bol) (length moz-repl-name) 3)
               (- (point-at-eol) 1))))
      (message "%s" jk/moz-current)
      jk/moz-current
      )
    (defun jk/moz-url ()
      (interactive)
      (jk/moz-get-current 'jk/moz-get-current-url)
      )
    (defun jk/moz-title ()
      (interactive)
      (jk/moz-get-current 'jk/moz-get-current-title)
      )
  #+END_SRC
** メモ形式
   1日1ファイル + howm での一覧表示のための小細工
  #+BEGIN_SRC emacs-lisp
    ;; org-capture
    (require 'org-capture)
    (setq org-capture-bookmark nil)
    (defun my:org-capture-howm-file ()
      (expand-file-name
       (format-time-string "%Y%m%d-%H%M%S.howm") org-directory))
    (global-set-key (kbd "C-x m") 'org-capture)
    (setq org-capture-templates
          '(
            ("t" "Todo" entry
             (file my:org-capture-howm-file)
             "* <%<%Y-%m-%d %H:%M:%S>>+ %?\n  %i\n  %a"
             :prepend t
             :unnarrowed t
             :kill-buffer t)
            ("m" "Memo" entry
             (file my:org-capture-howm-file)
             "* <%<%Y-%m-%d %H:%M:%S>>  %?\n  %i\n  %a"
             :prepend t
             :unnarrowed t
             :kill-buffer t)
            ("b" "Bookmark" entry
             (file my:org-capture-howm-file)
             "* <%<%Y-%m-%d %H:%M:%S>>  %?\n  %(concat \"[[\" (jk/moz-url) \"]]\")\n  %a"
             :prepend t
             :unnarrowed t
             :kill-buffer t)
            ("e" "Email" entry
             (file my:org-capture-howm-file)
             "* <%<%Y-%m-%d %H:%M:%S>>+ %?\n  %i\n  %a\n"
             :prepend t
             :unnarrowed t
             :kill-buffer t)
            ("d" "Diary" entry
             (file my:org-capture-howm-file)
             "* DIARY <%<%Y-%m-%d %H:%M:%S>> %?\n  %i\n  %a\n"
             :prepend t
             :unnarrowed t
             :kill-buffer t)
            ))
  #+END_SRC
* org-agenda
  #+BEGIN_SRC emacs-lisp
    ;; ;; TODO keyword
    ;; (setq org-todo-keywords
    ;;       '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "SOMEDAY(s)")))
    ;; ;; timestamp の記録
    ;; (setq org-log-done)
    ;; ;; agenda ファイルの一覧
    ;; (setq org-agenda-files (list org-directory))
    ;; ;; 拡張子 -> howm
    ;; (setq org-agenda-file-regexp "[^.].*\.howm")
    ;; ;; アジェンダ表示で下線を用いる
    ;; (add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))
    ;; (setq hl-line-face 'underline)
    ;; ;; 標準の祝日を利用しない
    ;; (setq calendar-holidays nil)
  #+END_SRC
* org-babel
  使う言語の追加
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (ruby       . t)
       (sh         . t)
       (emacs-lisp . t)
       (ditaa      . t)
       (dot        . t)
       (R          . t)
       (gnuplot    . t)
       ))
  #+END_SRC
  block 評価時の問い合わせの無効化
  #+BEGIN_SRC emacs-lisp
    (setq org-confirm-babel-evaluate nil)
  #+END_SRC
* LaTeX export の設定
  主に日本語LaTeX → pTeX 用の設定とか.
** 日本語LaTeX用の設定
   DebianのLaTeXはまだUTF-8を処理できないので, EUC-JPでexportする.
   #+BEGIN_SRC emacs-lisp
     (require 'org-latex)
     (setq org-export-latex-coding-system 'euc-jp-unix)
     (setq org-export-latex-date-format "%Y年%m月%d日")
   #+END_SRC
** jsarticle classの追加
   inputenc 等は読み込まないことにしてファイル毎にスタイルを設定する.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-export-latex-classes
                  '("jsarticle"
                    "\\documentclass{jsarticle}
     [NO-DEFAULT-PACKAGES]
     [NO-PACKAGES]
     [EXTRA]
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
     (setq org-export-latex-default-class "jsarticle")
   #+END_SRC
** latexmk
   PDF作成にはlatexmkを使う
   #+BEGIN_SRC emacs-lisp
     (setq org-latex-to-pdf-process
           '("latexmk -pdfdvi %f"))
   #+END_SRC
** preview
   PDF は open or xdg-open で開くことに
   #+BEGIN_SRC emacs-lisp
     (setq org-file-apps
           '(
             ("\\.pdf\\'" . "evince %s"))
           )
   #+END_SRC
* beamer export の設定
  beamer でプレゼンするための設定
  #+BEGIN_SRC emacs-lisp
    (require 'org-beamer)
    ;; デフォルトのヘッドラインレベル -> 2
    (setq org-beamer-frame-level 2)
    ;; frame のオプション
    (setq org-beamer-frame-default-options "[fragile]")
    (setq org-export-with-sub-superscripts nil)
  #+END_SRC
* HTML export の設定
  [[http://jekyllrb.com/][Jekyll]] [fn:1] でサイト構築を行なっているので, それにまつわる設定
  #+BEGIN_SRC emacs-lisp
    ;; org-html, org-publish
    (require 'org-html)
    (require 'org-publish)
    (defvar my:org-publish-webpage
      (expand-file-name
       (concat (getenv "HOME") "/Public/")))
    (defvar my:org-publish-webpage-img
      (expand-file-name
       (concat my:org-publish-webpage "images/")))
    (defvar my:org-publish-gh-pages
      (expand-file-name
       (concat (getenv "HOME") "/Sources/gh-pages")))
    (defvar my:org-publish-emacs-pages
      (expand-file-name
       (concat my:org-publish-webpage "cc-env/Emacs/")))
    (setq org-publish-project-alist
          `(
            ("public"
             :base-directory ,my:org-publish-webpage
             :recursive t
             :exclude ".*\.el\\|^Makefile\\|.*\.gpg\\|sitemap\.org\\|^cc-env\\|^images\\|^_site\\|^export-config\.org"
             :base-extension "org"
             :headline-level 4
             :htmlized-source t
             :publishing-directory ,my:org-publish-webpage
             :publishing-function org-publish-org-to-html
             :body-only t
             )
            ("img"
             :base-directory ,my:org-publish-webpage-img
             :base-extension "jpg\\|png"
             :publishing-directory ,my:org-publish-webpage-img
             :publishing-function org-publish-attachment
             )
            ("gh-pages"
             :base-directory ,my:org-publish-gh-pages
             :base-extension "org"
             :recursive nil
             :htmlized-source t
             :exclude ".*\.el\\|^Makefile\\|.*\.gpg\\|sitemap\.org\\|^cc-env\\|^images\\|^_site\\|^export-config\.org"
             :headline-level 4
             :publishing-directory my:org-publish-gh-pages
             :publishing-function org-publish-org-to-html
             :body-only t
             )
            ("Emacs"
             :base-directory ,my:user-emacs-config-directory
             :base-extension "org"
             :htmlized-source t
             :recursive nil
             :exclude "^export-config\.org"
             :headline-level 4
             :publishing-directory ,my:org-publish-emacs-pages
             :publishing-function org-publish-org-to-html
             :body-only t
             :auto-sitemap t
             :sitemap-filename "sitemap.org"
             :sitemap-title ""
             )
            ("web" :components ("public" "img"))
            ("github" :components ("gh-pages"))
            ("emacs" :components ("Emacs"))
            ))
    ;; cache の置き場所を ~/.emacs.d/tmp/org-timestamps/ に変える
    (setq org-publish-timestamp-directory
          (concat my:user-emacs-temporary-directory "org-timestamps/"))
    (setq org-publish-use-timestamps-flag nil)
  #+END_SRC
* Footnotes

[fn:1] Jeykll: [[http://jekyllrb.com/]]
