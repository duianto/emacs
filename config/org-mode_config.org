# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2013/01/31 19:16:17$
# License: Expat
#
#+TITLE: org-modeの設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+SETUPFILE: ./export-config.org
#+BEGIN_HTML
---
layout: emacs
title: org-modeの設定
---
#+END_HTML
* 始めに
  あとで書く.
  #+BEGIN_SRC emacs-lisp
  ;;
  #+END_SRC
* 基本設定
** キーバインド
   =org-agenda= と =org-capture= の設定のみ.
   =org-capture= は changelog memo [fn:2] のキーバインドにしている.
   #+BEGIN_SRC emacs-lisp
     (define-key global-map (kbd "C-x m") 'org-capture)
     (define-key global-map (kbd "C-c 1") 'org-export-icalendar-combine-agenda-files)
   #+END_SRC
** auto-mode-alist
   拡張子が =.org= もしくは =.howm= なら自動的に =org-mode= に
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
     (add-to-list 'auto-mode-alist '("\\.howm$" . org-mode))
     (add-to-list 'auto-mode-alist '("\\.org_archive$" . org-mode))
   #+END_SRC
** 保存先の設定
   #+BEGIN_SRC emacs-lisp
     (setq org-directory (concat my:dropbox "org/"))
     (setq org-default-notes-file (concat org-directory "todo.org"))
   #+END_SRC
** link を return で追う
   #+BEGIN_SRC emacs-lisp
     (setq org-return-follows-link t)
   #+END_SRC
** 時刻のフォーマット
   #+BEGIN_SRC emacs-lisp
     ;; (setq org-display-custom-times "<%Y-%m-%d %H:%M:%S>")
     ;; (setq org-time-stamp-custom-formats "<%Y-%m-%d %H:%M:%S>")
   #+END_SRC
** ファイルを開いた時は畳んだ状態で表示
   #+BEGIN_SRC emacs-lisp
     (setq org-startup-folded t)
   #+END_SRC
** 表示を打ち切らない
   #+BEGIN_SRC emacs-lisp
     (setq org-startup-truncated nil)
   #+END_SRC
** font-lock を有効化
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'turn-on-font-lock)
   #+END_SRC
** アプリケーションの関連付け
   #+BEGIN_SRC emacs-lisp
     ;; (cond
     ;;  (darwin-p
     ;;   (setq org-file-apps-defaults-macosx nil)
     ;;   (setq org-file-apps-defaults-macosx '((t . "open '%s'")))
     ;;   (setq org-file-apps org-file-apps-defaults-macosx)
     ;;   )
     ;;  (nt-p
     ;;   ;; 良く知らない fiber とか使うん?
     ;;   ;; (setq org-file-apps-defaults-windowsnt nil)
     ;;   ;; (setq org-file-apps-defaults-windowsnt '((t . "open '%s'")))
     ;;   ;; (setq org-file-apps org-file-apps-defaults-windowsnt)
     ;;   )
     ;;  (t
     ;;   (setq org-file-apps-defaults-gnu nil)
     ;;   (setq org-file-apps-defaults-gnu '((t . "xdg-open '%s'")))
     ;;   (setq org-file-apps org-file-apps-defaults-gnu)
     ;;   )
     ;;  )
   #+END_SRC
* org-agenda で GTD
  Agenda 表示は使わない -> メモの一覧は howm で確認
** Agenda で表示するファイル
   日付付きの TODO は ical に export されるので
   =schedule.org= のみを Agenda の対象にする
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files
     ;;      (list org-directory))
           '("~/Dropbox/org/schedule.org"))
   #+END_SRC
** ToDo 状態の追加
   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords
           '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "SOMEDAY(s)")))
   #+END_SRC
** ToDo を DONE にした際に ARCHIVE タグを付ける
   #+BEGIN_SRC emacs-lisp
     (require 'org-archive nil 'noerror)
     (defun my:org-archive-done-tasks ()
       (interactive)
       (org-map-entries 'org-archive-set-tag "/DONE" 'file))
     (add-hook 'org-todo-statistics-hook 'my:org-archive-done-tasks)
     (add-hook 'org-todo-after-statistics-hook 'my:org-archive-done-tasks)
   #+END_SRC
** DONEの時刻を記録しない
   #+BEGIN_SRC emacs-lisp
     (setq org-log-done nil)
   #+END_SRC
** GTD用のタグの追加
   #+BEGIN_SRC emacs-lisp
     (setq org-tag-alist
       '(
         ("@OFFICE" . ?o)
         ("@HOME" . ?h)
         ("SHOPPING" . ?s)
         ("MAIL" . ?m)
         ("PROJECT" . ?p)
         ))
   #+END_SRC
** Refile 対象の設定
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-allow-creating-parent-nodes t)
     (setq org-refile-targets
           '(
             ("todo.org" :level . 1)
             ("schedule.org" :level . 1)
             ("archive.org" :level . 1)
             ))
   #+END_SRC
* メモ取り: org-capture
  1メモ1ファイル + howm 連携のための設定
** org-cature の際に howm 形式のファイルを作成
   #+BEGIN_SRC emacs-lisp
     (defun my:org-capture-howm-file ()
       (expand-file-name
        (format-time-string "%Y%m%d-%H%M%S.howm") org-directory))
   #+END_SRC
** org-capture template
   bookmark は使わない
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-bookmark nil)
   #+END_SRC
** カテゴリの追加
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates
           '(
             ("t" "Todo" entry
              (file (concat org-directory "todo.org"))
              "* TODO <%<%Y-%m-%d>> %?\n  %i\n  %a\n"
              :prepend nil
              :unnarrowed nil
              :kill-buffer t)
             ("s" "schedule" entry
              (file (concat org-directory "schedule.org"))
              "* <%<%Y-%m-%d>> %?\n  %i\n  %a\n"
              :prepend nil
              :unnarrowed nil
              :kill-buffer t)
             ("m" "memo" entry
              (file my:org-capture-howm-file)
              "* <%<%Y-%m-%d>>  %?\n  %i\n  %a\n\n"
              :prepend t
              :unnarrowed t
              :kill-buffer t)
             ("d" "diary" entry
              (file my:org-capture-howm-file)
              "* DIARY <%<%Y-%m-%d>> %?\n  %i\n  %a\n\n"
              :prepend t
              :unnarrowed t
              :kill-buffer t)
             ))
   #+END_SRC
* export icalendar
** 保存先
   #+BEGIN_SRC emacs-lisp
    (setq org-combined-agenda-icalendar-file
          (concat my:dropbox "ical/org-export.ics"))
   #+END_SRC
** ical の説明文
   #+BEGIN_SRC emacs-lisp
    (setq org-icalendar-combined-description "OrgMode schedule")
   #+END_SRC
** Description の長さ
   Google Calendar の説明の所って, 適当な syntax 使えないのかな.
   #+BEGIN_SRC emacs-lisp
    (setq org-icalendar-include-body 4096)
    (setq org-export-exclude-tags "DONE")
   #+END_SRC
** TimeZone
   カレンダーに適切なタイムゾーンを設定
   #+BEGIN_SRC emacs-lisp
    (setq org-icalendar-timezone "Asia/Tokyo")
   #+END_SRC
** 出力対象
   #+BEGIN_SRC emacs-lisp
     ;; TODO は出力対象から除外
     (setq org-icalendar-include-todo nil)
     ;; （通常は，<>--<> で区間付き予定をつくる．非改行入力で日付がNoteに入らない）
     (setq org-icalendar-use-scheduled '(event-if-todo event-if-not-todo))
     ;; DL 付きで終日予定にする：締め切り日（スタンプで時間を指定しないこと）
     (setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo))
   #+END_SRC
* export LaTeX
  主に日本語LaTeX → pTeX 用の設定とか.
** 読み込み
   =(require 'org)= で良いかと思ってみたら, 以下は読み込まないと
   =byte-compile= できなかった.
   #+BEGIN_SRC emacs-lisp
     (require 'org-latex nil 'noerror)
     (require 'org-beamer nil 'noerror)
   #+END_SRC
** 日本語LaTeX用の設定
   (squeeze 以前の)DebianのpLaTeXはまだUTF-8を処理できないので,
   EUC-JPでexportする.
   #+BEGIN_SRC emacs-lisp
     (setq org-export-latex-coding-system 'euc-jp-unix)
     (setq org-export-latex-date-format "%Y年%m月%d日")
   #+END_SRC
** jsarticle classの追加
   inputenc 等は読み込まないことにしてファイル毎にスタイルを設定する.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-export-latex-classes
                  '("jsarticle"
                    "\\documentclass{jsarticle}
     [NO-DEFAULT-PACKAGES]
     [NO-PACKAGES]
     [EXTRA]
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
     (setq org-export-latex-default-class "jsarticle")
   #+END_SRC
** 強調等の変換
   #+BEGIN_SRC emacs-lisp
   (setq org-export-latex-emphasis-alist
     '(
        ("*" "{\\bfseries{%s}}" nil)
        ("/" "{\\emph{%s}}" nil)
        ("_" "\\underline{%s}" nil)
        ("+" "\\st{%s}" nil)
        ("=" "\\protectedtexttt" nil)
        ("~" "\\verb" t)
        ))
   #+END_SRC
** latexmk
   PDF作成にはlatexmkを使う
   #+BEGIN_SRC emacs-lisp
     (setq org-latex-to-pdf-process
           '("latexmk -kanji=euc -pdfdvi %f"))
   #+END_SRC
** beamer export の設定
   #+BEGIN_SRC emacs-lisp
     ;; デフォルトのヘッドラインレベル -> 2
     (setq org-beamer-frame-level 2)
     ;; frame のオプション
     (setq org-beamer-frame-default-options "[fragile]")
     (setq org-export-with-sub-superscripts nil)
   #+END_SRC
* export HTML
  [[http://jekyllrb.com/][Jekyll]] [fn:1] でサイト構築を行なっているので, それにまつわる設定
** Project 用の変数定義
   #+BEGIN_SRC emacs-lisp
     (defvar my:org-publish-webpage
       (expand-file-name
        (concat (getenv "HOME") "/Public/")))
     (defvar my:org-publish-webpage-img
       (expand-file-name
        (concat my:org-publish-webpage "images/")))
     (defvar my:org-publish-gh-pages
       (expand-file-name
        (concat (getenv "HOME") "/Sources/gh-pages")))
     (defvar my:org-publish-emacs-pages
       (expand-file-name
        (concat my:org-publish-webpage "cc-env/Emacs/")))
   #+END_SRC
** Project の定義
   #+BEGIN_SRC emacs-lisp
     (setq org-publish-project-alist
           `(
             ("public"
              :base-directory ,my:org-publish-webpage
              :recursive t
              :exclude ".*\.el\\|^Makefile\\|.*\.gpg\\|sitemap\.org\\|^cc-env\\|^images\\|^_site\\||^export-config\.org"
              :base-extension "org"
              :headline-level 4
              :htmlized-source t
              :publishing-directory ,my:org-publish-webpage
              :publishing-function org-publish-org-to-html
              :body-only t
              )
             ("img"
              :base-directory ,my:org-publish-webpage-img
              :base-extension "jpg\\|png"
              :publishing-directory ,my:org-publish-webpage-img
              :publishing-function org-publish-attachment
              )
             ("gh-pages"
              :base-directory ,my:org-publish-gh-pages
              :base-extension "org"
              :recursive nil
              :htmlized-source t
              :exclude ".*\.el\\|^Makefile\\|.*\.gpg\\|sitemap\.org\\|^cc-env\\|^images\\|^_site\\|^export-config\.org"
              :headline-level 4
              :publishing-directory my:org-publish-gh-pages
              :publishing-function org-publish-org-to-html
              :body-only t
              )
             ("Emacs"
              :base-directory ,my:user-emacs-config-directory
              :base-extension "org"
              :htmlized-source t
              :recursive nil
              :exclude "^export-config\.org"
              :headline-level 4
              :publishing-directory ,my:org-publish-emacs-pages
              :publishing-function org-publish-org-to-html
              :body-only t
              :auto-sitemap t
              :sitemap-filename "sitemap.org"
              :sitemap-title ""
              )
             ("web" :components ("public" "img"))
             ("github" :components ("gh-pages"))
             ("emacs" :components ("Emacs"))
             ))
   #+END_SRC
** Cache の置き場所の変更
   #+BEGIN_SRC emacs-lisp
     ;; cache の置き場所を ~/.emacs.d/tmp/org-timestamps/ に変える
     (setq org-publish-timestamp-directory
           (concat my:user-emacs-temporary-directory "org-timestamps/"))
     (setq org-publish-use-timestamps-flag nil)
   #+END_SRC
* Footnotes

[fn:1] Jeykll: [[http://jekyllrb.com/]]

[fn:2] 横着プログラミング 第1回: Unixのメモ技術: [[http://0xcc.net/unimag/1/]]
