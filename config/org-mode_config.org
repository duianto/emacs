# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2012/11/14 17:53:55$
# License: Expat
#
#+TITLE: org-modeの設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+SETUPFILE: ./export-config.org
#+BEGIN_HTML
---
layout: emacs
title: org-modeの設定
---
#+END_HTML
* 基本設定
  #+BEGIN_SRC emacs-lisp
    (require 'org)
    ;; 打ち切らない.
    (setq org-startup-truncated nil)
    ;; ファイルを開く時は項目を折り畳んだ状態にする
    (setq org-startup-folded t)
    ;; 開いた時に画像を inline で表示しない
    (setq org-startup-with-inline-images nil)
    ;; ;; link を return で追う
    (setq org-return-follows-link t)
    ;; フォントロックを有効に
    (add-hook 'org-mode-hook 'turn-on-font-lock)
    ;; 基本ディレクトリ
    (setq org-directory "~/Dropbox/org/")
    ;; 時刻のフォーマット
    (setq org-display-custom-times "<%Y-%m-%d %H:%M:%S>")
    (setq org-time-stamp-custom-formats "<%Y-%m-%d %H:%M:%S>")
    ;; アプリケーションの関連付け
    ;; (cond
    ;;  (darwin-p
    ;;   (setq org-file-apps-defaults-macosx nil)
    ;;   (setq org-file-apps-defaults-macosx '((t . "open '%s'")))
    ;;   (setq org-file-apps org-file-apps-defaults-macosx)
    ;;   )
    ;;  (nt-p
    ;;   (setq org-file-apps-defaults-windowsnt nil)
    ;;   (setq org-file-apps-defaults-windowsnt '((t . "open '%s'")))
    ;;   (setq org-file-apps org-file-apps-defaults-windowsnt)
    ;;   )
    ;;  (t
    ;;   (setq org-file-apps-defaults-gnu nil)
    ;;   (setq org-file-apps-defaults-gnu '((t . "xdg-open '%s'")))
    ;;   (setq org-file-apps org-file-apps-defaults-gnu)
    ;;   )
    ;;  )
  #+END_SRC
* org-capture
  1日1ファイル + howm での一覧表示のための小細工
  #+BEGIN_SRC emacs-lisp
    ;; org-capture
    (require 'org-capture)
    (setq org-capture-bookmark nil)
    (defun my:org-capture-howm-file ()
      (expand-file-name
       (format-time-string "%Y%m%d-%H%M%S.howm") org-directory))
    (global-set-key (kbd "C-x m") 'org-capture)
    (setq org-capture-templates
          '(
            ("t" "Todo" entry
             (file "~/Dropbox/org/ToDo.org")
             "* TODO <%<%Y-%m-%d %H:%M:%S>>+ %?\n  %i\n  %a\n"
             :prepend nil
             :unnarrowed nil
             :kill-buffer t)
            ("m" "Memo" entry
             (file my:org-capture-howm-file)
             "* <%<%Y-%m-%d %H:%M:%S>>  %?\n  %i\n  %a\n\n"
             :prepend t
             :unnarrowed t
             :kill-buffer t)
            ("e" "Email" entry
             (file my:org-capture-howm-file)
             "* <%<%Y-%m-%d %H:%M:%S>>+ %?\n  %i\n  %a\n\n"
             :prepend t
             :unnarrowed t
             :kill-buffer t)
            ("d" "Diary" entry
             (file my:org-capture-howm-file)
             "* DIARY <%<%Y-%m-%d %H:%M:%S>> %?\n  %i\n  %a\n\n"
             :prepend t
             :unnarrowed t
             :kill-buffer t)
            ))
  #+END_SRC
* org-agenda & mobileorg
  #+BEGIN_SRC emacs-lisp
    (require 'org-mobile)
    (setq org-mobile-directory
          (concat  "~/Dropbox/MobileOrg"))
    (defvar org-agenda-files nil)
    (setq org-agenda-files
          `("~/Dropbox/org/ToDo.org"))
    (setq org-mobile-files org-agenda-files)
    (setq org-refile-targets '((org-agenda-files :level . 1)))
    (setq org-mobile-inbox-for-pull
          (concat org-directory "mobile-pull.org"))
    (setq org-mobile-creating-agendas nil)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "SOMEDAY(s)")))
    ;; 上で定義した ToDo だけを Agenda として抽出
    (setq org-mobile-agendas 'custom)
    ;; 起動時に sync...?
    ;; (defun org-mobile-sync ()
    ;;   (interactive)
    ;;   (let
    ;;       (org-mobile-sync-type
    ;;        (read-from-minibuffer "How do you sync the org files? (pull or push) "))
    ;;     (message "%s" org-mobile-sync-type)
    ;;     (cond
    ;;      ((string= "pull" org-mobile-sync-type)(org-mobile-pull))
    ;;      ((string= "push" org-mobile-sync-type)(org-mobile-push)))))
    ;; 起動時にモバイルで環境で編集したファイルを読み込む
    ;; (eval-after-load "org"
    ;;   '(progn
    ;;      (message "%s" "MobileOrg sync ... [pull]")
    ;;      (org-mobile-pull)))
    ;; need org-mode
    ;; (defadvice org-mobile-create-sumo-agenda (after org-mobile-create-sumo-agenda-fixup activate)
    ;;   "MobileOrgのAgenda Viewsを見やすくする"
    ;;   (let ((agendas (expand-file-name "agendas.org" org-mobile-directory)))
    ;;     (while (get-file-buffer agendas) (kill-buffer (get-file-buffer agendas)))
    ;;     (find-file agendas)
    ;;     (goto-char (point-min))
    ;;     (while (re-search-forward "\\* .*<after>KEYS=. TITLE: \\(.*\\)</after>\\(\n+\\)" nil t)
    ;;       (if (save-match-data (looking-at "\\* "))
    ;;           (replace-match "" t)
    ;;         (replace-match "* \\1\\2" t))
    ;;       )
    ;;     (save-buffer)
    ;;     (dolist (entry org-mobile-checksum-files)
    ;;       (when (string= "agendas.org" (car entry))
    ;;         (setcdr entry (md5 (current-buffer)))
    ;;         ))
    ;;     ))
    ;; (defadvice org-mobile-push (around org-mobile-push-safe activate)
    ;;   "もしコンフリクトがあれば一覧を表示する。
    ;; そうで無ければ、全ファイルをTODO順にソートし、余分な入力日時を除去し、プッシュする。"
    ;;   (when (org-occur-in-agenda-files "^\\*\\* End of edit$")
    ;;     (dolist (file (org-agenda-files))
    ;;       (with-current-buffer (find-file-noselect file)
    ;;         (let ((before (buffer-substring-no-properties (point-min) (point-max))))
    ;;           (goto-char (point-min))
    ;;           (while (re-search-forward "^\\[[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} . [0-9]\\{2\\}:[0-9]\\{2\\}\\]\n" nil t)
    ;;             (replace-match "" t))
    ;;           (condition-case nil
    ;;               (org-sort-entries nil ?o)
    ;;             (error nil))
    ;;           (if (string= before (buffer-substring-no-properties (point-min) (point-max)))
    ;;               (set-buffer-modified-p nil)
    ;;             (save-buffer))
    ;;           )))
    ;;     ad-do-it
    ;;     (org-export-icalendar-combine-agenda-files)
    ;;     )
    ;;   )

    ;; (defadvice org-mobile-pull (around org-mobile-pull-and-push activate)
    ;;   "mobileorg.orgに何かデータが入っていれば、プル＆プッシュする。"
    ;;   (when (<= 2 (nth 7 (file-attributes (expand-file-name org-mobile-capture-file org-mobile-directory))))
    ;;     ad-do-it
    ;;     (org-mobile-push)
    ;;     )
    ;;   )
    ;; timestamp の記録
    ;; (setq org-log-done)
    ;; (setq org-mobile-directory
    ;;       "~/Documents/Dropbox/MobileOrg")
    ;; (setq org-mobile-index-for-pull
    ;;       "~/Documents/Dropbox/org/mobile-flagged.org")
    ;; ;; agenda ファイルの一覧
    ;; (setq org-agenda-files (list org-directory))
    ;; ;; 拡張子 -> howm
    ;; (setq org-agenda-file-regexp "[^.].*\.howm")
    ;; ;; アジェンダ表示で下線を用いる
    ;; (add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))
    ;; (setq hl-line-face 'underline)
    ;; ;; 標準の祝日を利用しない
    ;; (setq calendar-holidays nil)
  #+END_SRC

* org-babel
  使う言語の追加
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (ruby       . t)
       (sh         . t)
       (emacs-lisp . t)
       (ditaa      . t)
       (dot        . t)
       (R          . t)
       (gnuplot    . t)
       ))
  #+END_SRC
  block 評価時の問い合わせの無効化
  #+BEGIN_SRC emacs-lisp
    (setq org-confirm-babel-evaluate nil)
  #+END_SRC
* LaTeX export の設定
  主に日本語LaTeX → pTeX 用の設定とか.
** 日本語LaTeX用の設定
   (squeeze 以前の)DebianのpLaTeXはまだUTF-8を処理できないので,
   EUC-JPでexportする.
   #+BEGIN_SRC emacs-lisp
     (require 'org-latex)
     (setq org-export-latex-coding-system 'euc-jp-unix)
     (setq org-export-latex-date-format "%Y年%m月%d日")
   #+END_SRC
** jsarticle classの追加
   inputenc 等は読み込まないことにしてファイル毎にスタイルを設定する.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-export-latex-classes
                  '("jsarticle"
                    "\\documentclass{jsarticle}
     [NO-DEFAULT-PACKAGES]
     [NO-PACKAGES]
     [EXTRA]
     "
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
     (setq org-export-latex-default-class "jsarticle")
   #+END_SRC
   強調等の変換
   #+BEGIN_SRC emacs-lisp
   (setq org-export-latex-emphasis-alist
     '(
        ("*" "{\\bfseries{%s}}" nil)
        ("/" "{\\emph{%s}}" nil)
        ("_" "\\underline{%s}" nil)
        ("+" "\\st{%s}" nil)
        ("=" "\\protectedtexttt" nil)
        ("~" "\\verb" t)
        ))
   #+END_SRC
** latexmk
   PDF作成にはlatexmkを使う
   #+BEGIN_SRC emacs-lisp
     (setq org-latex-to-pdf-process
           '("latexmk -pdfdvi %f"))
   #+END_SRC
* Beamer export の設定
  beamer でプレゼンするための設定
  #+BEGIN_SRC emacs-lisp
    (require 'org-beamer)
    ;; デフォルトのヘッドラインレベル -> 2
    (setq org-beamer-frame-level 2)
    ;; frame のオプション
    (setq org-beamer-frame-default-options "[fragile]")
    (setq org-export-with-sub-superscripts nil)
  #+END_SRC
* HTML export の設定
  [[http://jekyllrb.com/][Jekyll]] [fn:1] でサイト構築を行なっているので, それにまつわる設定
  #+BEGIN_SRC emacs-lisp
    ;; org-html, org-publish
    (require 'org-html)
    (require 'org-publish)
    (defvar my:org-publish-webpage
      (expand-file-name
       (concat (getenv "HOME") "/Public/")))
    (defvar my:org-publish-webpage-img
      (expand-file-name
       (concat my:org-publish-webpage "images/")))
    (defvar my:org-publish-gh-pages
      (expand-file-name
       (concat (getenv "HOME") "/Sources/gh-pages")))
    (defvar my:org-publish-emacs-pages
      (expand-file-name
       (concat my:org-publish-webpage "cc-env/Emacs/")))
    (setq org-publish-project-alist
          `(
            ("public"
             :base-directory ,my:org-publish-webpage
             :recursive t
             :exclude ".*\.el\\|^Makefile\\|.*\.gpg\\|sitemap\.org\\|^cc-env\\|^images\\|^_site\\|^README\.org\\|^export-config\.org"
             :base-extension "org"
             :headline-level 4
             :htmlized-source t
             :publishing-directory ,my:org-publish-webpage
             :publishing-function org-publish-org-to-html
             :body-only t
             )
            ("img"
             :base-directory ,my:org-publish-webpage-img
             :base-extension "jpg\\|png"
             :publishing-directory ,my:org-publish-webpage-img
             :publishing-function org-publish-attachment
             )
            ("gh-pages"
             :base-directory ,my:org-publish-gh-pages
             :base-extension "org"
             :recursive nil
             :htmlized-source t
             :exclude ".*\.el\\|^Makefile\\|.*\.gpg\\|sitemap\.org\\|^cc-env\\|^images\\|^_site\\|^export-config\.org"
             :headline-level 4
             :publishing-directory my:org-publish-gh-pages
             :publishing-function org-publish-org-to-html
             :body-only t
             )
            ("Emacs"
             :base-directory ,my:user-emacs-config-directory
             :base-extension "org"
             :htmlized-source t
             :recursive nil
             :exclude "^export-config\.org"
             :headline-level 4
             :publishing-directory ,my:org-publish-emacs-pages
             :publishing-function org-publish-org-to-html
             :body-only t
             :auto-sitemap t
             :sitemap-filename "sitemap.org"
             :sitemap-title ""
             )
            ("web" :components ("public" "img"))
            ("github" :components ("gh-pages"))
            ("emacs" :components ("Emacs"))
            ))
    ;; cache の置き場所を ~/.emacs.d/tmp/org-timestamps/ に変える
    (setq org-publish-timestamp-directory
          (concat my:user-emacs-temporary-directory "org-timestamps/"))
    (setq org-publish-use-timestamps-flag nil)
  #+END_SRC
* Footnotes

[fn:1] Jeykll: [[http://jekyllrb.com/]]
