# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# License: Expat
#
#+TITLE: org-modeの設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+DATE: 2015-01-05 23:45:44
#+SETUPFILE: ./export-config.org
* 始めに
  多機能すぎて, 御託宣が書けません.
  もはや org-mode が無いと生きていけない体になってしまいました.

  詳細は [[http://orgmode.org/][Org mode for Emacs – Your Life in Plain Text]] 参照．
  「Your Life in Plain Text」とか，カッコ良すぎ．

  =org-mode= 自体は =~/.emacs.d/modules/org-mode= に git submodule として取得し，
  適当な release tag を checkout することで，使用するバージョンを揃えている
  (以下は =8.2.10= の話)．
* 基本設定
** 読み込み
   #+BEGIN_SRC emacs-lisp
     (require 'org)    ;; ~/.emacs.d/init.el でも require しているけれど
   #+END_SRC
** auto-mode-alist
   メモの閲覧や整理は Agenda View ではなく [[http://howm.sourceforge.jp/index-j.html][howm: Hitori Otegaru Wiki Modoki]] で行なっているので，
   拡張子が =.org= の場合だけではなく， =.howm= の場合も =org-mode= を有効に
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
   (add-to-list 'auto-mode-alist '("\\.howm$" . org-mode))
   #+END_SRC
** link を return で追う
   URL だけじゃなくて Wanderlust のメールなども追跡できる.
   #+BEGIN_SRC emacs-lisp
     (when (locate-library "wl")
       (require 'org-wl))
     (setq org-return-follows-link t)
   #+END_SRC
** 時刻の形式
   #+BEGIN_SRC emacs-lisp
   (setq org-display-custom-times "<%Y-%m-%d %H:%M:%S>")
   (setq org-time-stamp-custom-formats "<%Y-%m-%d %H:%M:%S>")
   #+END_SRC
** timestamp の変更
   保存時の timestamp 更新に引っかける正規表現をちょっと変更．
   デフォルトでは $Lastupdate: ...$ を使っているけれど，org-mode では +DATE: を引っかける.
   #+BEGIN_SRC emacs-lisp
     (defun my:org-timestamp-hook ()
       "Change `time-stamp-start' in org-mode"
       (set (make-local-variable 'time-stamp-start) "#\\+DATE: 2")
       (set (make-local-variable 'time-stamp-end)   "\$")
       )
     (add-hook 'org-mode-hook 'my:org-timestamp-hook)
   #+END_SRC
** 日付表記
   ロケール引っかけて日本語表記するよりも，YYYY-MM-DD の方が良いので.
   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-mode-hook
             (lambda ()
               (set (make-local-variable 'system-time-locale) "C")))
   #+END_SRC
** default は ownCloud に保存
   #+BEGIN_SRC emacs-lisp
     (setq org-directory (concat (file-name-as-directory (getenv "HOME")) "ownCloud/org/"))
   #+END_SRC
* Capture: メモ取り
** 読み込み
   #+BEGIN_SRC emacs-lisp
   (require 'org-capture)
   #+END_SRC
** デフォルトのメモファイル
   #+BEGIN_SRC emacs-lisp
     (setq org-default-notes-file (concat org-directory "Memo.org"))
   #+END_SRC
** メモ取り用のキーバインド
   以前 changelog memo をやっていた時の癖で =C-x m= をメモにしている
   #+BEGIN_SRC emacs-lisp
   (define-key global-map (kbd "C-x m") 'org-capture)
   #+END_SRC
** GTD: 状態の追加
   #+BEGIN_SRC emacs-lisp
   (setq org-todo-keywords
         '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "SOMEDAY(s)")))
   #+END_SRC
** GTD: タグの追加
   #+BEGIN_SRC emacs-lisp
   (setq org-tag-alist
     '(
       ("Doing"  . "?d")
       ("@OFFICE" . ?o)
       ("@HOME" . ?h)
       ("SHOPPING" . ?s)
       ("MAIL" . ?m)
       ("WORK" . ?w)
       ))
   #+END_SRC*
** Archive の設定
   TODO→...→DONE としたエントリを =Arhive.org= に移動
    #+BEGIN_SRC emacs-lisp
      (require 'org-archive)
      (setq org-archive-location "Archive.org::")
      (defun my:org-archive-done-tasks ()
        (interactive)
        ;; ARCHIVE タグを付けるだけなら以下
        ;;   (org-map-entries 'org-archive-set-tag "/DONE" 'file))
        ;; org-archive-location に refile したいなら以下
        (org-map-entries 'org-archive-subtree "/DONE" 'file))
      (add-hook 'org-todo-statistics-hook 'my:org-archive-done-tasks)
      (add-hook 'org-todo-after-statistics-hook 'my:org-archive-done-tasks)
    #+END_SRC
** org-capture での bookmark の使用禁止
   refile 時には使われるので, 実はあんまり意味が無い?
   #+BEGIN_SRC emacs-lisp
   (setq org-capture-bookmark nil)
   #+END_SRC
** Capture Template の追加
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates
           `(
             ("t" "Todo" plain
              (file (concat org-directory "Memo.org"))
              ;; "* TODO <%<%Y-%m-%d>> %^{title} %^g\n  %?\n  %a\n  #+BEGIN_QUOTE\n%i\n  #+END_QUOTE"
              "* TODO <%<%Y-%m-%d>> %^{title} %^g\n  %?\n  %a"
              :prepend nil
              :unnarrowed nil
              :kill-buffer t
              )
             ("e" "Email Todo" plain
              (file (concat org-directory "Memo.org"))
              ;; "* TODO <%<%Y-%m-%d>> %:subject %^g\n  %?\n  %a\n  #+BEGIN_QUOTE\n%i\n  #+END_QUOTE"
              "* TODO <%<%Y-%m-%d>> %:subject %^g\n  %?\n  %a"
              :prepend nil
              :unnarrowed nil
              :kill-buffer t
              )
             ("s" "Schedule" plain
              (file (concat org-directory "Schedule.org"))
              ;; "* TODO <%<%Y-%m-%d>> %^{title} %^g\n  %?\n  %a\n  #+BEGIN_QUOTE\n%i\n  #+END_QUOTE"
              "* TODO <%<%Y-%m-%d>> %^{title} %^g\n  %?\n  %a"
              :prepend nil
              :unnarrowed nil
              :kill-buffer t
              )
             ("S" "Schedule from Email" plain
              (file (concat org-directory "Schedule.org"))
              ;; "* <%<%Y-%m-%d>> %:subject %^g\n  %?\n  %a\n  #+BEGIN_QUOTE\n%i\n  #+END_QUOTE"
              "* <%<%Y-%m-%d>> %:subject %^g\n  %?\n  %a"
              :prepend nil
              :unnarrowed nil
              :kill-buffer t
              )
             ("m" "Memo" plain
              (file (concat org-directory "Memo.org"))
              ;; (file (concat org-directory (format-time-string "%Y%m%d-%H%M%S.howm")))
              ;; "* MEMO <%<%Y-%m-%d>> %?\n  %a\n  #+BEGIN_QUOTE\n%i\n  #+END_QUOTE"
              "* MEMO <%<%Y-%m-%d>> %?\n  %a"
              :prepend t
              :unnarrowed nil
              :kill-buffer t
              )
             ("d" "Diary" plain
              (file (concat org-directory "Diary.org"))
              ;; (file (concat org-directory (format-time-string "%Y%m%d-%H%M%S.howm")))
              "* DIARY <%<%Y-%m-%d>> %^{title}\n  %?"
              :prepend t
              :unnarrowed nil
              :kill-buffer t
              )
             ))
   #+END_SRC
* Agenda: メモの一覧表示
** 読み込み
   #+BEGIN_SRC emacs-lisp
   (require 'org-agenda)
   #+END_SRC
** Agenda 表示のキーバインド
   #+BEGIN_SRC emacs-lisp
   (define-key global-map (kbd "C-c a") 'org-agenda)
   #+END_SRC
** Agenda 表示で使用するファイル
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files nil)
     (dolist (file
              '("Archive.org"
                "Diary.org"
                "Memo.org"
                "Schedule.org"
                "Schedule_KUSM.org"
                "Schedule_GFD.org"
                "Schedule_DebianJP.org"
                ))
       (add-to-list 'org-agenda-files (concat org-directory file)))
   #+END_SRC
** Agenda 表示のカスタマイズ
*** 一月表示
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-span 'month) ;; default: 'week
   #+END_SRC
*** 時刻表示が一桁の時に 0 を付加
    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-time-leading-zero t)
    #+END_SRC
* Export
** 読み込み
   #+BEGIN_SRC emacs-lisp
   (require 'ox)
   #+END_SRC
** 余計な空白の削除
   #+BEGIN_QUOTE
   upTeX以外のTeXやHTMLは，日本語の途中で改行があると、
   それを空白とみなしてしまうので、それを除去するようにする。
   ここでは単純に、U+2000
   以降の文字同士が改行で分割されていた場合は改行を削除する関数に例を示す。
   #+END_QUOTE
   とのことで, これに従う.
   #+BEGIN_SRC emacs-lisp
     (defun my:remove-org-newlines-at-cjk-text (&optional _mode)
       "先頭が '*', '#', '|' でなく，改行の前後が日本の文字の場合はその改行を除去する．"
       (interactive)
       (goto-char (point-min))
       (while (re-search-forward "^\\([^|#*\n].+\\)\\(.\\)\n *\\(.\\)" nil t)
         (if (and (> (string-to-char (match-string 2)) #x2000)
                  (> (string-to-char (match-string 3)) #x2000))
             (replace-match "\\1\\2\\3"))
         (goto-char (point-at-bol))))

     (eval-after-load "ox"
         '(progn
            (add-hook 'org-export-before-processing-hook
                      'my:remove-org-newlines-at-cjk-text)))
   #+END_SRC
* Publish Project
  [[http://jekyllrb.com/][Jekyll]] [fn:1] でサイト構築を行なっているので, それにまつわる設定
** 読み込み
   YAML Front matter を良い感じに生成する =ox-jekyll= を読み込む.
   =ox-jekyll= 自体は [[https://github.com/yoshinari-nomura/org-octopress][yoshinari-nomura/org-octopress]] [fn:2] 参照のこと.
   =ox-html= は =ox-jekyll= 内で読み込まれている.
   #+BEGIN_SRC emacs-lisp
     (require 'ox-jekyll)
     (require 'ox-html)
     (require 'ox-publish)
   #+END_SRC
** Project 用の変数定義
   主に出力場所などの設定
   #+BEGIN_SRC emacs-lisp
   (defvar my:org-publish-webpage
     (expand-file-name
      (concat (getenv "HOME") "/Public/")))
   (defvar my:org-publish-webpage-work
     (expand-file-name
      (concat my:org-publish-webpage "work/")))
   (defvar my:org-publish-webpage-img
     (expand-file-name
      (concat my:org-publish-webpage "images/")))
   (defvar my:org-publish-emacs-pages
     (expand-file-name
      (concat my:org-publish-webpage "_posts/emacs")))
   #+END_SRC
** Project 用, cache の置き場所の変更
   cache の置き場所を =$HOME/Public/.org-timestamps/= に変える
   #+BEGIN_SRC emacs-lisp
   (setq org-publish-timestamp-directory
         (concat my:org-publish-webpage ".org-timestamps/"))
   (setq org-publish-use-timestamps-flag t)
   #+END_SRC
** HTML バックエンドの設定
   #+BEGIN_SRC emacs-lisp
     (setq org-html-html5-fancy t)
     (setq org-html-doctype "html5")
     (setq org-html-use-infojs nil)
     (setq org-html-allow-name-attribute-in-anchors nil)
     (setq org-html-htmlize-output-type 'css)
     (setq org-html-htmlize-font-prefix "htmlized-")
     (setq org-html-text-markup-alist
           '((bold           . "<strong>%s</strong>")
             (italic         . "<em>%s</em>")
             (code           . "<code>%s</code>")
             (strike-through . "<span style=\"strike\">%s</span>")
             (underline      . "<span class=\"underline\">%s</span>")
             (verbatim       . "<code>%s</code>")))
   #+END_SRC
** ox-jekyll の拡張
   =ox-jekyll= で定義されている exporter をちょっと拡張して使う事にする
   #+BEGIN_SRC emacs-lisp
     ;; #+LANG から YAML Front Matter として `lang:' を生成
     (defcustom org-jekyll-lang "ja"
       "Default LANG used in Jekyll article."
       :group 'org-export-jekyll
       :type 'string)
     ;; #+JEKYLL_TAGS から YAML Front Matter として `tags:' を生成
     (defcustom org-jekyll-tags ""
       "Default space-separated tags in Jekyll article."
       :group 'org-export-jekyll
       :type 'string)
     ;; Define Back-End
     (org-export-define-derived-backend 'my:jekyll 'jekyll
       ;; メニューエントリーの追加
       :menu-entry
       '(?j "Jekyll: export to HTML with YAML front matter."
            ((?c "As HTML buffer" my:org-jekyll-export-as-html)
             (?C "As HTML file" my:org-jekyll-export-to-html)))
       ;; テンプレートの上書き
       :translate-alist
       '((template  . my:org-jekyll-template)   ;; override
         )
       ;; オプションの追加
       :options-alist
       '((:lang   "LANG" nil org-jekyll-lang)
         (:jekyll-tags "JEKYLL_TAGS" nil org-jekyll-tags)))

     ;; Override Template
     (defun my:org-jekyll-template (contents info)
       "Override org-jekyll-template provided `org-jekyll-template'"
       (concat
        (my:org-jekyll--yaml-front-matter info)
        contents))

     (defun my:org-jekyll--yaml-front-matter (info)
       "Override org-jekyll--yam-front-matter provided `org-jekyll-template'"
       (let ((title
              (org-jekyll--get-option info :title))
             (date
              (org-jekyll--get-option info :date))
             (layout
              (org-jekyll--get-option info :jekyll-layout org-jekyll-layout))
             (lang
              (org-jekyll--get-option info :lang org-jekyll-lang))
             (categories
              (org-jekyll--get-option info :jekyll-categories org-jekyll-categories))
             (tags
              (org-jekyll--get-option info :jekyll-tags org-jekyll-tags))
             (published
              (org-jekyll--get-option info :jekyll-published org-jekyll-published))
             (comments
              (org-jekyll--get-option info :jekyll-comments)))
         (unless (equal published "true")
           (setq title (concat "[PREVIEW] " title)))
         (concat
          "---"
          "\ntitle: "      title
          "\ndate: "       date
          "\nlayout: "     layout
          "\nlang: "       lang
          "\ncategories: " categories
          "\ntags: "       tags
          "\npublished: "  published
          "\ncomments: "   comments
          "\n---\n")))

     (defun my:org-jekyll-export-as-html
       (&optional async subtreep visible-only body-only ext-plist)
       "Override org-jekyll--yam-front-matter provided `org-jekyll-export-as-html'"
       (interactive)
       (if async
           (org-export-async-start
               (lambda (output)
                 (with-current-buffer (get-buffer-create "*Org Jekyll HTML Export*")
                   (erase-buffer)
                   (insert output)
                   (goto-char (point-min))
                   (funcall org-html-display-buffer-mode)
                   (org-export-add-to-stack (current-buffer) 'jekyll)))
             `(org-export-as 'my:jekyll ,subtreep ,visible-only ,body-only ',ext-plist))
         (let ((outbuf (org-export-to-buffer
                           'my:jekyll "*Org Jekyll HTML Export*"
                         subtreep visible-only body-only ext-plist)))
           ;; Set major mode.
           (with-current-buffer outbuf (set-auto-mode t))
           (when org-export-show-temporary-export-buffer
             (switch-to-buffer-other-window outbuf)))))

     (defun my:org-jekyll-export-to-html
       (&optional async subtreep visible-only body-only ext-plist)
       "Override org-jekyll--yam-front-matter provided `org-jekyll-export-to-html'"
       (interactive)
       (let* ((extension (concat "." org-html-extension))
              (file (org-export-output-file-name extension subtreep))
              (org-export-coding-system org-html-coding-system))
         (if async
             (org-export-async-start
                 (lambda (f) (org-export-add-to-stack f 'my:jekyll))
               (let ((org-export-coding-system org-html-coding-system))
                 `(expand-file-name
                   (org-export-to-file
                    'my:jekyll ,file ,subtreep ,visible-only ,body-only ',ext-plist))))
           (let ((org-export-coding-system org-html-coding-system))
             (org-export-to-file
                 'my:jekyll file subtreep visible-only body-only ext-plist)))))

     (defun my:org-jekyll-publish-to-html (plist filename pub-dir)
       "Override org-jekyll--yam-front-matter provided `org-jekyll-publish-to-html'"
       (org-publish-org-to 'my:jekyll filename ".html" plist pub-dir))

     (defun my:org-jekyll-src-block (src-block contents info)
       "Transcode src-block"
       (let* ((lang  (org-element-property :language src-block))
              (value (org-element-property :value    src-block))
              (name  (org-element-property :name     src-block))
              (header "---\n")
              (footer "---\n"))
       (concat
        header lang value name footer contents)))
   #+END_SRC
** フィルタの追加/登録
   =org-info.js= は使わないので =<div>= タグが邪魔なのだが, 結構いたる所に処理が埋めこまれていて
   修正するのが大変なので, filter で消すことにする.
   閉じタグ =^</div>\n= も消すので, org ファイルに =</div>= を挿入する場合には, 明示的にコメントを付けること
   #+BEGIN_SRC emacs-lisp
    (defun my:org-jekyll-filter-html-tags (text backend info)
      "Remove all <div ... class=\"outline.*\">, </div>\n tags"
      (when (org-export-derived-backend-p backend 'jekyll)
        (replace-regexp-in-string
         "\\(<div.*?class=\"outline.*?>\\|<div.?class=\"org-src-container.*?>\\|^</div>\n\\)"
         "" text)))
   #+END_SRC
   コードブロックが liquid で処理されるのを防ぐために raw タグで囲う.
   #+BEGIN_SRC emacs-lisp
     (defun my:org-jekyll-src-block (text backend info)
       "Add raw tag for liquid escape"
       (when (org-export-derived-backend-p backend 'jekyll)
         (format "{%% raw %%}\n%s{%% endraw %%}" text)))
   #+END_SRC
   フィルタの登録
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-export-filter-headline-functions
                  'my:org-jekyll-filter-html-tags)
     (add-to-list 'org-export-filter-src-block-functions
                  'my:org-jekyll-src-block)
   #+END_SRC
** Project の定義
   #+BEGIN_SRC emacs-lisp
     (setq org-publish-project-alist
           `(
             ("public"
              :base-directory ,my:org-publish-webpage
              :base-extension "org"
              :exclude ".*\.el\\|^Makefile\\|.*\.gpg\\|sitemap\.org\\|^cc-env\\|^images\\|^_config\\|^_site\\|^export-config\.org"
              :publishing-directory ,my:org-publish-webpage
              :publishing-function my:org-jekyll-publish-to-html
              :headline-level 4
              :html-extension "html"
              :auto-sitemap nil
              :recursive nil
              )
             ("work"
              :base-directory ,my:org-publish-webpage-work
              :base-extension "org"
              :exclude ".*\.el\\|^Makefile\\|.*\.gpg\\|sitemap\.org\\|^cc-env\\|^images\\|^_config\\|^_site\\|^export-config\.org"
              :publishing-directory ,my:org-publish-webpage-work
              :publishing-function my:org-jekyll-publish-to-html
              :headline-level 4
              :html-extension "html"
              :auto-sitemap nil
              :recursive nil
              )
             ("img"
              :base-directory ,my:org-publish-webpage-img
              :base-extension "jpg\\|png"
              :publishing-directory ,my:org-publish-webpage-img
              :publishing-function org-publish-attachment
              )
             ("emacs"
              :base-directory ,my:user-emacs-config-directory
              :base-extension "org"
              :exclude "^export-config\.org\\|^Makefile\\|sitemap\.org"
              :publishing-directory ,my:org-publish-emacs-pages
              :publishing-function my:org-jekyll-publish-to-html
              :headline-level 4
              :auto-sitemap nil
              :recursive nil
              )
             ("web" :components ("public" "work" "img"))
             ("emacs" :components ("emacs"))
             ))
   #+END_SRC
* Babel
** 読み込み
   #+BEGIN_SRC emacs-lisp
     (require 'ob)
   #+END_SRC
** 言語の追加
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (emacs-lisp . t)
       (shell      . t)
       (ruby       . t)
       )
     )
  #+END_SRC
** 確認しない
   Project を batch で出力する時だけ nil にした方が良いかなぁ...
   #+BEGIN_SRC emacs-lisp
   (setq org-confirm-babel-evaluate nil)
   #+END_SRC
* Footnotes

[fn:1] Jeykll: [[http://jekyllrb.com/]]

[fn:2] yoshinari-nomura/org-octopress: [[https://github.com/yoshinari-nomura/org-octopress]]
