# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2013/07/05 05:37:19$
# License: Expat
#
#+TITLE: org-modeの設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+SETUPFILE: ./export-config.org
#+BEGIN_HTML
---
layout: emacs
title: org-modeの設定
---
#+END_HTML
* 始めに
  あとで書く.
  #+BEGIN_SRC emacs-lisp
  ;;
  #+END_SRC
* 基本設定
** キーバインド
   =org-capture=,  =org-export-icalendar-combine-agenda-files=, =org-agenda=.
   =org-capture= は changelog memo [fn:2] のキーバインドにしている.
   #+BEGIN_SRC emacs-lisp
     (define-key global-map (kbd "C-x m") 'org-capture)
     ;; (define-key global-map (kbd "C-c 1") 'org-export-icalendar-combine-agenda-files)
     (define-key global-map (kbd "C-c a") 'org-agenda)
   #+END_SRC
** auto-mode-alist
   拡張子が =.org=, もしくは =.howm= なら自動的に =org-mode= に
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
     (add-to-list 'auto-mode-alist '("\\.howm$" . org-mode))
   #+END_SRC
** 保存先の設定
   デフォルトで Dropbox に保存するように.
   #+BEGIN_SRC emacs-lisp
     (setq org-directory (concat my:dropbox "org/"))
     (setq org-default-notes-file (concat org-directory "schedule.org"))
   #+END_SRC
** link を return で追う
   URL だけじゃなくて Wanderlust のメールなども追跡できる.
   #+BEGIN_SRC emacs-lisp
     (setq org-return-follows-link t)
   #+END_SRC
** 時刻のフォーマット
   #+BEGIN_SRC emacs-lisp
     (setq org-display-custom-times "<%Y-%m-%d %H:%M:%S>")
     (setq org-time-stamp-custom-formats "<%Y-%m-%d %H:%M:%S>")
   #+END_SRC
** ファイルを開いた時は畳んだ状態で表示
   #+BEGIN_SRC emacs-lisp
     (setq org-startup-folded t)
   #+END_SRC
** 表示を打ち切らない
   #+BEGIN_SRC emacs-lisp
     (setq org-startup-truncated nil)
   #+END_SRC
** font-lock を有効化
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'turn-on-font-lock)
   #+END_SRC
** アプリケーションの関連付け
   #+BEGIN_SRC emacs-lisp
     ;; (cond
     ;;  (darwin-p
     ;;   (setq org-file-apps-defaults-macosx nil)
     ;;   (setq org-file-apps-defaults-macosx '((t . "open '%s'")))
     ;;   (setq org-file-apps org-file-apps-defaults-macosx)
     ;;   )
     ;;  (nt-p
     ;;   ;; 良く知らない fiber とか使うん?
     ;;   ;; (setq org-file-apps-defaults-windowsnt nil)
     ;;   ;; (setq org-file-apps-defaults-windowsnt '((t . "open '%s'")))
     ;;   ;; (setq org-file-apps org-file-apps-defaults-windowsnt)
     ;;   )
     ;;  (t
     ;;   (setq org-file-apps-defaults-gnu nil)
     ;;   (setq org-file-apps-defaults-gnu '((t . "xdg-open '%s'")))
     ;;   (setq org-file-apps org-file-apps-defaults-gnu)
     ;;   )
     ;;  )
   #+END_SRC
** 日付表記
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
               (lambda ()
                 (set (make-local-variable 'system-time-locale) "C")))
   #+END_SRC
* GTD: Org-Agenda
** Agenda で表示するファイル
   日付付きの TODO は ical に export されるので =schedule.org= のみを Agenda の対象に.
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files
           '("~/Dropbox/org/schedule.org"))
   #+END_SRC
** ToDo 状態の追加
   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords
           '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "SOMEDAY(s)")))
   #+END_SRC
** ToDo を DONE にした際の挙動
   =ARCHIVE= タグを付けて =archive.org= に refile する
   #+BEGIN_SRC emacs-lisp
     (require 'org-archive nil 'noerror)
     (setq org-archive-location "archive.org::")
     (defun my:org-archive-done-tasks ()
       (interactive)
     ;; ARCHIVE タグを付けるだけなら以下
     ;;   (org-map-entries 'org-archive-set-tag "/DONE" 'file))
     ;; org-archive-location に refile したいなら以下
       (org-map-entries 'org-archive-subtree "/DONE" 'file))
     (add-hook 'org-todo-statistics-hook 'my:org-archive-done-tasks)
     (add-hook 'org-todo-after-statistics-hook 'my:org-archive-done-tasks)
   #+END_SRC
** DONEの時刻を記録しない
   icalendar export に必要?
   #+BEGIN_SRC emacs-lisp
     (setq org-log-done nil)
   #+END_SRC
** GTD用のタグの追加
   とりあえず. そのうち適当に追加するかも.
   #+BEGIN_SRC emacs-lisp
     (setq org-tag-alist
       '(
         ("@OFFICE" . ?o)
         ("@HOME" . ?h)
         ("SHOPPING" . ?s)
         ("MAIL" . ?m)
         ("WORK" . ?w)
         ))
   #+END_SRC
** Refile 対象の設定
   subtree ではなく ファイルに refile する
   #+BEGIN_SRC emacs-lisp
     (setq org-outline-path-complete-in-steps t)
     (setq org-refile-allow-creating-parent-nodes t)
     (setq org-refile-use-outline-path 'file)
     (setq org-refile-targets
           '(
             ("todo.org" :maxlevel . 1)
             ("schedule.org" :maxlevel . 1)
             ("someday.org" :maxlevel . 1)
             ))
   #+END_SRC
** Refile 時の bookmark の置き場所の変更
   デフォルトは =user-emacs-config-directory= 以下に置かれる.
   #+BEGIN_SRC emacs-lisp
     (setq bookmark-default-file
           (concat my:user-emacs-temporary-directory "bookmarks"))
   #+END_SRC
* メモ環境: Org-Capture
  1メモ1ファイル + howm 連携のための設定
** org-cature の際に howm 形式のファイルを作成
   単なるメモは 1メモ1ファイルで保存
   #+BEGIN_SRC emacs-lisp
     (defun my:org-capture-howm-file ()
       (expand-file-name
        (format-time-string "%Y%m%d-%H%M%S.howm") org-directory))
   #+END_SRC
** org-capture での bookmark の使用禁止
   refile 時には使われるので, 実はあんまり意味が無い?
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-bookmark nil)
   #+END_SRC
** カテゴリの追加
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates
           '(
             ("t" "Todo" entry
              (file (concat org-directory "todo.org"))
              "* TODO <%<%Y-%m-%d>> %?\n  %i\n  %a\n"
              :prepend nil
              :unnarrowed nil
              :kill-buffer t)
             ("s" "Schedule" entry
              ;; (file+datetree (concat org-directory "schedule.org"))
              (file (concat org-directory "schedule.org"))
              "* <%<%Y-%m-%d>> %?\n  %i\n  %a\n"
              :prepend nil
              :unnarrowed nil
              :kill-buffer t)
             ("m" "Memo" entry
              (file my:org-capture-howm-file)
              "* MEMO <%<%Y-%m-%d>> %?\n   %i\n  %a\n\n"
              :prepend t
              :unnarrowed t
              :kill-buffer t)
             ("d" "Diary" entry
              (file my:org-capture-howm-file)
              "* DIARY <%<%Y-%m-%d>> %?\n  %i\n  %a\n\n"
              :prepend t
              :unnarrowed t
              :kill-buffer t)
             ))
   #+END_SRC
* LaTeX Export
  日本語LaTeXとして pLaTeX を使うための設定.
** 読み込み
   #+BEGIN_SRC emacs-lisp
     (require 'ox-latex)
     (require 'ox-beamer)
   #+END_SRC
** export 時のエンコーディング
   #+BEGIN_SRC emacs-lisp
     (setq org-export-coding-system nil)
   #+END_SRC
** documentclass として jsarticle を使う
   inputenc は使わないことに.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-latex-classes
                  '("jsarticle"
                    "\\documentclass{jsarticle}
     [NO-DEFAULT-PACKAGES]
     [NO-PACKAGES]
     [EXTRA]"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
     (setq org-latex-default-class "jsarticle")
   #+END_SRC
** beamer の設定
   こちらも同様.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-latex-classes
                  '("beamer"
                    "\\documentclass[presentation]{beamer}
     [NO-DEFAULT-PACKAGES]
     [NO-PACKAGES]
     [EXTRA]"
                         ("\\section{%s}" . "\\section*{%s}")
                         ("\\subsection{%s}" . "\\subsection*{%s}")
                         ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
   #+END_SRC
   常に =fragile= で使用
   #+BEGIN_SRC emacs-lisp
   (setq org-beamer-frame-default-options "fragile")
   #+END_SRC
** pdf 生成コマンド: pLaTeX を使う
   こんな感じのスクリプトを用意して
   #+BEGIN_SRC sh
     #!/bin/zsh
     NKF=`which nkf 1>/dev/null 2>&1` || exit 1
     CODE=`nkf -guess $1`
     case $CODE in
         EUC-JP*|euc-jp*)
             platex -shell-escape -src-specials -kanji=euc $1 && \
                 dvipdfmx "`basename "$1" .tex`"
             ;;
         ISO-2022-JP*|iso-2022-jp*)
             platex -shell-escape -src-specials -kanji=jis $1 && \
                 dvipdfmx "`basename "$1" .tex`"
             ;;
         UTF-8*|utf-8*)
             platex -shell-escape -src-specials -kanji=utf8 $1 && \
                 dvipdfmx "`basename "$1" .tex`"
             ;;

         ,*)
             ;;
     esac
   #+END_SRC
   PDF を生成する際には上記スクリプトを実行することに.
   #+BEGIN_SRC emacs-lisp
     (setq org-latex-pdf-process '("pdfplatex %f"))
   #+END_SRC
** 強調等の変換
   #+BEGIN_SRC emacs-lisp
   (setq org-export-latex-emphasis-alist
     '(
        ("*" "{\\bfseries{%s}}" nil)
        ("/" "{\\emph{%s}}" nil)
        ("_" "\\underline{%s}" nil)
        ("+" "\\st{%s}" nil)
        ("=" "\\protectedtexttt" nil)
        ("~" "\\verb" t)
        ))
   #+END_SRC
* HTML Export
  [[http://jekyllrb.com/][Jekyll]] [fn:1] でサイト構築を行なっているので, それにまつわる設定
** 読み込み
   #+BEGIN_SRC emacs-lisp
     (require 'ox-html)
     (require 'ox-publish)
   #+END_SRC
** Project 用の変数定義
   主に出力場所などの設定
   #+BEGIN_SRC emacs-lisp
     (defvar my:org-publish-webpage
       (expand-file-name
        (concat (getenv "HOME") "/Public/")))
     (defvar my:org-publish-webpage-img
       (expand-file-name
        (concat my:org-publish-webpage "images/")))
     (defvar my:org-publish-emacs-pages
       (expand-file-name
        (concat my:org-publish-webpage "cc-env/Emacs/_drafts/")))
   #+END_SRC
** Cache の置き場所の変更
   cache の置き場所を =$HOME/Public/_config/org-timestamps/= に変える
   #+BEGIN_SRC emacs-lisp
     (setq org-publish-timestamp-directory
           (concat my:org-publish-webpage "_config/org-timestamps/"))
     (setq org-publish-use-timestamps-flag t)
   #+END_SRC
** Project の定義
   #+BEGIN_SRC emacs-lisp
     (setq org-publish-project-alist
           `(
             ("public"
              :base-directory ,my:org-publish-webpage
              :recursive nil
              :exclude ".*\.el\\|^Makefile\\|.*\.gpg\\|sitemap\.org\\|^cc-env\\|^images\\|^_config\\|^_site\\|^export-config\.org"
              :base-extension "org"
              :headline-level 4
              :htmlized-source t
              :html-extension "html"
              :publishing-directory ,my:org-publish-webpage
              :publishing-function org-html-publish-to-html
              :body-only t
              )
             ("img"
              :base-directory ,my:org-publish-webpage-img
              :base-extension "jpg\\|png"
              :publishing-directory ,my:org-publish-webpage-img
              :publishing-function org-publish-attachment
              )
             ("Emacs"
              :base-directory ,my:user-emacs-config-directory
              :base-extension "org"
              :htmlized-source t
              :recursive nil
              :exclude "^export-config\.org"
              :headline-level 4
              :publishing-directory ,my:org-publish-emacs-pages
              :publishing-function org-html-publish-to-html
              :body-only t
              :auto-sitemap nil
              )
             ("web" :components ("public" "img"))
             ("emacs" :components ("Emacs"))
             ))
   #+END_SRC
** 変換設定
   =<b></b>=, =<i></i>= はあまり好みではない.
   #+BEGIN_SRC emacs-lisp
     (setq org-html-text-markup-alist
           '((bold . "<strong>%s</strong>")
             (code . "<code>%s</code>")
             (italic . "<span style=\"italic\">%s</span>")
             (strike-through . "<span style=\"strike\">%s</span>")
             (underline . "<span class=\"underline\">%s</span>")
             (verbatim . "<code>%s</code>")))
   #+END_SRC
* Babel
** 言語の追加
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (sh .t)
       (ruby .t))
     )
  #+END_SRC
** 確認しない
   Project を batch で出力する時だけ nil にした方が良いかなぁ...
   #+BEGIN_SRC emacs-lisp
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC
* Footnotes

[fn:1] Jeykll: [[http://jekyllrb.com/]]

[fn:2] 横着プログラミング 第1回: Unixのメモ技術: [[http://0xcc.net/unimag/1/]]
