# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2013/01/03 01:29:38$
# License: Expat
#
#+TITLE: AutoCompleteの設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+SETUPFILE: ./export-config.org
#+BEGIN_HTML
---
layout: emacs
title: AutoCompleteの設定
---
#+END_HTML
* 始めに
  [[http://cx4a.org/software/auto-complete/index.ja.html][Auto Complete Mode]] [fn:1] を参照のこと. 大変便利なのだけれども
  Org-mode や yasnippet と共存させようとすると, 結構面倒.
  ここで設定しているのはそういうお話.
* 読み込みと初期設定
  #+BEGIN_SRC emacs-lisp
    (require 'auto-complete-config)
    (add-to-list 'ac-dictionary-directories
                 (concat my:user-emacs-share-directory "ac-dict"))
    (setq ac-comphist-file
          (concat my:user-emacs-temporary-directory "ac-comphist.dat"))
    (ac-config-default)
    (ac-flyspell-workaround)
  #+END_SRC
* 全てのモードで補完を有効に
  #+BEGIN_SRC emacs-lisp
    (global-auto-complete-mode t)
    ;; 追加メジャーモード
    (add-to-list 'ac-modes 'org-mode)
  #+END_SRC
* 起動/キー設定など
  `<s'補完などを使うために 4 文字以上で起動することにする
  補完メニュー表示時には C-n/C-p で選択.
  #+BEGIN_SRC emacs-lisp
    (setq ac-auto-start 4)                         ; 4 文字以上で起動
    (setq ac-auto-show-menu 0.5)                   ; 0.5秒でメニュー表示
    (setq ac-use-comphist t)                       ; 補完候補をソート
    (setq ac-candidate-limit nil)                  ; 補完候補表示を無制限に
    (setq ac-use-quick-help nil)                   ; tool tip 無し
    (setq ac-use-menu-map t)                       ; キーバインド
    (define-key ac-menu-map (kbd "C-n")         'ac-next)
    (define-key ac-menu-map (kbd "C-p")         'ac-previous)
    (define-key ac-completing-map (kbd "<tab>") 'ac-complete)
    (define-key ac-completing-map (kbd "M-/")   'ac-stop)
    (define-key ac-completing-map (kbd "RET") nil) ; return での補完禁止
  #+END_SRC
* look による 英単語の補完
  ネタ元は [[http://d.hatena.ne.jp/kitokitoki/20101205][auto-complete.el と look コマンドを使って英単語を補完する]] [fn:2]
  #+BEGIN_SRC emacs-lisp
    (when (executable-find "look")
      (defun my-ac-look ()
        "look コマンドの出力をリストで返す"
        (interactive)
        (unless (executable-find "look")
          (error "look コマンドがありません"))
        (let ((search-word (thing-at-point 'word)))
          (with-temp-buffer
            (call-process-shell-command "look" nil t 0 search-word)
            (split-string-and-unquote (buffer-string) "\n"))))

      (defun ac-complete-look ()
        (interactive)
        (let ((ac-menu-height 50)
              (ac-candidate-limit t))
          (auto-complete '(ac-source-look))))

      (defvar ac-source-look
        '((candidates . my-ac-look)
          (requires . 2)))  ;; 2文字以上ある場合にのみ対応させる

    (global-set-key (kbd "M-h") 'ac-complete-look))
  #+END_SRC
* Footnotes

[fn:1] Auto Complete Mode: [[http://cx4a.org/software/auto-complete/index.ja.html]]

[fn:2] auto-complete.el と look コマンドを使って英単語を補完する: [[http://d.hatena.ne.jp/kitokitoki/20101205]]
