# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
# init-gnus.org
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2011/12/19 10:15:29$
#
# Author: Youhei SASAKI <uwabami@gfd-dennou.org>
# License: Expat
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#+SETUPFILE: ~/.emacs.d/template/org/level-2.org
#+INCLUDE: ~/.emacs.d/template/org/menu-level-2.org
#+TITLE: Gnus の設定

* 基本設定
#+begin_src emacs-lisp
  (require 'gnus)
  (load "gnus-setup")
  (require 'gnus-start)
  (require 'gnus-art)
  (require 'auth-source)
  ;; (require 'starttls)
  (require 'nnimap)
  (require 'nnir)
  ;; for reading mail by imap.
  (setq gnus-select-method
        '(nnimap "localhost"
                 (nnimap-address "127.0.1.1")
                 (nnimap-server-port 993)
                 (nnimap-authinfo-file "~/.wl/.authinfo")
                 (nnimap-stream ssl)))
  ;; for sending mail.
  (setq message-send-mail-function 'smtpmail-send-it
        send-mail-function 'smtpmail-send-it
        ;; smtpmail-starttls-credentials '(("127.0.0.1" 25 nil nil))
        ;; smtpmail-auth-credentials '(("smtp.gmail.com" 587
        ;;                                 "ほげほげ@gmail.com" nil))
        smtpmail-default-smtp-server "127.0.0.1"
        smtpmail-smtp-server "127.0.0.1"
        smtpmail-smtp-service 25
        ;; Cc: and Bcc: to header of message-mode.
        message-default-mail-headers "Cc: \nBcc: \n")

  ;; customize `gnu-summary-line-foramt'.
  (defvar my-gnus-mail-addres-regex "uwabami\\.mail\\(\\+[^@]+\\)?@gmail\\.com"
    "*Regular expression of mail address that indicates for me.")

  ;; from http://emacs.wordpress.com/2007/10/07/gmail-envy/
  ;; and customize it.
  (defun gnus-user-format-function-j (headers)
    "Return a \">\" if variable `my-gnus-mail-addres-regex' matches in To,
  CC or Bcc. If not matched, return a \" \"."
    (cond
     ((or (string-match my-gnus-mail-addres-regex
                              (gnus-extra-header 'To headers))
          (string-match my-gnus-mail-addres-regex
                              (gnus-extra-header 'Cc headers))
          (string-match my-gnus-mail-addres-regex
                              (gnus-extra-header 'BCc headers)))
      ">")
     (t
      " ")))
  (setq gnus-summary-line-format "%uj%U%R%I%(%[%-23,23f%]%) %s\n")

  ;; gnu-topic-mode by default
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

  ;; MUA is gnus.
  (setq read-mail-command 'gnus
        mail-user-agent 'gnus-user-agent)

  (setq ;; Do not use mailcrypt.
        gnus-use-mailcrypt nil
        gnus-check-new-newsgroups nil
        gnus-use-cache t
        gnus-cache-directory "~/Mail/gnus-cache/"
        gnus-cache-enter-articles '(ticked dormant read unread)
        gnus-cache-remove-articles nil
        gnus-cacheable-groups "^nnimap"
        gnus-posting-styles '((".*" (name "Youhei SASAKI")))
        ;; Do not split the mail when mail was large.
        mime-edit-split-message nil
        ;; treates wide character
        gnus-use-correct-string-widths t
        ;; Do not ask online or not.
        gnus-agent-go-online t
        ;; do not goto cursor to unread group.
        gnus-group-goto-unread nil
        ;; show also user-agent.
        gnus-visible-headers (concat gnus-visible-headers "\\|^User-Agent")
        ;; extra headers to parse.
        gnus-extra-headers '(To Newsgroups X-Newsreader
                                      Content-Type CC User-Agent Gnus-Warning)
        nnmail-extra-headers gnus-extra-headers
        ;; If member of thread that includes new article has old
        ;; article, grab old articles to display thread.
        gnus-fetch-old-headers t)

  ;; Display always 500 articles at least in summary buffer.
  (defvar my-gnus-summary-maximum-articles 500
    "*The recent X number of articles that displayed in summary-buffer
  by use `gnus-topic-select-group' (RET) in gnus-group-buffer. The default
  value is 500. The recent 500 articles are always displayed at least.")
  (setq gnus-alter-articles-to-read-function
        #'(lambda (group articles)
              (let ((active (gnus-active group)))
                (delete-dups
                 (append articles
                         (gnus-uncompress-range
                          (cond
                           (my-gnus-summary-maximum-articles
                            ;; show `my-gnus-summary-maximum-articles' messages.
                            (cons (max (car active)
                                       (- (cdr active)
                                          my-gnus-summary-maximum-articles
                                          -1))
                                  (cdr active)))
                           (t
                            ;; show always all messages.
                            active))))))))

  ;; Gnus + EasyPG
  (require 'epg-config)
  (require 'gnus-msg)
  (require 'mml2015)
  (setq gnus-message-replysign t
        gnus-message-replyencrypt t
        gnus-message-replysignencrypted t
        mm-verify-option 'always
        mm-decrypt-option 'always
        mml2015-use 'epg
        mml2015-encrypt-to-self t
        mml2015-always-trust nil
        mml2015-cache-passphrase t
        mml2015-passphrase-cache-expiry '36000
        mml2015-sign-with-sender t
        gnus-buttonized-mime-types '("multipart/alternative"
                                     "multipart/encrypted"
                                     "multipart/signed"))

  ;; ;; mail contacts list manager.
  ;; (require 'bbdb)
  ;; ;; take mail address automatically
  ;; (setq bbdb/news-auto-create-p t)
  ;; ;; add address automatically
  ;; (setq bbdb-always-add-addresses t)
  ;; ;; do not use popup
  ;; (setq bbdb-use-pop-up nil)
  ;; ;; my mail address
  ;; (setq bbdb-user-mail-names "khiker\\.mail@gmail\\.com")
  ;; (bbdb-initialize 'gnus 'message)
#+end_src
