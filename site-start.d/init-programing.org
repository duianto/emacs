# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
# init_programing.org
#+begin_quote
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2011/11/24 21:46:43$
#
# Author: Youhei SASAKI <uwabami@gfd-dennou.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#+end_quote
#Code:
#+TITLE: 言語毎の設定
#+OPTIONS: toc:2 num:nil ^:nil

** SOMEDAY llvm と auto-complete-el で幸せになれるらしいね.

そのうち設定したいね.

** Fortran90

- f90-mode って fortran2003 とかにも対応してるのか?

#+begin_src emacs-lisp
;; -----------------------------------------------------------
;;; Fortran90
(setq f90-mode-hook
      '(lambda ()
         (setq
          f90-do-indent 2
          f90-if-indent 2
          f90-type-indent 2
          f90-program-indent 2
          f90-continuation-indent 2
          f90-comment-region "!!"
          f90-indented-comment-re "!!"
          f90-break-delimiters "[-+\\*/,><=% \t]"
          f90-break-before-delimiters t
          f90-beginning-ampersand t
          f90-smart-end 'blink
          f90-auto-keyword-case nil
          f90-leave-line-no  nil
          f90-startup-message t
          indent-tabs-mode nil
          f90-font-lock-keywords f90-font-lock-keywords-4
          )
         ;;The rest is not default.
         (turn-on-font-lock)         ; for highlighting
         (if f90-auto-keyword-case   ; change case of all keywords on startup
             (f90-change-keywords f90-auto-keyword-case))
         ))
(setq auto-mode-alist
      (append '(("\\.F90$" . f90-mode)) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\.g90$" . f90-mode)) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\.f90$" . f90-mode)) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\.f95$" . f90-mode)) auto-mode-alist))
#+end_src

** C/C++

あんまり書く事無いけれどね.

#+begin_src emacs-lisp
;; -----------------------------------------------------------
;;; C/C++
;; C/C++ モードの追加の色づけ
;; まず、色の定義
(defface font-lock-dbg-face
  '((((class color) (background light)) (:foreground "DeepPink"))
    (((class color) (background dark)) (:foreground "Red3"))
    (t (:bold t :italic t)))
  "Font Lock mode face used for OOo Debug messages."
  :group 'font-lock-highlighting-faces)
(defvar font-lock-dbg-face'font-lock-dbg-face
  "Face name to use for OOo Debug messages.")

(defface font-lock-brace-face
  '((((class color) (background light)) (:foreground "Red2"))
    (((class color) (background dark)) (:foreground "sienna1"))
    (t (:bold t :italic t)))
  "Font Lock mode face used for braces ()[]{} and the comma."
  :group 'font-lock-highlighting-faces)
(defvar font-lock-brace-face'font-lock-brace-face
  "Face name to use for braces.")

(defface font-lock-bool-face
  '((((class color) (background light)) (:foreground "forest green"))
    (((class color) (background dark)) (:foreground "lime green"))
    (t (:bold t :italic t)))
  "Font Lock mode face used for boolean operators."
  :group 'font-lock-highlighting-faces)
(defvar font-lock-bool-face'font-lock-bool-face
  "Face name to use for boolean operators.")

;; 色づけしたいキーワードの設定
;; よく使うdefine
(defconst bm-additional-constant-keywords
  (cons
   (regexp-opt
    (list "TRUE" "FALSE" "ON" "OFF" ) 'words) font-lock-constant-face))

;; デバッグ関連の処理に色をつける
(defconst bm-assert-keywords
  (cons
   (concat "\\<\\("
           (regexp-opt
            (list "PRINTF" "printf" "ASSERT"  "DBPRINTF" ))
           "\\|DBG_\\sw+\\)\\>")
   font-lock-dbg-face))
;; 括弧関連に色をつける
(defconst bm-brace-keywords
  (cons
   "[][(){}]"
   font-lock-brace-face ))

;; 各種記号に色づけ
(defconst bm-operator-keywords
  (cons
   "[|&!<>+-.*/^~%=:?]+" font-lock-bool-face))

;; モードに関連付け
(font-lock-add-keywords
 'c++-mode
 (list
  bm-brace-keywords
  bm-operator-keywords
  bm-additional-constant-keywords
  bm-assert-keywords
  ))

(font-lock-add-keywords
 'c-mode
 (list
  bm-brace-keywords
  bm-operator-keywords
  bm-additional-constant-keywords
  bm-assert-keywords
  ))

(setq auto-mode-alist
      (append '(("\\.c$" . c-mode)) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\.cpp$" . c++-mode)) auto-mode-alist))
#+end_src

** SOMEDAY Ruby

rinai とか楽しそうだね. そのうち設定したいね.

#+begin_src emacs-lisp
 (autoload 'ruby-mode "ruby-mode"
   "Mode for editing ruby source files" t)
; (autoload 'run-ruby "inf-ruby"
;    "Run an inferior Ruby process")
; (autoload 'inf-ruby-keys "inf-ruby"
;    "Set local key defs for inf-ruby in ruby-mode")
(remove-hook 'ruby-mode-hook 'ruby-mode-set-encoding)
(remove-hook 'before-save-hook 'ruby-mode-set-encoding)
; (add-hook 'ruby-mode-hook
;           '(lambda () (inf-ruby-keys)))
(add-hook 'ruby-mode-hook
          '(lambda ()
             (setq tab-width 2)
             (setq indent-tab-mode 'nil)
             (setq ruby-indent-level tab-width)
             (setq ruby-deep-indent-paren-style nil)
             ))
(setq auto-mode-alist
      (append '(("\\.rb$" . ruby-mode)) auto-mode-alist))
;; rd-mode の設定
(when (locate-library "rd-mode")
  (autoload 'rd-mode "rd-mode" "major mode for ruby document formatter RD" t)
  ;; rd-mode が起動した際に, =end \n\n =begin を省略しない.
  (add-hook 'rd-mode-hook 'rd-show-other-block-all)
  (setq auto-mode-alist
        (append '(("\\.rd$" . rd-mode)) auto-mode-alist)))
;; rabbit-mode の設定
(when (locate-library "rabbit-mode")
  (autoload 'rabbit-mode "rabbit-mode" "major mode for Rabbit" t)
  ;; (setq rabbit-author "佐々木洋平")
  ;; (setq rabbit-institution 'user-email-address)
  ;; (setq rabbit-theme "debian")
  (setq auto-mode-alist
        (append '(("\\.rab$" . rabbit-mode)) auto-mode-alist))
  )
#+end_src

** gettext po-mode

gettext の翻訳関連.

#+begin_src emacs-lisp
;; -----------------------------------------------------------
;;; Gettext Po
(autoload 'po-mode "po-mode"
  "Major mode for translators to edit PO files" t)
(setq auto-mode-alist
      (append '(("\\.po$". po-mode)) auto-mode-alist))
(setq auto-mode-alist
      (append '(("\\.po\\." .po-mode)) auto-mode-alist))
;; 行整形用関数
;;
;; @see http://www.emacswiki.org/emacs/PoMode
;;
(defun po-wrap ()
  "Filter current po-mode buffer through `msgcat' tool to wrap all lines."
  (interactive)
  (if (eq major-mode 'po-mode)
      (let ((tmp-file (make-temp-file "po-wrap."))
            (tmp-buf (generate-new-buffer "*temp*")))
        (unwind-protect
            (progn
              (write-region (point-min) (point-max) tmp-file nil 1)
              (if (zerop
                   (call-process
                    "msgcat" nil tmp-buf t (shell-quote-argument tmp-file)))
                  (let ((saved (point))
                        (inhibit-read-only t))
                    (delete-region (point-min) (point-max))
                    (insert-buffer tmp-buf)
                    (goto-char (min saved (point-max))))
                (with-current-buffer tmp-buf
                  (error (buffer-string)))))
          (kill-buffer tmp-buf)
          (delete-file tmp-file)))))
#+end_src

** SOMEDAY sh

うまく動かないような気がするんだけど...

#+begin_src emacs-lisp
(setq auto-mode-alist
      (append '(("\\.\\(sh\\|zsh\\|bash\\|csh\\|tcsh\\)$" .sh-mode))
              auto-mode-alist))
#+end_src

** markdown
ddskk と相性が悪いので git から持ってきたのを load する
#+begin_src emacs-lisp
  (add-to-load-path "site-lisp/markdown-mode")
  (autoload 'markdown-mode "markdown-mode"
    "Major mode for editing Markdown files" t)
  (setq auto-mode-alist
        (append '(("\\.md$" . markdown-mode)) auto-mode-alist))
  (setq auto-mode-alist
        (append '(("\\.markdown$" . markdown-mode)) auto-mode-alist))
#+end_src
