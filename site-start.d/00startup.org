# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
# 00startup.org
#+begin_quote
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2011/11/26 09:09:36$
#
# Author: Youhei SASAKI <uwabami@gfd-dennou.org>
# License: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#+end_quote
#+SETUPFILE: ~/.emacs.d/template/org/level-2.org
#+INCLUDE: ~/.emacs.d/template/org/menu-level-2.org
#+TITLE: Emacs の基本設定
#Code:

** 言語の設定
*** 基本設定
- 極力 UTF-8 を使用するようにしている.
- 過去の資源(特に TeX)に関しては, EUC-JP のファイルも多いので注意!!
#+begin_src emacs-lisp
  (set-language-environment "Japanese")
  (set-language-environment-coding-systems "Japanese")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
#+end_src
*** OS 毎の設定
- Mac OS X の HFS+ では UTF-8 + NFD(ッポイ?)なので
  NFC な環境(= Linux) と共同作業する場合の対処.
- Windows の場合は残念ながら sjis-dos にしている.
  CP932 とか使うにはどうするんだろう. 良く知らない.
#+begin_src emacs-lisp
  (cond
   (mac-p
    (require 'ucs-normarize)
    (setq file-name-coding-system 'utf-8-hfs)
    (setq default-file-name-coding-system 'utf-8-hfs)
    (setq locale-coding-system 'utf-8-hfs))
   (windows-p
    (setq file-name-coding-system 'sjis-dos)
    (setq default-file-name-coding-system 'sjis-dos)
    (setq locale-coding-system 'utf-8))
   (t
    (setq file-name-coding-system 'utf-8)
    (setq default-file-name-coding-system 'utf-8)
    (setq locale-coding-system 'utf-8))
   )
#+end_src
*** cp5022x の設定
- cp5022x については実ファイルを参照:
  [[file:~/.emacs.d/auto-install/cp5022x.el]]
- 本来は auto-install-el.org で設定するべきだけれど, 他でも使っているので
  ここで読み込む
#+begin_src emacs-lisp
(require 'cp5022x)
#+end_src
** 機種依存しない筈の雑多な設定など
*** ファイル名を指定しない場合はホームディレクトリから
#+begin_src emacs-lisp
(cd "~/")
#+end_src
*** キーバインドの変更(\C-h -> BS にする, とか)]
- 設定しておいて, 結構忘れていたりする.
#+begin_src emacs-lisp
(global-set-key (kbd "C-h")     'backward-delete-char)
(global-set-key (kbd "C-c M-a") 'align-regexp)
(global-set-key (kbd "C-c ;")   'comment-region)
(global-set-key (kbd "C-c M-;") 'uncomment-region)
(global-set-key (kbd "C-/")     'undo)
(global-set-key (kbd "C-c M-r") 'replace-regexp)
(global-set-key (kbd "C-c r")   'replace-string)
(global-set-key [home]          'beginning-of-buffer)
(global-set-key [end]           'end-of-buffer)
#+end_src
*** モードラインの設定
- モードラインにカーソルのある行番号を表示しない
#+begin_src emacs-lisp
(line-number-mode 0)
#+end_src
- モードラインにカーソルのある桁番号を表示しない
#+begin_src emacs-lisp
(column-number-mode 0)
#+end_src
- linum-mode 有効時の桁を 4 桁に
#+begin_src emacs-lisp
(setq linum-format "%4d ")
#+end_src
- モードラインのダイエット
#+begin_src emacs-lisp
(setq mode-line-frame-identification " ")
(setq-default mode-line-format
              '("-"
                mode-line-mule-info
                mode-line-modified
                mode-line-frame-identification
                mode-line-buffer-identification
                " "
                global-mode-string
                " %[("
                mode-name
                mode-line-process
                minor-mode-alist
                "%n" ")%]-"
                ;; (which-func-mode ("" which-func-format "-"))
                ;; (line-number-mode "L%l-")
                ;; (column-number-mode "C%c-")
                ;; (-3 . "%p")
                "-%-")
              )
#+end_src
*** フレームの設定など
- ツールバーは使用しない.
#+begin_src emacs-lisp
(tool-bar-mode 0)
#+end_src
- スクロールバーは使用しない.
#+begin_src emacs-lisp
(set-scroll-bar-mode nil)
#+end_src
- メニューバーを表示しない.
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
- bell-mode 使用しない
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src
- startup を表示しない
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src
- \C-x f での画像の非表示(主に terminal で起動するから)
#+begin_src emacs-lisp
(setq auto-image-file-mode nil)
#+end_src
*** バックアップの設定
- \*~, #\*, .save-\* は作成しない.
#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq auto-save-list-file-name nil)
(setq auto-save-list-file-prefix nil)
#+end_src
*** 表示, 編集関連
- カーソルのある行を強調表示...しない(疲れるので止める)
#+begin_src emacs-lisp
(global-hl-line-mode 0)
#+end_src
- 余計な空行/改行を入れない
#+begin_src emacs-lisp
(setq next-line-add-newlines nil)
(put 'set-goal-column 'disabled nil)
#+end_src
- yes or no を y or n に
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src
- 選択リージョンに色付け
#+begin_src emacs-lisp
(setq transient-mark-mode t)
#+end_src
- 対応する括弧を色付け
#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src
- GUI の場合にタイトルにバッファ名を表示
#+begin_src emacs-lisp
(cond
  (window-system
    (setq frame-title-format "%b"))
  (t
    (setq frame-title-format nil))
)
#+end_src
- ファイル名とともにディレクトリも表示
#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
(setq uniquify-min-dir-content 1)
#+end_src
- 前回の修正位置を記憶
#+begin_src emacs-lisp
(require 'saveplace)
(setq-default save-place t)
#+end_src
- tab 幅 4, tab でのインデントはしない
#+begin_src emacs-lisp
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
#+end_src
- 文字列は 72 文字で折り返し(RFC2822)
#+begin_src emacs-lisp
(setq-default fill-column 72)
(setq paragraph-start '"^\\([ 　・○<\t\n\f]\\|(?[0-9a-zA-Z]+)\\)")
(setq-default auto-fill-mode nil)
#+end_src
- list-buffers の代わりに ibuffer を使用する
#+begin_src emacs-lisp
(require 'ibuffer)
(global-set-key (kbd "C-x b") 'ibuffer)
(global-set-key (kbd "C-x C-b") 'ibuffer-other-window)
#+end_src
- [[http://d.hatena.ne.jp/tototoshi/20101202/1291289625][無駄な行末の空白を削除する(Emacs Advent Calendar jp:2010)]]
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
- script を保存時に自動的に chmod +x ...しないことに.
#+begin_src emacs-lisp
;; (add-hook 'after-save-hook
;;           'executable-make-buffer-file-executable-if-script-p)
#+end_src
*** 空になったファイルを尋ねずに自動削除
#+begin_src emacs-lisp
(if (not (memq 'delete-file-if-no-contents after-save-hook))
    (setq after-save-hook
          (cons 'delete-file-if-no-contents after-save-hook)))
(defun delete-file-if-no-contents ()
  (when (and
         (buffer-file-name (current-buffer))
         (= (point-min) (point-max)))
    (delete-file
     (buffer-file-name (current-buffer)))))
#+end_src
*** emacs-server の起動
#+begin_src emacs-lisp
(when (locate-library "server")
  (require 'server)
  (eval-when-compile (require 'server))
  (when (and (functionp 'server-running-p) (not (server-running-p)))
    (server-start)))
#+end_src
*** scratch を殺さない. 消した場合は再生成する
#+begin_src emacs-lisp
(defun my-make-scratch (&optional arg)
  (interactive)
  (progn
    ;; "*scratch*" を作成して buffer-list に放り込む
    (set-buffer (get-buffer-create "*scratch*"))
    (funcall initial-major-mode)
    (erase-buffer)
    (when (and initial-scratch-message (not inhibit-startup-message))
      (insert initial-scratch-message))
    (or arg
        (progn
          (setq arg 0)
          (switch-to-buffer "*scratch*")))
    (cond ((= arg 0) (message "*scratch* is cleared up."))
          ((= arg 1) (message "another *scratch* is created")))))
(defun my-buffer-name-list ()
  (mapcar (function buffer-name) (buffer-list)))
(add-hook 'kill-buffer-query-functions
          ;; *scratch* バッファで kill-buffer したら内容を消去するだけにする
          (function (lambda ()
                      (if (string= "*scratch*" (buffer-name))
                          (progn (my-make-scratch 0) nil)
                        t))))
(add-hook 'after-save-hook
          ;; *scratch* バッファの内容を保存したら
          ;; *scratch* バッファを新しく作る.
          (function
           (lambda ()
             (unless (member "*scratch*" (my-buffer-name-list))
               (my-make-scratch 1)))))
#+end_src
*** timestamp の自動更新
- ファイル内に"＄Lastupdate: ＄" ($は小文字)がある場合に
  save する度に timestamp を更新
#+begin_src emacs-lisp
(require 'time-stamp)
(add-hook 'before-save-hook 'time-stamp)
(setq time-stamp-active t)
(setq time-stamp-line-limit 10)
(setq time-stamp-start "$Lastupdate: ")
(setq time-stamp-format "%04y/%02m/%02d %02H:%02M:%02S")
(setq time-stamp-end "\\$")
#+end_src
*** count-char-region(wc)
- [[http://www.mpi-inf.mpg.de/~hitoshi/otherprojects/tips/elisp/wc.el][word counter]] より.
#+begin_src emacs-lisp
  ;;
  ;; word counter
  ;; $Id: wc.el,v 1.2 2003/09/19 14:15:53 yamauchi Exp $
  ;; Copyright (C) 2000-2003 Yamauchi Hitoshi, 山内 斉
  ;; If you see the Japanese commented part, you can exchange the
  ;; commented line instead of English line.
  ;;
  (defun count-chars-region (beg end)
    "word counter:wc: count words, characters, byes, and lines in the region"
  ;;"word counter:wc:リージョン内の単語数、文字数、バイト数、行数を表示する"
    (interactive "r")
    (let ((k 0)(w 0))
      (save-excursion
        (goto-char beg)
        (while (< (point) end)
          (setq k (+ k 1))
          (forward-char 1))
        (goto-char beg)
        (while (< (point) end)
          (setq w (+ w 1))
          (forward-word 1))
      (message (format
            "%d words, %d characters, %d bytes, %d lines"
            ;; "%d 語, %d 文字, %d バイト, %d 行"
           w k (- end beg)(count-lines beg end))))))
#+end_src
** 見た目/フォントなどの設定
*** [[file:10color-theme.org][color-theme の設定]]
#+begin_src emacs-lisp
  (my:load-org-file "10color-theme.org")
#+end_src
#+results: init-font-lock
*** [[file:10frame.org][GUI環境でのフォントとフレームの設定]]
#+begin_src emacs-lisp
  (when window-system (my:load-org-file "10frame.org"))
#+end_src
** browse-url
- 主に Linux の firefox 用. それ以外の環境での browse-url に関しては
  そのうち設定する, 筈
- 一応 chrome, chromium の設定も残しておく(コメントアウトだけれど)
#+begin_src emacs-lisp
  (require 'browse-url)
  ;; ブラウザの設定 -> (firefox) 用
  (defun browse-url-firefox
    (url &optional new-window)
    (interactive (browse-url-interactive-arg "URL: "))
    ;; URL encode any `confusing' characters in the URL.  This needs to
    ;; include at least commas; presumably also close parens.
    (while (string-match "[,)]" url)
      (setq url
            (replace-match
             (format "%%%x" (string-to-char (match-string 0 url))) t t url)))
    (let* ((process-environment (browse-url-process-environment))
           (process
            (apply 'start-process
                   (concat "mozilla-firefox " url) nil
                   "firefox"
                   (append
                    (list "-remote"
                          (concat "openurl("
                                  url
                                  ",new-tab)"
                                  ))))))
      (set-process-sentinel process
                            `(lambda (process change)
                               (browse-url-firefox-sentinel process ,url)))))

  (defun browse-url-firefox-sentinel (process url)
    "Handle a change to the process communicating with Firefox."
    (or (eq (process-exit-status process) 0)
        (let* ((process-environment (browse-url-process-environment)))
          ;; Mozilla is not running - start it
          (message "Starting Firefox...")
          (apply 'start-process (concat "mozilla-firefox " url) nil
                 "firefox"
                 (append browse-url-mozilla-startup-arguments (list url))))))
  ;;
  (setq browse-url-generic-program
        (if (file-exists-p "/usr/bin/chromium")
            "/usr/bin/chromium"
          "/usr/bin/x-www-browser"))
  ;; (if (file-exists-p "/usr/bin/chromium")
  ;;     (progn
  ;;       (setq browse-url-browser-function 'browse-url-generic)
  ;;       (if (locate-library "edit-server")
  ;;           (progn
  ;;             (require 'edit-server)
  ;;             (setq edit-server-new-frame nil)
  ;;             (edit-server-start))))
  (setq browse-url-browser-function 'browse-url-firefox)
  (global-set-key "\C-c\C-j" 'browse-url-at-point)
#+end_src
** easypg
- Emacs23 からは本体に同梱されているので, require する必要ないかも
- 対称鍵暗号の場合にはパスフレーズをキャッシュしておく
#+begin_src emacs-lisp
  (require 'epa-file)
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
#+end_src
** elscreen
- emacs 内で GNU screen っぽく.
- Debian squeeze の elscreen にはバグがある. backport した方が良い?
#+begin_src emacs-lisp
(when (not (locate-library "elscreen"))
  (add-to-load-path "site-lisp/elscreen"))
(setq elscreen-prefix-key "\C-o")
(if (eq window-system 'x)
    (setq elscreen-display-tab 6)
  (setq elscreen-display-tab nil)
  )
(setq elscreen-tab-display-kill-screen nil)
(require 'elscreen)
#+end_src
** 外部ファイルで設定するモノ達
*** [[file:20migemo.org][migemo の設定]]
#+begin_src emacs-lisp
  (my:load-org-file "20migemo.org")
#+end_src
*** [[file:20ddskk.org][DDSKKの設定]]
#+begin_src emacs-lisp
  (my:load-org-file "20ddskk.org")
#+end_src
*** [[file:30wl.org][Wanderlustの設定]]
#+begin_src emacs-lisp
(when (locate-library "wl")
  (my:load-org-file "30wl.org"))
#+end_src
*** [[file:30lookup-el.org][lookup-elの設定]]lookup-elの設定
#+begin_src emacs-lisp
(when (locate-library "lookup")
  (my:load-org-file "30lookup-el.org"))
#+end_src
*** muse-mode の設定
#+begin_src emacs-lisp
(my:load-org-file "init-muse.org")
#+end_src
*** org-mode
#+begin_src emacs-lisp
(my:load-org-file "init-org.org")
#+end_src
*** howm-mode
#+begin_src emacs-lisp
(my:load-org-file "init-howm.org")
#+end_src
*** プログラミング言語毎の設定
#+begin_src emacs-lisp
(my:load-org-file "init-programing.org")
#+end_src
*** tdiary
#+begin_src emacs-lisp
(when (locate-library "rd-mode")
  (my:load-org-file "init-tdiary.org"))
#+end_src
*** AUCTeX
#+begin_src emacs-lisp
;; (when (locate-library "tex-site")
;;   (my:load-org-file "init-auctex.org"))
#+end_src
*** auto-complete
#+begin_src emacs-lisp
(my:load-org-file "init-auto-complete.org")
#+end_src
*** autoinsert
#+begin_src emacs-lisp
(my:load-org-file "init-autoinsert.org")
#+end_src
*** calfw
#+begin_src emacs-lisp
;;(my:load-org-file "init-calfw.org")
#+end_src
*** flymake
#+begin_src emacs-lisp
;;(my:load-org-file "init-flymake.org")
#+end_src
*** VC (今ん所 magit だけ)
#+begin_src emacs-lisp
  (when (not (locate-library "magit"))
    (add-to-load-path "site-lisp/magit")
    (eval-when-compile   (add-to-load-path "site-lisp/magit")))
  (require 'magit)
#+end_src
*** auto-install
#+begin_src emacs-lisp
(my:load-org-file  "init-auto-install.org")
#+end_src
