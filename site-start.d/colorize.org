# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
# colorize.org
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2012/03/21 01:06:54$
#
# Author: Youhei SASAKI <uwabami@gfd-dennou.org>
# License: Expat
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#+SETUPFILE: ~/.emacs.d/template/org/level-2.org
#+INCLUDE: ~/.emacs.d/template/org/menu-level-2.org
#+TITLE: 色付けの設定など

* 初めに
Emacs を Daemon モードで起動させているので,
なにもしないと環境変数 TERM が dump になって font-lock などが悲しくなります.
なので, クライアント起動時に色やフォントの設定を読み込む事にしました.
** Space や Tab に色付け
   whitespace-mode の方が良いのかもしれないけれど,
   設定が面倒なのと多少重いので...
#+BEGIN_SRC emacs-lisp
  (require 'whitespace)
  (setq whitespace-style '(newline-mark))
  (setq whitespace-display-mappings
        '(
          (newline-mark 10 [8629 10])
          ))
  (global-set-key (kbd "C-x w") 'global-whitespace-mode)
  (defface my-face-r-1 '((t (:background "gray10"))) nil)
  (defface my-face-b-1 '((t (:background "gray"))) nil)
  (defface my-face-b-2 '((t (:background "gray50"))) nil)
  (defface my-face-u-1 '((t (:foreground "SteelBlue" :underline t))) nil)
  (defvar my-face-r-1 'my-face-r-1)
  (defvar my-face-b-1 'my-face-b-1)
  (defvar my-face-b-2 'my-face-b-2)
  (defvar my-face-u-1 'my-face-u-1)
  (defadvice font-lock-mode (before my-font-lock-mode ())
    (font-lock-add-keywords
     major-mode
     '(("\t" 0 my-face-b-2 append)
       ("　" 0 my-face-b-1 append)
       ("[ \t]+$" 0 my-face-u-1 append)
       ;;("[\r]*\n" 0 my-face-r-1 append)
       )))
  (ad-enable-advice 'font-lock-mode 'before 'my-font-lock-mode)
  (ad-activate 'font-lock-mode)
#+END_SRC
** color-theme
    見た目や色に関しては color-theme を使用するようになった.
    今のところ, 自作のテーマである [[https://github.com/uwabami/color-theme-darkpastel][color-theme-darkpastel]] を使用中.
#+BEGIN_SRC emacs-lisp
  (my:not-locate-library color-theme-autoloads "site-lisp/color-theme-6.6.0")
  (add-to-load-path "site-lisp/color-theme-darkpastel")
  (setq color-theme-load-all-themes nil)
  (setq color-theme-libraries nil)
  (require 'color-theme-autoloads)
  (eval-after-load "color-theme-autoloads"
    '(progn
      (color-theme-initialize)
      (require 'color-theme-darkpastel)
      ))
  (setq solarized-bold nil)
  (setq solarized-italic nil)
  (defun my:setup-frame-faces ()
    (interactive)
    (load "term/xterm")
    (when (not window-system)
      (xterm-register-default-colors))
    (tty-set-up-initial-frame-faces)
    (color-theme-darkpastel))
  (my:setup-frame-faces)
#+END_SRC
** GUI環境でのフォントとフレームの設定
*** 背景色の設定
    color-theme では透過色のターミナルで作業することを考えて,
    意図的に背景色を設定していない. なので, ここで設定する.
    #+BEGIN_SRC emacs-lisp
      (when (window-system)
        (set-background-color "#242424")
        (set-cursor-color "#00bb00")
        )
    #+END_SRC
*** [[http://d.hatena.ne.jp/khiker/20090809/emacs_opacity][フレームを半透明にする]]
    #+BEGIN_SRC emacs-lisp
      (defun my-opacity-change (action)
        (let* ((op
                (frame-parameter
                 (selected-frame) 'alpha)) val)
          (unless op
            (setq op 100))
          (when (setq val
                      (cond
                       ((eq action 'up)
                        (if (> op 90) 100 (+ op 10)))
                       ((eq action 'down)
                        (if (> 10 op) 10 (- op 10)))
                       ((eq action 'clear) 100)
                       ((numberp action) action)
                       (t nil)))
            (set-frame-parameter (selected-frame) 'alpha val))))
      (when window-system
        (my-opacity-change 90)     ; default の透明度は 90 に
        )
    #+END_SRC
*** フォントの設定
    Ricty を使用することにする(Ricty の無い環境はとりあえず考えていない).
    #+BEGIN_SRC emacs-lisp
    (when window-system
      (create-fontset-from-ascii-font "Ricty-18" nil "ricty")
      (dolist (charset '(
                         unicode
                         japanese-jisx0208
                         japanese-jisx0208-1978
                         japanese-jisx0212
                         japanese-jisx0213-1
                         japanese-jisx0213-2
                         japanese-jisx0213-a
                         japanese-jisx0213.2004-1
                         katakana-jisx0201
                         ))
        (set-fontset-font "fontset-ricty"
                          charset
                          (font-spec :family "Ricty" :size 18 nil 'prepend)))
      (add-to-list 'default-frame-alist '(font ."fontset-ricty"))
      (custom-set-faces
       '(variable-pitch ((t (:family "Ricty" :size 18 nil 'prepend))))
       '(fixed-pitch ((t (:family "Ricty" :size 18 nil 'prepend))))
       )
       )
    #+END_SRC
