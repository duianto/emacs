# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
# init-org.org
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2011/11/30 13:22:05$
#
# Author: Youhei SASAKI <uwabami@gfd-dennou.org>
# License: Expat
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#+SETUPFILE: ~/.emacs.d/template/org/level-2.org
#+INCLUDE: ~/.emacs.d/template/org/menu-level-2.org
#+TITLE: org-mode の設定

** 基本設定

   ~/.emacs.d/init.el でも読み込んでいるけれど, ここでも有効にする.

#+begin_src emacs-lisp
  (require 'org-install)
  (require 'org)
  ;; 打ち切らない.
  (setq org-startup-truncated nil)
  ;; ファイルを開く時は項目を折り畳んだ状態にする
  (setq org-startup-folded t)
  ;; フォントロックを有効に
  (add-hook 'org-mode-hook 'turn-on-font-lock)
#+end_src

** キーマップの設定

   デフォルトの org のキーバインドはあまりにも多くのキーバインドを書き換えるので
   かなりアレ. 必要なモンだけ有効にしておく.

   @see [[http://d.hatena.ne.jp/kitokitoki/20100430/p1][org-mode のデフォルトのキーバインドを無効にして必要なものだけ再定義する]]

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
    (lambda()
      ;; clear all org-map
      (setq org-goto-map (make-keymap))
      (setq org-agenda-mode-map (make-keymap))
      (setq org-cdlatex-mode-map (make-keymap))
      (setq org-exit-edit-mode-map (make-keymap))
      (setq org-goto-local-auto-isearch-map (make-keymap))
      (setq org-mode-map (make-keymap))
      (setq org-mouse-map (make-keymap))
      (setq orgstruct-mode-map (make-keymap))
      (setq my-org-mode-map (make-keymap))
      (use-local-map my-org-mode-map)
      ;; 自分の使いたい機能だけを設定していく
      (define-key my-org-mode-map (kbd "TAB") 'org-cycle)
      (define-key my-org-mode-map (kbd "C-c C-c") 'org-toggle-checkbox)
      (define-key my-org-mode-map (kbd "C-c \'") 'org-edit-src-code)
      (define-key my-org-mode-map (kbd "C-c C-e") 'org-export)
      (define-key my-org-mode-map (kbd "C-c C-l") 'org-insert-link)
  ))
#+end_src
** HTML export の設定

   HTML に export する設定. Project の使い方がまだイマイチ

#+begin_src emacs-lisp
  ;; HTML export の設定
  (require 'org-html)
  ;; default の style sheet は使わない
  (setq org-export-html-style-include-default nil)
  ;; -----------------------------------------------------------
  ;;; Website 用の org file の置き場所
  ;; @see http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html
  (require 'org-publish)
  ;;
  ;; バックアップファイルを作成しない
  (setq make-backup-files nil)
  ;; cache の置き場所を ~/.emacs.d/tmp/org-timestamps/ に変える
  (setq org-publish-timestamp-directory (concat user-emacs-directory "tmp/org-timestamps/"))
  ;; project の設定
  (setq org-publish-project-alist
        '(
          ("emacs-setup"
           :base-directory "~/.emacs.d/site-start.d/"
           :exclude ".*\.el|^Makefile|.*\.gpg|sitemap\.org"
           :base-extension "org"
           :publishing-directory "~/Public/cc-env/Emacs/"
           :recursive nil
           :publish-function org-publish-org-to-html
           :auto-sitemap t
           :sitemap-filename "sitemap.org"
           :sitemap-title "sitemap"
           :headline-levels 2
           :auto-preamble t
           )
          ("web-org"
           :base-directory "~/Public/org/src/"
           :exclude "^menu.*\.org\\|cc-env\\|css\\|img\\|.*\.pdf\\|.*\.tex"
           :base-extension "org"
           :publishing-directory "~/Public/"
           :recursive t
           :publish-function org-publish-org-to-html
           :headline-levels 2
           :html-postamble auto  ;; default
           :auto-preamble t
           )
          ("web"
           :components ("web-org" "Emacs"))
          ))
  ;; ;;; insert skelton and export config files
  ;; ;;
  ;; ;; @see http://thenybble.de/projects/orgsite.html
  ;; ;;
  ;; (defvar my-website-base-dir "~/Public/org/src" "Base directory of Website")
  ;; (defvar my-website-config-name "export-config-")
  ;; (setq my-website-base-dir (expand-file-name "~/Public/org/src"))
  ;; (defun my-repeat-string (str times)
  ;;   (with-output-to-string
  ;;     (dotimes (i times)
  ;;       (princ str))))
  ;; (defun my-get-nesting-depth (filename basename)
  ;;   (with-temp-buffer
  ;;     (insert (file-relative-name filename basename))
  ;;     (goto-line 0)
  ;;     (count-matches "/")))
  ;; (defun my-make-website-conf-path (filename)
  ;;   (let ((nesting-level (my-get-nesting-depth filename my-website-base-dir)))
  ;;     (concat (my-repeat-string "../" (+ nesting-level 1))
  ;;             my-website-config-name (int-to-string nesting-level) ".org")))
  ;; (define-skeleton my-org-website-skeleton "" "Enter Title: "
  ;;   "#+TITLE: " str ?\n
  ;;   "#+SETUPFILE: "
  ;;   (my-make-website-conf-path (buffer-file-name)) ?\n
  ;;   "#+INCLUDE: "
  ;;   (my-make-website-conf-path (buffer-file-name)) ?\n ?\n
  ;;   "* " _ )
  ;; (defun my-org-website-insert-skeleton-maybe ()
  ;;   (if (and (buffer-file-name)
  ;;            (not (file-remote-p (buffer-file-name)))
  ;;            (string-match (concat "^" my-website-base-dir)
  ;;                          (expand-file-name (buffer-file-name))))
  ;;       (my-org-website-skeleton)))
  ;; (add-hook 'find-file-hook 'auto-insert)
  ;; (setq auto-insert-query nil)
  ;; (setq auto-insert-alist
  ;;       '((org-mode . my-org-website-insert-skeleton-maybe)))
#+end_src

** LaTeX export の設定
#+begin_src emacs-lisp
  ;; LaTeX export
  (require 'org-latex)
  (setq org-export-latex-coding-system 'euc-jp-unix)
  (setq org-export-latex-date-format "%Y年%m月%d日")
  ;; LaTeX
  (add-to-list 'org-export-latex-classes
               '("
  jsarticle" "\\documentclass[a4j,12pt]{jsarticle}
  \\usepackage{ascmac}
  \\usepackage{amsmath}
  \\usepackage[varg]{txfonts}
  \\usepackage{natbib}
  \\usepackage{Dennou6}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
               )
  (setq org-export-latex-default-class "jsarticle")
#+end_src
** Beamer export の設定
#+begin_src emacs-lisp
  ;; LaTeX-Beamer export
  (require 'org-beamer)
  ;; デフォルトのヘッドラインレベル -> 2
  (setq org-beamer-frame-level 2)
  ;; frame のオプション
  (setq org-beamer-frame-default-options "[fragile]")
  (setq org-latex-to-pdf-process
   '("latexmk -pdfdvi %b" "latexmk -pdfdvi %b"))
  (setq org-export-with-sub-superscripts nil)
  (require 'ob-ditaa)
#+end_src
** export-generic の設定

   うまく使えていないので, 読み込みだけして保留...

#+begin_src emacs-lisp
  ;; (my:not-locate-library org-export-generic "site-lisp/org-mode/contrib/lisp")
  ;; (require 'org-export-generic)
  ;; (org-set-generic-type
  ;;  "Markdown"
  ;;  '(
  ;;    :file-suffix ".md"
  ;;                 :key-binding ?m
  ;;                 :title-format "%s\n"
  ;;                 :title-suffix ?=
  ;;                 :body-header-section-numbers t
  ;;                 :body-header-section-number-format "%s) "
  ;;                 :body-section-header-prefix  ("\n# " "\n## " "\n### " "\n#### " "\n##### ")
  ;;                 :body-section-header-format  "%s"
  ;;                 :body-section-header-suffix "\n"
  ;;                 :todo-keywords-export t
  ;;                 :body-line-format "  %s\n"
  ;;                 :body-tags-export    t
  ;;                 :body-tags-prefix    " <tags>"
  ;;                 :body-tags-suffix    "</tags>\n"
  ;;                 ;;:body-section-prefix   "<secprefix>\n"
  ;;                 ;;:body-section-suffix   "</secsuffix>\n"
  ;;                 :body-line-export-preformated    t
  ;;                 :body-line-fixed-prefix  "<pre>\n"
  ;;                 :body-line-fixed-suffix  "\n</pre>\n"
  ;;                 :body-line-fixed-format  "%s\n"
  ;;                 :body-list-prefix    "\n"
  ;;                 :body-list-suffix    "\n"
  ;;                 :body-list-format    "  * %s\n"
  ;;                 ;;:body-number-list-prefix   "<ol>\n"
  ;;                 ;;:body-number-list-suffix   "</ol>\n"
  ;;                 ;;:body-number-list-format   "<li>%s</li>\n"
  ;;                 ;;:body-number-list-leave-number t
  ;;                 :body-list-checkbox-todo "[_] "
  ;;                 :body-list-checkbox-todo-end ""
  ;;                 :body-list-checkbox-done "[X] "
  ;;                 :body-list-checkbox-done-end ""
  ;;                 :body-line-format    "%s"
  ;;                 :body-line-wrap  75
  ;;                 :body-text-prefix    ""
  ;;                 :body-text-suffix    ""
  ;;                 ))


#+end_src
