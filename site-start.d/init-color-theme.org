# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
# init-color-theme.org
#+begin_quote
#
# Copyright(C) Youhei SASAKI All rights reserved.
# $Lastupdate: 2011/11/28 13:14:35$
#
# Author: Youhei SASAKI <uwabami@gfd-dennou.org>
# License: GPL-3+
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#+end_quote
#Code:
#+SETUPFILE: ~/.emacs.d/template/org/level-2.org
#+INCLUDE: ~/.emacs.d/template/org/menu-level-2.org
#+TITLE: 02. color-theme の設定
#Code:

** 256 色表示のための設定

ansi-color の方が良いのかな...

#+begin_src emacs-lisp
(defun terminal-init-screen ()
  "Terminal initialization function for screen"
  (load "term/xterm")
  (xterm-register-default-colors)
  (tty-set-up-initial-frame-faces)
  )
#+end_src
** 色の設定 -> color-theme で.
#+begin_src emacs-lisp
  (my:not-locate-library color-theme-autoloads "site-lisp/color-theme-6.6.0")
  (add-to-load-path "site-lisp/color-theme-darkpastel")
  (setq color-theme-load-all-themes nil)
  (setq color-theme-libraries nil)
  (require 'color-theme-autoloads)
  (eval-after-load "color-theme-autoloads"
    '(progn
      (color-theme-initialize)
      (require 'color-theme-darkpastel)
      ))
  (color-theme-darkpastel)
#+end_src
** space, tab を色分け表示
#+begin_src emacs-lisp
  (defface my-face-r-1 '((t (:background "gray10"))) nil)
  (defface my-face-b-1 '((t (:background "gray"))) nil)
  (defface my-face-b-2 '((t (:background "gray50"))) nil)
  (defface my-face-u-1 '((t (:foreground "SteelBlue" :underline t))) nil)
  (defvar my-face-r-1 'my-face-r-1)
  (defvar my-face-b-1 'my-face-b-1)
  (defvar my-face-b-2 'my-face-b-2)
  (defvar my-face-u-1 'my-face-u-1)
  (defadvice font-lock-mode (before my-font-lock-mode ())
    (font-lock-add-keywords
     major-mode
     '(("\t" 0 my-face-b-2 append)
       ("　" 0 my-face-b-1 append)
       ("[ \t]+$" 0 my-face-u-1 append)
       ;;("[\r]*\n" 0 my-face-r-1 append)
       )))
  (ad-enable-advice 'font-lock-mode 'before 'my-font-lock-mode)
  (ad-activate 'font-lock-mode)
#+end_src

