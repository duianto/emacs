# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# License: Expat
#
#+TITLE: [[file:el-get_config.org][el-get での package の install]]
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+DATE: 2014-11-13 22:56:56
#+SETUPFILE: ./export-config.org
* 始めに
  [[http://tapoueh.org/emacs/el-get.html][el-get]] [fn:1] で必要なパッケージを追加インストールします.
  el-get の install 自体は =~/.emacs.d/init.el= ([[file:~/.emacs.d/EmacsBasic.html][解説]]) で行なっているので,
  ここでは実際のパッケージの install を記述しておきます.
  #+BEGIN_SRC emacs-lisp
    (require 'el-get nil 'noerror)
  #+END_SRC
* local recipe の定義 [0/1]
  el-get で定義されていない recipe を定義したり, 既存の recipe を上書きしたり.
  とりあえず =package.el= から =marmalade= と =SC= を削除する(使わないし, 繋らないこと多いし).
  - [ ] もっと良い方法無いの?
  #+BEGIN_SRC emacs-lisp
    (setq
     el-get-sources
     '(
       (:name cp5022x
              :type github
              :shallow t
              :pkgname "awasira/cp5022x.el")
       (:name elscreen
              :type github
              :shallow t
              :pkgname "emacs-jp/elscreen")
;;       (:name yaicomplete
;;              :type http
;;              :url "https://raw.githubusercontent.com/tarao/elisp/master/yaicomplete.el"
;;              :autloads nil
;;              )
       (:name package
              :type http
              :url "http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el"
              :shallow t
              :features package
              :post-init
              (progn
                (let ((old-package-user-dir
                       (expand-file-name
                        (convert-standard-filename
                         (concat (file-name-as-directory
                                  default-directory)
                                 "elpa")))))
                  (when (file-directory-p old-package-user-dir)
                    (add-to-list 'package-directory-list old-package-user-dir)))
                (setq package-archives (bound-and-true-p package-archives))
                (mapc
                 (lambda (pa)
                   (add-to-list 'package-archives pa 'append))
                 '(("ELPA" . "http://tromey.com/elpa/")
                   ("melpa" . "http://melpa.org/packages/")
                   ("gnu" . "http://elpa.gnu.org/packages/")))))
       ))
  #+END_SRC
* el-get で定義されているレシピから install するパッケージ
  #+BEGIN_SRC emacs-lisp
    (setq
     my:el-get-packages
     '("el-get"
       "exec-path-from-shell"
;;       "zlc"
       ))
  #+END_SRC
* 環境依存するパッケージの定義
** Emacs <= 23
   #+BEGIN_SRC emacs-lisp
     (when (<= emacs-major-version 23)
       (setq my:el-get-packages
             (append
              my:el-get-packages
              '("cl-lib")
              ))
       )
   #+END_SRC
** Theme
   自作のテーマを使用中
   #+BEGIN_SRC emacs-lisp
     (when (>= emacs-major-version 24)
       (setq el-get-sources
             (append
              el-get-sources
              '(
                (:name darkpastel-theme
                       :type github
                       :pkgname "uwabami/darkpastel-theme"
                       :prepare (add-to-list 'custom-theme-load-path default-directory)
                       )
                )))
       )
   #+END_SRC
** id-manager
   #+BEGIN_SRC emacs-lisp
     (when (ignore-errors (file-exists-p (concat (getenv "HOME") "/.gnupg/idm-db.gpg")))
       (setq el-get-sources
             (append
              el-get-sources
              '(
                (:name id-manager
                       :type github
                       :pkgname "kiwanami/emacs-id-manager")
                )))
       )
   #+END_SRC
** DDSKK
   #+BEGIN_SRC emacs-lisp
     (unless (locate-library "skk-sticky")
       (setq el-get-sources
             (append
              el-get-sources
              '(
                (:name ddskk_debian
                       :type git
                       :url "https://anonscm.debian.org/git/collab-maint/ddskk.git"
                       :autoloads nil
                       :info "doc/skk.info"
                       :features ("skk-setup")
                       :build `((,el-get-emacs "-batch" "-q" "-no-site-file" "-l" "SKK-MK" "-f" "SKK-MK-compile")
                                (,el-get-emacs "-batch" "-q" "-no-site-file" "-l" "SKK-MK" "-f" "SKK-MK-compile-info")
                                ("mv" "skk-setup.el.in" "skk-setup.el"))
                       ))))
       )
   #+END_SRC
** MUA:: Wanderlust 関連
   #+BEGIN_SRC emacs-lisp
     (when (and (locate-library "wl")
                (file-exists-p (concat user-emacs-directory ".wl-use")))
       (progn
         (setq el-get-sources
               (append
                el-get-sources
                '(
                  (:name google-contacts-wl
                         :type github
                         :depends google-contacts
                         :pkgname "uwabami/google-contacts-wl"
                         )
                  (:name elscreen-wl
                         :type github
                         :depends elscreen
                         :pkgname "syohex/emacs-elscreen-wl"
                         )
                  ;; (:name mhc
                  ;;        :type github
                  ;;        :pkgname "yoshinari-nomura/mhc"
                  ;;        :depends (calfw)
                  ;;        :prepare (add-to-list 'load-path (concat default-directory "emacs"))
                  ;;        )
                  )))
         (unless (locate-library "c-sig")
           (setq el-get-sources
                 (append
                  el-get-sources
                  '(
                    (:name c-sig
                           :description "insert custimizable signature"
                           :type git
                           :url "https://anonscm.debian.org/git/collab-maint/c-sig.git"
                           :autoloads nil)
                    ))))
         (unless (locate-library "rail")
           (setq el-get-sources
                 (append
                  el-get-sources
                  '(
                    (:name rail
                           :type github
                           :pkgname "uwabami/rail"
                           :autoloads nil
                           :build `(("make" ,(concat " EMACS=" el-get-emacs)))
                           )
                    ))))
         (setq my:el-get-packages
               (append
                my:el-get-packages
                '("offlineimap")
                ))
         ))
   #+END_SRC
** TeX 関連
   #+BEGIN_SRC emacs-lisp
     (when (and (and (ignore-errors (el-get-executable-find "platex"))
                     (ignore-errors (el-get-executable-find "latexmk")))
                (locate-library "auctex"))
       (progn
         (setq el-get-sources
               (append
                el-get-sources
                '(
                  (:name auctex-latexmk
                         :type github
                         :pkgname "tom-tan/auctex-latexmk"))))
         ;; (setq my:el-get-packages
         ;;       (append
         ;;        my:el-get-packages
         ;;        '("zotelo")))
         ))
   #+END_SRC
* 実際のインストール作業
  #+BEGIN_SRC emacs-lisp
    (setq my:el-get-packages
          (append
           my:el-get-packages
           (loop for src in el-get-sources collect (el-get-source-name src))))
    (el-get 'sync my:el-get-packages)
  #+END_SRC
* Footnotes

[fn:1] el-get: http://tapoueh.org/emacs/el-get.html
