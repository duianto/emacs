# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# License: Expat
#
#+TITLE: org-modeの設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+DATE: 2014-11-20 16:21:11
#+SETUPFILE: ./export-config.org

* 始めに
  多機能すぎて, 御託宣が書けません.
  もはや org-mode が無いと生きていけない体になってしまいました.
* 基本設定
** キーバインド
   =org-capture=,  =org-export-icalendar-combine-agenda-files=, =org-agenda=.
   =org-capture= は changelog memo [fn:1] のキーバインドにしている.
   #+BEGIN_SRC emacs-lisp
   (define-key global-map (kbd "C-x m") 'org-capture)
   ;; (define-key global-map (kbd "C-c 1") 'org-export-icalendar-combine-agenda-files)
   (define-key global-map (kbd "C-c a") 'org-agenda)
   #+END_SRC
** auto-mode-alist
   拡張子が =.org=, もしくは =.howm= なら自動的に =org-mode= に
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
   (add-to-list 'auto-mode-alist '("\\.howm$" . org-mode))
   #+END_SRC
** 保存先の設定
   デフォルトで ownCloud に保存するように.
   #+BEGIN_SRC emacs-lisp
   (setq org-directory (concat (file-name-as-directory (getenv "HOME")) "ownCloud/org/"))
   (setq org-default-notes-file (concat org-directory "schedule.org"))
   #+END_SRC
** link を return で追う
   URL だけじゃなくて Wanderlust のメールなども追跡できる.
   #+BEGIN_SRC emacs-lisp
   (setq org-return-follows-link t)
   #+END_SRC
** 時刻のフォーマット
   #+BEGIN_SRC emacs-lisp
   (setq org-display-custom-times "<%Y-%m-%d %H:%M:%S>")
   (setq org-time-stamp-custom-formats "<%Y-%m-%d %H:%M:%S>")
   #+END_SRC
** timestamp の変更
   #+BEGIN_SRC emacs-lisp
     (defun my:org-timestamp-hook ()
       "Change `time-stamp-start' in org-mode"
       (set (make-local-variable 'time-stamp-start) "#\\+DATE: 2")
       (set (make-local-variable 'time-stamp-end)   "\$")
       )
     (add-hook 'org-mode-hook 'my:org-timestamp-hook)
   #+END_SRC
** ファイルを開いた時は畳んだ状態で表示
   #+BEGIN_SRC emacs-lisp
   (setq org-startup-folded t)
   #+END_SRC
** 表示を打ち切る
   #+BEGIN_SRC emacs-lisp
   (setq org-startup-truncated t)
   #+END_SRC
** font-lock を有効化
   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-mode-hook 'turn-on-font-lock)
   #+END_SRC
** アプリケーションの関連付け
   #+BEGIN_SRC emacs-lisp
   ;; (cond
   ;;  (darwin-p
   ;;   (setq org-file-apps-defaults-macosx nil)
   ;;   (setq org-file-apps-defaults-macosx '((t . "open '%s'")))
   ;;   (setq org-file-apps org-file-apps-defaults-macosx)
   ;;   )
   ;;  (nt-p
   ;;   ;; 良く知らない fiber とか使うん?
   ;;   ;; (setq org-file-apps-defaults-windowsnt nil)
   ;;   ;; (setq org-file-apps-defaults-windowsnt '((t . "open '%s'")))
   ;;   ;; (setq org-file-apps org-file-apps-defaults-windowsnt)
   ;;   )
   ;;  (t
   ;;   (setq org-file-apps-defaults-gnu nil)
   ;;   (setq org-file-apps-defaults-gnu '((t . "xdg-open '%s'")))
   ;;   (setq org-file-apps org-file-apps-defaults-gnu)
   ;;   )
   ;;  )
   #+END_SRC
** 日付表記
   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-mode-hook
             (lambda ()
               (set (make-local-variable 'system-time-locale) "C")))
   #+END_SRC
* LaTeX Export
  pLaTeX/upLaTeX/XeLaTeX/LuaLaTeX を使いわける + 日本語も通るようにじたばた.
  内容はほぼ [fn:2] のまま.
** 読み込み
   #+BEGIN_SRC emacs-lisp
   (require 'ox-latex)
   (require 'ox-beamer)
   #+END_SRC
** export 時のエンコーディング
   #+BEGIN_SRC emacs-lisp
   (setq org-export-coding-system nil)
   #+END_SRC
** 余計な空白の削除
   #+BEGIN_QUOTE
   upTeX以外のTeXやHTMLは，日本語の途中で改行があると、
   それを空白とみなしてしまうので、それを除去するようにする。
   ここでは単純に、U+2000
   以降の文字同士が改行で分割されていた場合は改行を削除する関数に例を示す。
   #+END_QUOTE
   とのことで, これに従う.
   #+BEGIN_SRC emacs-lisp
     (defun my:remove-org-newlines-at-cjk-text (&optional _mode)
       "先頭が '*', '#', '|' でなく，改行の前後が日本の文字の場合はその改行を除去する．"
       (interactive)
       (goto-char (point-min))
       (while (re-search-forward "^\\([^|#*\n].+\\)\\(.\\)\n *\\(.\\)" nil t)
         (if (and (> (string-to-char (match-string 2)) #x2000)
                  (> (string-to-char (match-string 3)) #x2000))
             (replace-match "\\1\\2\\3"))
         (goto-char (point-at-bol))))

     (eval-after-load "ox"
         '(progn
            (add-hook 'org-export-before-processing-hook
                      'my:remove-org-newlines-at-cjk-text)))
   #+END_SRC
** class の設定
   #+BEGIN_SRC emacs-lisp
     (setq org-latex-classes
           '(
             ("ltjsarticle"
              "\\documentclass{ltjsarticle}
     \\usepackage[ipaex]{luatexja-preset}
     \\usepackage{luatexja-otf}
     \\usepackage{graphicx}
     \\usepackage[pdfencoding=auto]{hyperref}
     [NO-DEFAULT-PACKAGES]
     [NO-PACKAGES]
     [EXTRA]"
              ("\\section{%s}" . "\\section*{%s}")
              ("\\subsection{%s}" . "\\subsection*{%s}")
              ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
              ("\\paragraph{%s}" . "\\paragraph*{%s}")
              ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
             ("ltjsbook"
              "\\documentclass{ltjsbook}
     \\usepackage[ipaex]{luatexja-preset}
     \\usepackage{luatexja-otf}
     \\usepackage{graphicx}
     \\usepackage[pdfencoding=auto]{hyperref}
     [NO-DEFAULT-PACKAGES]
     [NO-PACKAGES]
     [EXTRA]"
              ("\\part{%s}" . "\\part*{%s}")
              ("\\chapter{%s}" . "\\chapter*{%s}")
              ("\\section{%s}" . "\\section*{%s}")
              ("\\subsection{%s}" . "\\subsection*{%s}")
              ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
              ("\\paragraph{%s}" . "\\paragraph*{%s}"))
             ("jsarticle"
              "\\documentclass[dvipdfmx,papersize]{jsarticle}
     \\usepackage[dvipdfmx]{graphicx}
     \\usepackage{url}
     \\usepackage{atbegshi}
     \\AtBeginShipoutFirst{\\special{pdf:tounicode EUC-UCS2}}
     \\usepackage[dvipdfmx,setpagesize=false]{hyperref}
     [NO-DEFAULT-PACKAGES]
     [NO-PACKAGES]
     [EXTRA]"
              ("\\section{%s}" . "\\section*{%s}")
              ("\\subsection{%s}" . "\\subsection*{%s}")
              ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
              ("\\paragraph{%s}" . "\\paragraph*{%s}")
              ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
             ("jsbook"
              "\\documentclass[dvipdfmx,papersize]{jsbook}
     \\usepackage[dvipdfmx]{graphicx}
     \\usepackage{url}
     \\usepackage{atbegshi}
     \\AtBeginShipoutFirst{\\special{pdf:tounicode EUC-UCS2}}
     \\usepackage[dvipdfmx,setpagesize=false]{hyperref}
     [NO-DEFAULT-PACKAGES]
     [NO-PACKAGES]
     [EXTRA]"
              ("\\part{%s}" . "\\part*{%s}")
              ("\\chapter{%s}" . "\\chapter*{%s}")
              ("\\section{%s}" . "\\section*{%s}")
              ("\\subsection{%s}" . "\\subsection*{%s}")
              ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
              ("\\paragraph{%s}" . "\\paragraph*{%s}"))
             ))
   #+END_SRC
** beamer の設定
   常に =fragile= で使用
   #+BEGIN_SRC emacs-lisp
   (setq org-beamer-frame-default-options "fragile")
   #+END_SRC
** 強調等の変換
   #+BEGIN_SRC emacs-lisp
   (setq org-export-latex-emphasis-alist
     '(
        ("*" "{\\bfseries{%s}}" nil)
        ("/" "{\\emph{%s}}" nil)
        ("_" "\\underline{%s}" nil)
        ("+" "\\st{%s}" nil)
        ("=" "\\protectedtexttt" nil)
        ("~" "\\verb" t)
        ))
   #+END_SRC
* footnote

* Footnotes

[fn:1] 横着プログラミング 第1回: Unixのメモ技術: [[http://0xcc.net/unimag/1/]]

[fn:2] Emacs - org-mode で日本語LaTeXを出力する方法 - Qiita: [[http://qiita.com/kawabata@github/items/1b56ec8284942ff2646b]]
