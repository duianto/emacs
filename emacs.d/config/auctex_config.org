# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#
# Copyright(C) Youhei SASAKI All rights reserved.
# License: Expat
#
#+TITLE: AUCTeX の設定
#+AUTHOR: Youhei SASAKI
#+EMAIL: uwabami@gfd-dennou.org
#+DATE: 2014-01-05 08:50:44
#+SETUPFILE: ./export-config.org

* 始めに
  TeX 編集用のモードとしては YaTeX と AUCTeX がありますが,
  YaTeX の font-lock が遅いことから AUCTeX を使うようになりました.
* 読み込み
  Debian パッケージの場合, =/etc/emacs/site-start.d/50auctex.el= において
  既に =auctex.el= と =preview-latex.el= が load されているため
  特に読み込みの設定は必要無い.
  Debian 以外の場合に, =auctex.el= と =preview-latex= を読み込む.
  #+BEGIN_SRC emacs-lisp
    (unless (file-exists-p "/etc/emacs/site-start.d/50auctex.el")
      (load "auctex.el" nil t)
      (load "preview-latex" nil t))
  #+END_SRC
* source parse
  =auto= の位置を変更.
  デフォルトではカレントディレクトリに =auto= が作成されて鬱陶しいので
  =~/.emacs.d/tmp/auctex= 以下に置くことにする.
    #+BEGIN_SRC emacs-lisp
    (setq TeX-auto-save t)
    (setq TeX-auto-local
          (expand-file-name
           (concat my:user-emacs-temporary-directory "auctex/auto")))
    (setq TeX-style-local
          (expand-file-name
           (concat my:user-emacs-temporary-directory "auctex/style")))
    (setq TeX-parse-self t)
    (setq TeX-auto-untabify t)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  #+END_SRC
* 日本語TeX用の設定
  =japanese-latex-mode= を指定すると, =tex-jp.el= が読み込まれる.

  =tex-jp.el= では =pTeX= や =jTeX= 用に, 文字コードの自動判定が行なわれ
  たりするなど, なかなか良い感じに機能拡張が行なわれているものの,
  新しいTeX 環境(具体的には TeXLive >= 2012) での変更に追従できていない? [fn:1]
** 文字コード判定
   =japanese-latex-mode= には =%(kanjiopt)= があって,
   buffer の文字コードに合わせて =platex= 実行時に =-kanji=euc= 等が追加される.
   同様の処理を =latex-mode= でも行なうために文字コード判定用の関数を定義しておく.

   [[http://git.savannah.gnu.org/cgit/auctex.git/tree/tex-jp.el][auctex.git - GNU AUCTeX]]
   では =TeX-master= について判定する処理が入っているけれど,
   自分の用途では必要ないのでもう少しシンプルに(手抜き).
   #+BEGIN_SRC emacs-lisp
     (defun my:coding-get (coding-system)
       "Convert buffer-file-coding-syetem to pTeX mnemonic.(origin: tex-jp.el)"
       (let ((base (coding-system-base coding-system)))
         (cdr (assq base
                    '((japanese-iso-8bit . "euc")
                      (iso-2022-jp . "jis")
                      (japanese-shift-jis . "sjis")
                      (utf-8 . "utf8"))))))
     (eval-after-load "tex"
       '(progn
          (setq TeX-expand-list
                (append
                 TeX-expand-list
                 '(("%(kanji)"
                    (lambda ()
                      (let* ((str (my:coding-get buffer-file-coding-system)))
                        (if str
                            (format " -kanji=%s " str) ""))
                      )))))))
   #+END_SRC
** TeX-engine の設定
   =latex-mode= で, =C-c LaTeX= の際に
   実際に実行されるコマンドの設定.
   以下では常に =ep(La)TeX= を使うようにしている.
   #+BEGIN_SRC emacs-lisp
     (cond
      ((executable-find "ptex2pdf")
       (setq TeX-engine-alist
             '((ptex "pTeX"
                     "ptex2pdf -e -ot '%(kanji)%`%S%(PDFout)%(mode)%''"
                     "ptex2pdf -e -l -ot '%(kanji)%`%S%(PDFout)%(mode)%''"
                     "eptex")
               (uptex "upTeX"
                      "ptex2pdf -u -ot '%(kanji)%`%S%(PDFout)%(mode)%''"
                      "ptex2pdf -u -l -ot '%(kanji)%`%S%(PDFout)%(mode)%''"
                      "euptex"))))
      (t
       (setq TeX-engine-alist
             '((ptex
                "pTeX"
                "ptex %(kanji)%`%S%(PDFout)%(mode)%"
                "platex %(kanji)%`%S%(PDFout)%(mode)%"
                "eptex")
               (uptex
                "upTeX"
                "uptex %(kanji)%`%S%(PDFout)%(mode)%"
                "uplatex %(kanji)%`%S%(PDFout)%(mode)%"
                ))))
      )
     (setq TeX-engine 'ptex)
   #+END_SRC
** TeX-command の追加
   必要なコマンドの追加. そのうち =latexmk= の設定も追加する予定
   #+BEGIN_SRC emacs-lisp
     (setq-default japanese-TeX-command-list nil)
     (add-hook 'LaTeX-mode-hook
               (function (lambda ()
                           (add-to-list 'TeX-command-list
                                        '("ptex2pdf" "ptex2pdf -l -u -ot '%(kanji) %S %(mode)' %t"
                                          TeX-run-TeX nil (latex-mode) :help "Run platex (ptex2pdf, eplatex mode)"))
                           (add-to-list 'TeX-command-list
                                        '("pTeX+PS2PDF" "platex %(kanji) %S %(mode) %t && dvips -Ppdf -z -f %d | convkmk -u > %f && ps2pdfwr %f"
                                          TeX-run-TeX nil (latex-mode) :help "Run platex, dvips, ps2pdfwr"))
                           ))
               )
   #+END_SRC
** japanese-latex-mode 用の細工
   =TeX-engine-alist-builtin= において =ptex= が定義されているため,
   =ptex2pdf= が =C-c= で実行されない.
   ここではdefault値を上書きすることで対応.
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "tex-jp"
       '(progn
          (setq japanese-LaTeX-default-style "jsarticle")
          (cond
           ((executable-find "ptex2pdf")
            (setcar (cddr (assoc 'ptex TeX-engine-alist-builtin))
                    "ptex2pdf -e -ot '%(kanjiopt)%`%S%(PDFout)%(mode)%''")
            (setcdr (cddr (assoc 'ptex TeX-engine-alist-builtin))
                    "ptex2pdf -e -l -ot '%(kanjiopt)%`%S%(PDFout)%(mode)%''")
            (setcar (cddr (assoc 'uptex TeX-engine-alist-builtin))
                    "ptex2pdf -u -ot '%(kanjiopt)%`%S%(PDFout)%(mode)%''")
            (setcdr (cddr (assoc 'uptex TeX-engine-alist-builtin))
                    "ptex2pdf -u -l -ot '%(kanjiopt)%`%S%(PDFout)%(mode)%''")
            )
           (t
            (setcar (cddr (assoc 'ptex TeX-engine-alist-builtin))
                    "ptex %(kanjiopt)%`%S%(PDFout)%(mode)%")
            (setcdr (cddr (assoc 'ptex TeX-engine-alist-builtin))
                    "platex %(kanjiopt)%`%S%(PDFout)%(mode)%")
            (setcar (cddr (assoc 'uptex TeX-engine-alist-builtin))
                    "uptex %(kanji)%`%S%(PDFout)%(mode)%")
            (setcdr (cddr (assoc 'uptex TeX-engine-alist-builtin))
                    "uplatex %(kanji)%`%S%(PDFout)%(mode)%")
            )
           )
          (setq LaTeX-command-style
                '(("\\`u[jt]\\(article\\|report\\|book\\)\\'\\|\\`uplatex\\'"
                   "%(PDF)ptex2pdf -u -l -ot '%(kanjiopt)%S%(PDFout)'")
                  ("\\`[jt]s?\\(article\\|report\\|book\\)\\'"
                   "%(PDF)ptex2pdf -e -l -ot '%(kanjiopt)%S%(PDFout)'")
                  ("\\`j-\\(article\\|report\\|book\\)\\'"
                   "%(PDF)jlatex %(kanjiopt)%S%(PDFout)"))
                )
          ))
   #+END_SRC
* Viewer
  =Evince= 自体は =TeX-view-program-list-builtin= で
  既に定義されているが, =tex-jp.el= において
  =TeX-view-program-list= の ='saved-value= の有無で設定が上書きされるので
  ここでも定義しておく.
  Mac 用に =Skim= の設定をしておいた方が良いのかもしれないが試していない.
  #+BEGIN_SRC emacs-lisp
    (setq TeX-view-program-list
          '(("Evince" TeX-evince-sync-view)))
  #+END_SRC
  環境で場合分け(Windows は知らない).
  #+BEGIN_SRC emacs-lisp
    (cond
     (darwin-p
      (setq TeX-view-program-selection '((output-pdf "Preview.app"))))
     (t
      (setq TeX-view-program-selection '((output-pdf "Evince"))))
     )
  #+END_SRC
* hook の追加
  =TeX-PDF-mode= を有効にするために拡張子を追加しておく.
  #+BEGIN_SRC emacs-lisp
    (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
    (setq TeX-command-output-list
          '(("ptex2pdf" ("pdf"))))
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  #+END_SRC
* 見た目(preview-latex?)
** Windows System 時のフォントサイズ制御
   フォントサイズの変更を無効化
   #+BEGIN_SRC emacs-lisp
      (setq font-latex-fontify-sectioning 1.0)
   #+END_SRC
   上付き, 下付きの無効化
   #+BEGIN_SRC emacs-lisp
      (setq font-latex-fontify-script nil)
   #+END_SRC
* SyncTeX
  #+BEGIN_SRC emacs-lisp
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server t)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  #+END_SRC
* RefTeX
  #+BEGIN_SRC emacs-lisp
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t)
  #+END_SRC

* Footnotes

[fn:1] というより, 今となってはカスタマイズ性がよろしくない, 気がする. どうなっているのが良いのだろう?
