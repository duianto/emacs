#+TITLE: Emacs の設定
# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil; lexical-binding: t -*-
#+DATE: 2019-01-10 16:01:10
#+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
* はじめに
  ここでは，私の Emacs の設定についてまとめています．

  #+HTML: <amp-img src="https://travis-ci.org/uwabami/emacs.svg?branch=master" width="72px" height="20px" layout=fixed class="travis_badge"></amp-img>
  #+HTML: <amp-img src="https://img.shields.io/badge/License-GPLv3-blue.svg" width="92px" height="20px" layout="fixed"></amp-img>
  #+HTML: <a href="https://github.com/uwabami/emacs"><span class="icon-github"><svg id="SVGRoot" width="20px" height="20px" version="1.1" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="m5.4144 12.761c0 0.0645-0.0742 0.11613-0.16774 0.11613-0.10645 0.01-0.18064-0.0419-0.18064-0.11613 0-0.0645 0.0742-0.11613 0.16774-0.11613 0.0968-0.01 0.18064 0.0419 0.18064 0.11613zm-1.0032-0.14516c-0.0226 0.0645 0.0419 0.13871 0.13871 0.15806 0.0839 0.0323 0.18064 0 0.2-0.0645 0.0194-0.0645-0.0419-0.13871-0.13871-0.16775-0.0839-0.0226-0.17742 0.01-0.2 0.0742zm1.4258-0.0548c-0.0935 0.0226-0.15806 0.0839-0.14838 0.15806 0.01 0.0645 0.0935 0.10645 0.19032 0.0839 0.0936-0.0226 0.15806-0.0839 0.14839-0.14838-0.01-0.0613-0.0968-0.10323-0.19033-0.0935zm2.1226-12.361c-4.4742 0-7.8968 3.3968-7.8968 7.871 0 3.5774 2.2516 6.6387 5.4677 7.7161 0.41291 0.0742 0.55807-0.18064 0.55807-0.39032 0-0.2-0.01-1.3032-0.01-1.9806 0 0-2.2581 0.48387-2.7323-0.96129 0 0-0.36774-0.93871-0.89677-1.1806 0 0-0.73871-0.50645 0.0516-0.49677 0 0 0.80323 0.0645 1.2452 0.83226 0.70645 1.2452 1.8903 0.88709 2.3516 0.67419 0.0742-0.51613 0.28387-0.87419 0.51613-1.0871-1.8032-0.2-3.6226-0.46129-3.6226-3.5645 0-0.8871 0.24516-1.3323 0.76129-1.9-0.0839-0.20968-0.35806-1.0742 0.0839-2.1903 0.6742-0.20967 2.2258 0.87097 2.2258 0.87097 0.64516-0.18064 1.3387-0.27419 2.0258-0.27419 0.68709 0 1.3806 0.0936 2.0258 0.27419 0 0 1.5516-1.0839 2.2258-0.87097 0.44193 1.1194 0.16774 1.9806 0.0839 2.1903 0.51613 0.57096 0.83226 1.0161 0.83226 1.9 0 3.1129-1.9 3.3613-3.7032 3.5645 0.29678 0.25484 0.54839 0.73871 0.54839 1.4968 0 1.0871-0.01 2.4322-0.01 2.6968 0 0.20968 0.14839 0.46452 0.55807 0.39032 3.2258-1.071 5.4129-4.1322 5.4129-7.7097 0-4.4742-3.629-7.871-8.1032-7.871zm-4.7613 11.126c-0.0419 0.0323-0.0323 0.10646 0.0226 0.16775 0.0516 0.0516 0.12581 0.0742 0.16775 0.0323 0.0419-0.0323 0.0323-0.10645-0.0226-0.16774-0.0516-0.0516-0.12581-0.0742-0.16775-0.0323zm-0.34838-0.26129c-0.0226 0.0419 0.01 0.0935 0.0742 0.12581 0.0516 0.0323 0.11613 0.0226 0.13871-0.0226 0.0226-0.0419-0.01-0.0935-0.0742-0.12581-0.0645-0.0194-0.11613-0.01-0.13871 0.0226zm1.0452 1.1484c-0.0516 0.0419-0.0323 0.13871 0.0419 0.2 0.0742 0.0742 0.16775 0.0839 0.20968 0.0323 0.0419-0.0419 0.0226-0.13871-0.0419-0.2-0.071-0.0742-0.16775-0.0839-0.20968-0.0323zm-0.36774-0.47419c-0.0516 0.0323-0.0516 0.11613 0 0.19032 0.0516 0.0742 0.13871 0.10645 0.18064 0.0742 0.0516-0.0419 0.0516-0.1258 0-0.2-0.0452-0.0742-0.12903-0.10645-0.18064-0.0645z" fill="currentColor" stroke-width=".032258"/></svg></span></a>

  基本方針は以下の通り:
** Debian パッケージがインストールされているならば，それを優先する
   :[[https://en.wikipedia.org/wiki/Eating_your_own_dog_food][Eating your own dog food - Wikipedia]]

   Emacsに関連するDebianパッケージを幾つかメンテナンスしているので，
   可能な限りDebianパッケージを使うことにしています.
** Emacs のパッケージ(=package.el=) + [[https://github.com/quelpa/quelpa][quelpa]] + [[https://github.com/conao3/leaf.el][leaf.el]] を使う
   以前は [[https://github.com/jwiegley/use-package][use-package]] + [[https://framagit.org/steckerhalter/quelpa-use-package][quelpa-use-package]] を利用していましたが,
   設定を [[https://github.com/conao3/leaf.el][leaf.el]] で書く様になってから,
   - elpa, melpa にあるパッケージ は =package.el= で.
   - github などからは [[https://github.com/quelpa/quelpa][quelpa]] で
   となりました.
** 設定は [[http://orgmode.org/][Org mode]] で書きたい
   以前こんなブログ記事を書きました: [[http://uwabami.junkhub.org/log/20111213.html#p01][Emacsの設定ファイルをorgで書く]]

   というわけで，設定は [[http://orgmode.org/worg/org-contrib/babel/intro.html][Org Babel]] で書いています．
   本ファイル(=README.org=) から，
   Makefile 内の以下のスクリプトで =~/init.el= を生成し，byte-compile します．
   #+BEGIN_SRC makefile-gmake :tangle no
init.el: README.org
	$(EMACS) -q --batch --eval \
		 "(progn \
		    (require 'ob-tangle) \
		    (org-babel-tangle-file \"$<\" \"$@\" \"emacs-lisp\"))"
init.elc: init.el
	$(EMACS) -q -l $< -batch -f batch-byte-compile $<
   #+END_SRC
* デバッグ
  #+BEGIN_SRC emacs-lisp
(setq debug-on-error  t
      init-file-debug t)
  #+END_SRC
* ディレクトリ構成
  分割した設定ファイル群やパッケージで install したパッケージ
  の置き場所は =user-emacs-directory= 以下にまとめています．

  試行錯誤の結果，ディレクトリ構成は以下のようにしました:
  #+BEGIN_EXAMPLE
    ~/.emacs.d/
     |-- Makefile    ←  byte-compile 用の rule
     |-- README.org  ←  本ファイル．`org-babel-tangle' で init.el を生成
     |-- modules/    ←  git submodules. 今の所 leaf.el のみ
     |-- pkg/
         |-- elpa/   ←  leaf → package.el で導入したパッケージが置かれる場所
         `-- quelpa/ ←  leaf → quelpa で導入したパッケージが置かれる場所
     |-- share/      ←  (基本的に)参照するだけの資源置き場所
     `-- tmp/        ←  一次ファイルの置き場所
  #+END_EXAMPLE
  上記ディレクトリ構成を設定ファイルで使用するために
  ディレクトリ配置を宣言/ディレクトリを作成しておきます．
  #+BEGIN_SRC emacs-lisp
(when load-file-name
  (setq user-emacs-directory (file-name-directory load-file-name)))
(defconst my:d:share
  (expand-file-name "share/" user-emacs-directory))
(unless (file-directory-p my:d:share)
  (make-directory my:d:share))
(defconst my:d:tmp
  (expand-file-name "tmp/" user-emacs-directory))
(unless (file-directory-p my:d:tmp)
  (make-directory my:d:tmp))
  #+END_SRC
  ついでに，
  =custom-set-variables= は別ファイルに出力，終了時に削除するようにしています．
  #+BEGIN_SRC emacs-lisp
(setq custom-file (concat my:d:tmp "custom.el"))
(add-hook 'kill-emacs-hook
          (lambda ()
            (if (file-exists-p custom-file)
                (delete-file custom-file))))
  #+END_SRC
  +init.elが汚れる気がしてあまり好きではないのですが...皆さん気にしてないんですかね+
* Package 関連: [[https://github.com/conao3/leaf.el][leaf.el]], =package.el=, [[https://github.com/quelpa/quelpa][quelpa]]
  [[https://github.com/conao3/leaf.el][leaf.el]] のおかげでとてもキレイに設定が書けるようになりました.
** [[https://github.com/conao3/leaf.el][leaf.el]]
   #+BEGIN_SRC emacs-lisp
(add-to-list 'load-path
             (concat user-emacs-directory "modules/leaf.el"))
(require 'leaf nil 'nomessage)
(leaf leaf
  :config
  (setq leaf-backend/:ensure 'package))
   #+END_SRC
** =package.el=
   パッケージは基本的に =pacakge.el= で導入するので、先ずはその設定.
   #+BEGIN_SRC emacs-lisp
(setq url-http-attempt-keepalives nil)
(leaf package
  :config
  (setq package-enable-at-startup t
        package-user-dir (expand-file-name "pkg/elpa" user-emacs-directory)
        package-gnupghome-dir (expand-file-name ".gnupg" (getenv "HOME")))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org"   . "https://orgmode.org/elpa/") t)
  (package-initialize))
   #+END_SRC
** [[https://github.com/quelpa/quelpa][quelpa]]
   melpa に登録されていないパッケージや自作の elisp 等をインストールできる様に
   [[https://github.com/quelpa/quelpa][quelpa]] を使います. とはいえ、[[https://github.com/quelpa/quelpa][quelpa]] はあくまでオプションですんで,
   melpa の同期はしません.
   #+BEGIN_SRC emacs-lisp
(leaf quelpa
  :ensure t
  :init
  (setq quelpa-dir (expand-file-name "pkg/quelpa" user-emacs-directory)
        quelpa-upgrade-p nil
        quelpa-checkout-melpa-p nil
        quelpa-update-melpa-p nil
        quelpa-melpa-recipe-stores nil)
  )
   #+END_SRC
* 設定に必要となる便利パッケージ群
  基本, 読み込むだけのアレコレ
  #+BEGIN_SRC emacs-lisp
(leaf bind-key :ensure t
      :config
      (setq leaf-backend/:bind  'bind-key
            leaf-backend/:bind* 'bind-key))
(leaf s        :ensure t)
(leaf dash     :ensure t)
(leaf diminish :ensure t)
(leaf cl-lib   :ensure t)
(leaf el-x     :ensure t)
  #+END_SRC
* 独自関数
  細かい独自関数，など．
** カーソルのある位置の face を調べる関数
   わりと良く使う. 地味に便利
   #+BEGIN_SRC emacs-lisp
(defun my:describe-face-at-point ()
  (interactive)
  (message "%s" (get-char-property (point) 'face)))
   #+END_SRC
** 機能を無効化するための関数の定義
   =line-number-mode= など「有効無効をtoggleする関数」は
   慣習的に =0= 以下の数字を指定すると明示的に無効化できるので，
   =-1= を設定する関数を定義しておく.
   #+BEGIN_SRC emacs-lisp
(defun my:disable-builtin-mode (mode)
  "与えられた mode が存在するのであれば -1 をセットして無効化"
  (if (fboundp mode) (funcall mode -1)))
   #+END_SRC
** dpkg-status
   もっと良い方法がありそうなモンですが．
   #+BEGIN_SRC emacs-lisp
(defun my:dpkg-status (package)
  "Return the package status from dpkg --get-selections."
  (string-match "^ii" (shell-command-to-string (format "dpkg -l %s" package))))
   #+END_SRC
** 行末の無駄な空白/改行を削除する
   @see [[http://d.hatena.ne.jp/tototoshi/20101202/1291289625][無駄な行末の空白を削除する(Emacs Advent Calendar jp:2010)]]

   ただし, RD や Markdown だと空白行に意味があったりするので，
   必要に応じて拡張子で判断して外している．
   #+BEGIN_SRC emacs-lisp
(defvar my:delete-trailing-whitespace-exclude-suffix
  (list "\\.rd$" "\\.md$" "\\.rbt$" "\\.rab$"))
(defun my:delete-trailing-whitespace ()
  (interactive)
  (cond
   ((equal nil
           (cl-loop for pattern in my:delete-trailing-whitespace-exclude-suffix
                    thereis (string-match pattern buffer-file-name)))
    (delete-trailing-whitespace))))
(add-hook 'before-save-hook 'my:delete-trailing-whitespace)
   #+END_SRC
** 空になったファイルを尋ねずに自動削除
   ゴミが残らないし，地味に便利．
   #+BEGIN_SRC emacs-lisp
(defun my:delete-file-if-no-contents ()
  (when (and (buffer-file-name (current-buffer))
             (= (point-min) (point-max)))
    (delete-file
     (buffer-file-name (current-buffer)))))
(if (not (memq 'my:delete-file-if-no-contents after-save-hook))
    (setq after-save-hook
          (cons 'my:delete-file-if-no-contents after-save-hook)))
   #+END_SRC
** scratch を殺さない. 消したら再生成
   ...元ネタがどこだったのか忘れてしまった...
   #+BEGIN_SRC emacs-lisp
(defun my:make-scratch (&optional arg)
  (interactive)
  (progn
    ;; "*scratch*" を作成して buffer-list に放り込む
    (set-buffer (get-buffer-create "*scratch*"))
    (funcall initial-major-mode)
    (erase-buffer)
    (when (and initial-scratch-message (not inhibit-startup-message))
      (insert initial-scratch-message))
    (or arg
        (progn
          (setq arg 0)
          (switch-to-buffer "*scratch*")))
    (cond ((= arg 0) (message "*scratch* is cleared up."))
          ((= arg 1) (message "another *scratch* is created")))))

(defun my:buffer-name-list ()
  (mapcar (function buffer-name) (buffer-list)))
(add-hook 'kill-buffer-query-functions
          ;; *scratch* バッファで kill-buffer したら内容を消去するだけにする
          (function (lambda ()
                      (if (string= "*scratch*" (buffer-name))
                          (progn (my:make-scratch 0) nil)
                        t))))
(add-hook 'after-save-hook
          ;; *scratch* バッファの内容を保存したら
          ;; *scratch* バッファを新しく作る.
          (function
           (lambda ()
             (unless (member "*scratch*" (my:buffer-name-list))
               (my:make-scratch 1)))))
   #+END_SRC
** ファイル名を minibuffer におさまる様に整形
   zsh 風味
   #+BEGIN_SRC emacs-lisp
(defun my:shorten-file-path (fpath max-length)
  "Show up to `max-length' characters of a directory name `fpath' like zsh"
  (let* ((path (reverse (split-string (abbreviate-file-name fpath) "/")))
         (output "")
         ;; (top (string-join (reverse (last path 3)) "/"))
         (top (mapconcat 'identitiy (reverse (last path 3)) "/"))
         (vmax (- max-length 4 (length top)))
         (path (butlast path 3))
         )
    (while (and path
                (and (< (length output) vmax)
                     (< (length (concat "/" (car path) output)) vmax)))
      (setq output (concat "/" (car path) output))
      (setq path (cdr path)))
    ;; 省略
    (when path
      (setq output (concat "/..." output)))
    (format "%s%s" top output)
    ))
   #+END_SRC
* 環境変数の読み込み: =exec-path-from-shell=
  zsh で設定した =PATH= などの環境変数を Emacs に引き継ぐために
  [[https://github.com/purcell/exec-path-from-shell][purcell/exec-path-from-shell]] を使います．
  今の所
  - =SHELL=
  - =DEBFULLNAME=
  - =DEBEMAIL=
  - =TEXMFHOME=
  - =SKKSERVER=
  - =http_proxy=
  - =GPG_KEY_ID=
  - =GPG_AGENT_INFO=
  - =PASSWORD_STORE_DIR=
  - =PATH=
  を読み込んでいます．
  #+BEGIN_SRC emacs-lisp
(defvar my:d:password-store nil)
(leaf exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns)) (exec-path-from-shell-initialize))
  (exec-path-from-shell-copy-envs
   '("SHELL"
     "DEBFULLNAME"
     "DEBEMAIL"
     "SKKSERVER"
     "TEXMFHOME"
     "http_proxy"
     "GPG_KEY_ID"
     "GPG_AGENT_INFO"
     "PASSWORD_STORE_DIR"
     "PATH"
     ))
  (setq user-full-name (concat (getenv "DEBFULLNAME"))
        user-mail-address (concat (getenv "DEBEMAIL"))
        my:d:password-store (concat (getenv "PASSWORD_STORE_DIR") "/Emacs/" (system-name)))
  )
  #+END_SRC
* 言語の設定
  日本語, UTF-8 にしています.
  #+BEGIN_SRC emacs-lisp
(set-language-environment "Japanese")
(prefer-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-default 'buffer-file-coding-system 'utf-8)
  #+END_SRC
  その他, 機種依存文字等についての設定をアレコレ.
** cp5022x.el
   Emacs23 から内部が Unicode ベースになっています．

   しかし文字コードの変換は GNU libc の iconv をベースにしているため，
   環境によっては文字の変換がうまく行なえません．
   そこで言語設定前に =cp5022x.el= をインストールすることにしています．
   #+BEGIN_SRC emacs-lisp
(leaf cp5022x
  :ensure t
  :config
  (set-charset-priority 'ascii 'japanese-jisx0208 'latin-jisx0201
                        'katakana-jisx0201 'iso-8859-1 'unicode)
  (set-coding-system-priority 'utf-8 'euc-jp 'iso-2022-jp 'cp932)
  )
   #+END_SRC
** East Asian Ambiguos 対応
   CJK 以外の East Asian Ambiguos，絵文字も2文字幅にするようにしています．
   拙作の修正ロケールはこちら: [[https://github.com/uwabami/locale-eaw-emoji]]
   #+BEGIN_SRC emacs-lisp
(leaf locale-eaw-emoji
  :init (quelpa '(locale-eaw-emoji
                  :fetcher github
                  :repo "uwabami/locale-eaw-emoji"))
  :config
  (eaw-and-emoji-fullwidth))
   #+END_SRC
** OSの違いに起因する条件分岐
   Mac と Linux では同じ Unicode でも正規化が異なります
   (具体的には Mac のファイルシステムである HFS+ では Unicode の正規化が異なります).
   Unicode の正規化と Mac OS X 特有の事情については
   - [[http://homepage1.nifty.com/nomenclator/unicode/normalization.htm][Unicode正規化とは]]
   - [[http://www.sakito.com/2010/05/mac-os-x-normalization.html][Mac OS X におけるファイル名に関するメモ(NFC, NFD等)]]
   等が参考になるでしょう.

   日本語のファイル名を扱うことは滅多にないものの,
   たまに祟りがあるのでそれを回避するための設定をしています.

   Windows の場合はファイル名などは cp932 にしているものの,
   最近 Windows 使っていないので良く知りません(というわけで，設定を捨てました).
   +さらに，最近は Mac OS でも Emacs 使ってないから，これが正しのか良くわからない...+
   #+BEGIN_SRC emacs-lisp
(leaf ucs-normalize
  :if (eq system-type 'darwin)
  :byte-compile-vars mac-pass-control-to-system ns-command-modifier ns-alternate-modifier
  :config
  (set-file-name-coding-system 'utf-8-hfs)
  (setq locale-coding-system 'utf-8-hfs)
  ;; ついでにキーバインド: Ctrl を Mac から奪い取る
  (setq mac-pass-control-to-system t)
  ;; Cmd と Option を逆にする
  (setq ns-command-modifier 'meta)
  (setq ns-alternate-modifier 'super)
  (global-set-key [ns-drag-file] 'ns-find-file))
   #+END_SRC
* 主にEmacs本体に同梱されている拡張に関する設定
  最近ぼちぼち他の拡張も入れる様になってきた.
** 標準機能の設定
*** 表示関連
    起動時のスプラッシュ画面を表示しない
    #+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t
      inhibit-startup-message t)
    #+END_SRC
    大抵の場合ターミナル内で =-nw= として起動するし,
    メニューは触ったことないので使わないので，
    フレーム, ツールバー等を非表示にする．
    #+BEGIN_SRC emacs-lisp
(dolist (mode
         '(tool-bar-mode
           scroll-bar-mode
           menu-bar-mode
           blink-cursor-mode
           column-number-mode))
  (my:disable-builtin-mode mode))
    #+END_SRC
    ベル無効化
    #+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
    #+END_SRC
    現在行のハイライト
    #+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
    #+END_SRC
    選択リージョンに色付け
    #+BEGIN_SRC emacs-lisp
(setq transient-mark-mode t)
    #+END_SRC
    対応する括弧を強調表示
    #+BEGIN_SRC emacs-lisp
(show-paren-mode +1)
(setq show-paren-style 'mixed)
    #+END_SRC
    行番号を表示する =linum-mode= は基本使わない(必要に応じて有効にする)
    ので通常はモードラインに行番号や桁番号を表示しないようする.
    ついでに =linum-mode= を有効にした場合の桁表示を 5 桁に.
    #+BEGIN_SRC emacs-lisp
(my:disable-builtin-mode 'line-number-mode)
(setq linum-format "%5d ")
    #+END_SRC
    debug は表示しない: 必要に応じて t に変更する
    #+BEGIN_SRC emacs-lisp
(setq debug-on-error nil)
    #+END_SRC
*** 編集関連
    yes or no を y or n に
    #+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
    ファイル名の大文字小文字を区別しない(zsh風)
    #+BEGIN_SRC emacs-lisp
(setq read-file-name-completion-ignore-case t)
    #+END_SRC
    tab 幅 4, tab でのインデントはしない
    #+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
    #+END_SRC
    文字列は 72 文字で折り返し(RFC2822風味)
    #+BEGIN_SRC emacs-lisp
(setq-default fill-column 72)
(setq paragraph-start '"^\\([ 　・○<\t\n\f]\\|(?[0-9a-zA-Z]+)\\)")
(setq-default auto-fill-mode nil)
    #+END_SRC
    長い行の折り返し:
    デフォルトは折り返し有で =\C-c M-l= で toggle
    #+BEGIN_SRC emacs-lisp
(set-default 'truncate-lines nil)
(setq truncate-partial-width-windows nil)
(define-key global-map (kbd "C-c M-l") 'toggle-truncate-lines)
    #+END_SRC
    バッファ終端で newline を入れない
    #+BEGIN_SRC emacs-lisp
(setq next-line-add-newlines nil)
    #+END_SRC
    symlink は常においかける
    #+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
    #+END_SRC
    変更のあったファイルの自動再読み込み
    #+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
    #+END_SRC
    バックアップとauto-saveの作成/位置の変更:
    #+BEGIN_SRC emacs-lisp
(setq auto-save-list-file-prefix (concat my:d:tmp ".saves-")
      auto-save-default t
      auto-save-timeout 15
      auto-save-interval 60
      make-backup-files t
      backup-by-copying t ; symlink は使わない
      backup-directory-alist `(("." . ,my:d:tmp))
      auto-save-file-name-transforms `((".*" ,my:d:tmp t))
      version-control t
      kept-new-versions 5
      kept-old-versions 5
      delete-old-versions t
      delete-auto-save-files t
      )
    #+END_SRC
    Undo/Redo:
    そのうち undohist と undo-tree を試そうと思っているのですが，
    今のところ特に弄ってません． =undo-limit= は無限大にしたいのですが，どうするのかな...?
    #+BEGIN_SRC emacs-lisp
(setq undo-limit 200000
      undo-strong-limit 260000)
(savehist-mode 1)
(setq history-length t  ; t で無制限
      savehist-file (concat my:d:tmp "history"))
    #+END_SRC
** ファイル，デイレクトリ整理
   =~/.emacs.d/= 以下にファイルが転がるのがなんか嫌なので, 気がつく度に設定している.
   #+BEGIN_SRC emacs-lisp
(leaf url
  :init
  (setq url-configuration-directory (concat my:d:tmp "url")))
(leaf nsm
  :if (featurep 'nsm)
  :byte-compile-vars nsm-settings-file
  :init
  (setq nsm-settings-file (concat my:d:tmp "network-settings.data")))
  #+END_SRC
   他にもイロイロありそう．
** =recentf=: 最近使ったファイル履歴の保管
   ファイルを開く際には =ido-recentf-open= を使うので,
   結局履歴を貯める設定をしている事になっている.
   #+BEGIN_SRC emacs-lisp
(leaf recentf
  :defer t
  :init
  (add-hook 'after-init-hook 'recentf-mode)
  :config
  (defmacro my:suppressed-message (&rest body)
    "Suppress new messages temporarily in the echo area and the `*Messages*' buffer while BODY is evaluated."
    (declare (indent 0))
    (let ((message-log-max nil))
      `(with-temp-message (or (current-message) "") ,@body)))
  (setq recentf-max-saved-items 256
        recentf-save-file (expand-file-name (concat my:d:tmp "recentf"))
        recentf-auto-cleanup 'never
        recentf-exclude '(".recentf"
                          "^/tmp\\.*"
                          "^/private\\.*"
                          "^/var/folders\\.*"
                          "/TAGS$"
                          "^/home/uwabami/.mozilla/\\.*"
                          "\\.*草稿\\.*"
                          ))
  (run-with-idle-timer 30 t '(lambda ()
                               (my:suppressed-message (recentf-save-list))))
  )
   #+END_SRC
   ディレクトリの履歴も取れるので recentf-ext を入れておく
   #+BEGIN_SRC emacs-lisp
(leaf recentf-ext
  :ensure t
  :defer t
  )
   #+END_SRC
** =.elc= と =.el= の timestamp を比較し，新しい方を読み込む
   =load-prefer-newer= は Emacs >= 24.4 から．
   #+BEGIN_SRC emacs-lisp
(when (boundp 'load-prefer-newer)
  (setq load-prefer-newer t))
   #+END_SRC
** ガベージコレクションの +頻度を下げる+ 表示をしない
   message に gc が走っていることを表示しない
   #+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 8 1024 1024)
      garbage-collection-messages nil)
   #+END_SRC
   =gc-cons-threshold= はとりあえず default の設定に.
   メモリ喰いな拡張を入れている場合には, 安易に =gc-cons-threshold= を上げるのは考えものである.
   「gc が走る→大きな領域を掃除するのでその間 emacs が止まる」という事を頻繁に経験することになるだろう.
** =abbrev=: 略語展開
   #+BEGIN_SRC emacs-lisp
(leaf abbrev
  :diminish abbrev-mode
  :config
  (setq abbrev-file-name (concat my:d:share "abbrev_defs")
        save-abbrevs t)
  (setq-default abbrev-mode t)
  )
   #+END_SRC
** =eldoc=: emacs-lisp document
   #+BEGIN_SRC emacs-lisp
(leaf eldoc
  :diminish eldoc-mode
  :config
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  )
   #+END_SRC
** =midnight=: 一定期間使用しなかった buffer を自動削除
   #+BEGIN_SRC emacs-lisp
(leaf midnight
  :config
  (setq clean-buffer-list-delay-general 1))
   #+END_SRC
** =uniquify=: モードラインのファイル名にディレクトリも表示する
   #+BEGIN_SRC emacs-lisp
(leaf uniquify
  :config
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets
        uniquify-min-dir-content 1))
   #+END_SRC
** =whitespace=: 空白の強調表示
   #+BEGIN_SRC emacs-lisp
(leaf whitespace
  :diminish global-whitespace-mode
  :config
  (setq whitespace-line-column 72
        whitespace-style '(face              ; faceを使って視覚化する．
                           trailing          ; 行末の空白を対象とする．
                           tabs              ; tab
                           spaces            ; space
                           )
        whitespace-display-mappings '((space-mark ?\u3000 [?\□])
                                      (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t]))
        whitespace-space-regexp "\\(\u3000+\\)"
        whitespace-global-modes '(not
                                  eww-mode
                                  term-mode
                                  eshell-mode
                                  org-agenda-mode
                                  calendar-mode)
        )
  (global-whitespace-mode 1)
  )
   #+END_SRC
** =saveplace=: 前回の修正位置を記憶する.
   記憶の保存先は =~/.emacs.d/tmp/emacs-places= に変更.
   #+BEGIN_SRC emacs-lisp
(leaf saveplace
  :config
  (setq-default save-place t)
  (setq save-place-file (concat my:d:tmp "emacs-places")))
   #+END_SRC
** =time-stamp=: 保存時に timestamp を自動更新
   デフォルトではいろいろと衝突したので
   更新文字列を変更し， =＄Lastupdate: 2= (＄は半角) があったら timestamp を更新する様にした．
   #+BEGIN_SRC emacs-lisp
(leaf time-stamp
  :config
  (setq time-stamp-active t
        time-stamp-line-limit 10
        time-stamp-start "$Lastupdate: 2"
        time-stamp-end "\\$"
        time-stamp-format "%03y-%02m-%02d %02H:%02M:%02S")
  (add-hook 'before-save-hook 'time-stamp))
   #+END_SRC
   モード独自の設定(例えば Org とか)に関しては別途．
** =tramp=: ssh 越しにファイルを編集
   #+BEGIN_SRC emacs-lisp
(leaf tramp
  :config
  (setq tramp-persistency-file-name (concat my:d:tmp "tramp"))
  )
   #+END_SRC
** =bookmark=: bookmark ファイル
   イマイチ使いこなせてない. 場所だけ変更しておく.
   #+BEGIN_SRC emacs-lisp
(setq bookmark-default-file (concat my:d:share "bookmarks"))
   #+END_SRC
** =browse-url=
   Firefox の呼び出し方が変わったので，そのために関数を追加．
   詳細は [[http://www.emacswiki.org/emacs/BrowseUrl]] を参照のこと．
   #+BEGIN_SRC emacs-lisp
(leaf browse-url
  :require t
  :bind (("C-c C-j" . browse-url-at-point))
  :config
  (defun browse-url-firefox (url &optional new-window)
    "@see http://www.emacswiki.org/emacs/BrowseUrl"
    (interactive (browse-url-interactive-arg "URL: "))
    (setq url (browse-url-encode-url url))
    (let* ((process-environment (browse-url-process-environment))
           (window-args (if (browse-url-maybe-new-window new-window)
                            (if browse-url-firefox-new-window-is-tab
                                '("-new-tab")
                              '("-new-window"))))
           (ff-args (append browse-url-firefox-arguments window-args (list url)))
           (process-name (concat "firefox " url))
           (process (apply 'start-process process-name nil
                           browse-url-firefox-program ff-args) ))))
  (if (executable-find "firefox")
      (setq browse-url-browser-function 'browse-url-firefox
            shr-external-browser 'browse-url-firefox)
    (setq browse-url-browser-function 'eww-browse-url))
  )
   #+END_SRC
** =server=: Emacs server
   #+BEGIN_SRC emacs-lisp
(leaf server
  :require t
  :config
  (unless (server-running-p)
    (server-start)))
   #+END_SRC
* Elscreen
** 導入 [0/1]
  modeline の表示そのものは無効化しておく．
  - [ ] Debian パッケージ版は古い．更新すべき
  #+BEGIN_SRC emacs-lisp
(leaf elscreen
  :init
  (quelpa '(elscreen
            :fetcher github
            :repo "emacs-jp/elscreen"))
  (setq elscreen-tab-display-control nil
        elscreen-prefix-key (kbd "C-o")
        elscreen-display-tab 8
        elscreen-display-screen-number nil)
  :config
  (elscreen-start))
  #+END_SRC
** elscreen + zsh での連携
  詳細は
  - [[https://masutaka.net/chalow/2011-09-28-1.html][ターミナルの zsh と Emacs を風のように駆け抜ける！]]
  - [[http://syohex.hatenablog.com/entry/20111026/1319606395][cdeを改良]]
  - [[https://qiita.com/__hage/items/2dd732b4dd68e124e8bd][cdeとelscreen-separate-buffer-listの相性が悪い]]
  などを参考に.
  #+BEGIN_SRC emacs-lisp
(defun return-current-working-directory-to-shell ()
  (expand-file-name
   (with-current-buffer
       (if (featurep 'elscreen)
           (let* ((frame-confs (elscreen-get-frame-confs (selected-frame)))
                  (num (nth 1 (assoc 'screen-history frame-confs)))
                  (cur-window-conf
                   (assoc 'window-configuration
                          (assoc num (assoc 'screen-property frame-confs))))
                  (marker (nth 2 cur-window-conf)))
             (marker-buffer marker))
         (nth 1
              (assoc 'buffer-list
                     (nth 1 (nth 1 (current-frame-configuration))))))
     default-directory)))
  #+END_SRC
* 日本語入力: =ddskk=
  [[http://openlab.ring.gr.jp/skk/ddskk-ja.html][Daredevil SKK (DDSKK)]] をメインで使用中．無いと途方に暮れる．
  ちなみにGTKが有効になっていると =gtk-immodule= なんかと衝突するので
  =~/.Xresources= で xim を無効にしておくと良い．
  例えば以下の様に:
  #+BEGIN_SRC conf :tangle no
! disable XIM
Emacs*useXIM: false
  #+END_SRC
** Emacs 本体側の設定
   実際の設定は別ファイルで行なわれるため
   ここでは設定ファイルの位置変更を変更している．
   #+BEGIN_SRC emacs-lisp
(unless (require 'skk nil t)
  (package-install 'ddskk))
(leaf skk
  :bind (("C-x j"   . skk-mode)
         ("C-x C-j" . skk-mode)
         ("C-\\"    . skk-mode))
  :init
  (setq skk-user-directory (concat my:d:tmp "skk")
        skk-init-file (concat user-emacs-directory "init-ddskk")
        default-input-method "japanese-skk" )
  )
   #+END_SRC
** DDSKK 本体の設定
   sticky shift: [[http://homepage1.nifty.com/blankspace/emacs/sticky.html][sticky shift]] を参照のこと.
   ddskk の 14.2 以降から同梱されるようになった(ありがたい)
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-sticky-key ";")
   #+END_SRC
   変換候補の表示位置
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-show-candidates-always-pop-to-buffer t)
   #+END_SRC
   候補表示件数を2列に
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
;; (setq skk-henkan-show-candidates-rows 2)
   #+END_SRC
   日本語表示しない
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-japanese-message-and-error nil)
   #+END_SRC
   メニューを日本語にしない -> toolbar 非表示だし.
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-show-japanese-menu nil)
   #+END_SRC
   注釈の表示
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-show-annotation nil)
   #+END_SRC
   インジケータの表示のカスタマイズ
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-latin-mode-string "[_A]")
(setq skk-hiragana-mode-string "[あ]")
(setq skk-katakana-mode-string "[ア]")
(setq skk-jisx0208-latin-mode-string "[Ａ]")
(setq skk-jisx0201-mode-string "[_ｱ]")
(setq skk-abbrev-mode-string "[aA]")
(setq skk-indicator-use-cursor-color nil)
   #+END_SRC
   インジケータを左端に表示
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-status-indicator 'left)
   #+END_SRC
   mode-line が動くのが許せないので，ちょっと修正
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(defadvice skk-make-indicator-alist
    (after my:set-skk-default-indicator activate)
  (dolist (elem
           '((abbrev " [aA]" . "--[aA]:")
             (latin " [_A]" . "--[_A]:")
             (default " [--]" . "--[--]:")))
    (setq ad-return-value
          (append (cons elem nil)
                  (delq (assoc (car elem) ad-return-value) ad-return-value)))))
(setq skk-show-inline t)
   #+END_SRC
   カーソルには色をつけない
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-use-color-cursor nil)
   #+END_SRC
*** 編集関連
    キーバインド
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(global-set-key "\C-x\C-j" 'skk-mode)
(global-set-key "\C-xj" 'skk-mode)
(global-set-key "\C-j" 'skk-mode)
(global-set-key "\C-\\" 'skk-mode)
    #+END_SRC
    半角カナを入力
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-use-jisx0201-input-method t)
    #+END_SRC
    Enter で改行しない
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-egg-like-newline t)
    #+END_SRC
    "「"を入力したら"」"も自動で挿入
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-auto-insert-paren t)
    #+END_SRC
    句読点変換ルール
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-kuten-touten-alist
      '(
        (jp    . ("。" . "、"))
        (en-jp . ("．" . "，"))
        (en    . (". " . ", "))
        ))
(setq-default skk-kutouten-type 'en)
    #+END_SRC
    全角記号の変換: @ での日付入力は使わない
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-rom-kana-rule-list
      (append skk-rom-kana-rule-list
              '(("!" nil "!")
                (":" nil ":")
                (";" nil ";")
                ("?" nil "?")
                ("z " nil "　")
                ("\\" nil "\\")
                ("@" nil "@")
                )))
    #+END_SRC
    送り仮名が厳密に正しい候補を優先
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-henkan-strict-okuri-precedence t)
    #+END_SRC
    辞書の共有
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-share-private-jisyo t)
    #+END_SRC
    変換候補を縦に表示
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-show-inline 'vertical)
    #+END_SRC
*** インクリメンタルサーチ
    minibuffer 内では強制的に skk off.
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(add-hook 'skk-mode-hook
          (lambda ()
            (and (skk-in-minibuffer-p)
                 (skk-mode-exit))))
(setq skk-isearch-start-mode 'latin)
    #+END_SRC
    インクリメンタルサーチは migemo に任せることに．
*** 辞書の設定
    追加している辞書の一覧は
    - [[http://www.chibutsu.org/jisho/][地球物理辞書]]
    - [[http://www.geocities.jp/living_with_plasma/tanudic.html][天文・天体物理用語の漢字変換用辞書]]
    - はてなキーワード
    - [[http://matsucon.net/material/dic/][2ちゃんねる顔文字辞書 MatsuCon]]
    - [[http://matsucon.net/][MatsuCon]]
    といった所.
    はてなキーワードからの辞書の抽出は [[http://d.hatena.ne.jp/znz][znz]] さんの
     - [[http://rubyist.g.hatena.ne.jp/znz/20060924/p1][「はてなダイアリーキーワードふりがなリスト」を SKK の辞書に変換]]
    を参考に.
    [[http://matsucon.net/][MatsuCon]] で公開されている顔文字に関しては
    顔文字に ; や が含まれている場合に, 適宜quoteする必要があるので
    以下のスクリプトで適当に変換.
    #+BEGIN_SRC ruby :tangle no
#!/usr/bin/env ruby
require 'nkf'
src = ARGV[0]
if ARGV.size < 1
  puts "usage: ime2skk.rb ime_dictionary"
  exit 0
end
File.open(src, "r") {|f|
  f.each do |line|
    line_euc = NKF.nkf("-S -e",line)
    if line_euc =~ /^([^!]+?)\t(.+?)\t.+$/
      entry = $1
      content = $2
      if content =~/;/
        puts entry + " /(concat \"" + content.gsub(';','\\\\073') + "\")/"
      elsif content =~/\//
        puts entry + " /(concat \"" + content.gsub('/','\\\\057') + "\")/"
      else
        puts entry + " /" + content + "/"
      end
    end
  end
}
    #+END_SRC
    他にも quote する必要あるような気もするけれど, それは気がついた時に.

    辞書サーバの指定は以下.
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(cond
 ((getenv "SKKSERVER")
  (setq skk-server-host "127.0.0.1"
        skk-server-portnum "1178"
        skk-large-jisyo  nil)
  (add-to-list 'skk-search-prog-list
               '(skk-server-completion-search) t)
  (add-to-list 'skk-search-prog-list
               '(skk-comp-by-server-completion) t))
 (t
  (setq skk-get-jisyo-directory (concat my:d:tmp "skk-jisyo")
        skk-large-jisyo (concat skk-get-jisyo-directory "/SKK-JISYO.L")))
 )
(when (file-exists-p "/usr/local/share/skkdic/SKK-JISYO.emoji.utf8")
  (setq skk-extra-jisyo-file-list
        (list '("/usr/local/share/skkdic/SKK-JISYO.emoji.utf8" . utf-8))))
    #+END_SRC
    辞書登録の際に送り仮名を削除
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-check-okurigana-on-touroku 'auto)
    #+END_SRC
    漢字登録のミスをチェックする
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-check-okurigana-on-touroku t)
    #+END_SRC
*** 動的補完
    まだ設定していない...
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
    ;; ;; 動的補完
    ;; (setq skk-dcomp-activate t)
    ;; (setq skk-dcomp-multiple-activate t)
    ;; (setq skk-dcomp-multiple-rows 5)
    ;; ;; 動的補完の複数表示群のフェイス
    ;; (set-face-foreground 'skk-dcomp-multiple-face "Black")
    ;; (set-face-background 'skk-dcomp-multiple-face "LightGoldenrodYellow")
    ;; (set-face-bold-p 'skk-dcomp-multiple-face nil)
    ;; ;; 動的補完の複数表示郡の補完部分のフェイス
    ;; (set-face-foreground 'skk-dcomp-multiple-trailing-face "dim gray")
    ;; (set-face-bold-p 'skk-dcomp-multiple-trailing-face nil)
    ;; ;; 動的補完の複数表示郡の選択対象のフェイス
    ;; (set-face-foreground 'skk-dcomp-multiple-selected-face "White")
    ;; (set-face-background 'skk-dcomp-multiple-selected-face "LightGoldenrod4")
    ;; (set-face-bold-p 'skk-dcomp-multiple-selected-face nil)
    #+END_SRC
*** 部首変換, 総画数変換
    上手く使いこなせていない
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(add-to-list 'skk-search-prog-list
             '(skk-tankan-search 'skk-search-jisyo-file
                                 skk-large-jisyo 10000))
    #+END_SRC
* Copy & Paste
** Linux: =xclip=
   =xclip= で clipboard とデータをやりとり．
   #+BEGIN_SRC emacs-lisp
 (leaf xclip
   :if (and (executable-find "xclip")
            (eq system-type 'gnu/linux))
   :ensure t
   :config
   (xclip-mode 1))
   #+END_SRC
   clipboard と PRIMARY の同期には =gpaste= を使っている．
** macOS:
   はてさて
* インクリメンタル検索: =migemo=
  #+BEGIN_SRC emacs-lisp
(leaf migemo
  :disabled (not (executable-find "cmigemo"))
  :require t
  :config
  (if (file-directory-p "/usr/local/share/migemo/utf-8")
      (setq migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict")
    (setq migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict"))
  (setq migemo-command "cmigemo"
        migemo-options '("-q" "--emacs")
        migemo-user-dictionary nil
        migemo-regex-dictionary nil
        migemo-coding-system 'utf-8-unix)
  (migemo-init))
  #+END_SRC
