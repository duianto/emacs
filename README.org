#+title: Emacs の設定
# -*- mode: org; coding: utf-8-unix; indent-tabs-mode: nil -*-
#+startup: content
#+date: 2019-07-28 20:35:15
* はじめに
  ここでは，私の Emacs の設定についてまとめています．

  #+html: <amp-img src="https://travis-ci.org/uwabami/emacs.svg?branch=master" width="72px" height="20px" layout=fixed class="travis_badge"></amp-img>
  #+html: <amp-img src="https://img.shields.io/badge/License-GPLv3-blue.svg" width="92px" height="20px" layout="fixed"></amp-img>
  #+html: <a href="https://github.com/uwabami/emacs"><span class="icon-github"><svg id="SVGRoot" width="20px" height="20px" version="1.1" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="m5.4144 12.761c0 0.0645-0.0742 0.11613-0.16774 0.11613-0.10645 0.01-0.18064-0.0419-0.18064-0.11613 0-0.0645 0.0742-0.11613 0.16774-0.11613 0.0968-0.01 0.18064 0.0419 0.18064 0.11613zm-1.0032-0.14516c-0.0226 0.0645 0.0419 0.13871 0.13871 0.15806 0.0839 0.0323 0.18064 0 0.2-0.0645 0.0194-0.0645-0.0419-0.13871-0.13871-0.16775-0.0839-0.0226-0.17742 0.01-0.2 0.0742zm1.4258-0.0548c-0.0935 0.0226-0.15806 0.0839-0.14838 0.15806 0.01 0.0645 0.0935 0.10645 0.19032 0.0839 0.0936-0.0226 0.15806-0.0839 0.14839-0.14838-0.01-0.0613-0.0968-0.10323-0.19033-0.0935zm2.1226-12.361c-4.4742 0-7.8968 3.3968-7.8968 7.871 0 3.5774 2.2516 6.6387 5.4677 7.7161 0.41291 0.0742 0.55807-0.18064 0.55807-0.39032 0-0.2-0.01-1.3032-0.01-1.9806 0 0-2.2581 0.48387-2.7323-0.96129 0 0-0.36774-0.93871-0.89677-1.1806 0 0-0.73871-0.50645 0.0516-0.49677 0 0 0.80323 0.0645 1.2452 0.83226 0.70645 1.2452 1.8903 0.88709 2.3516 0.67419 0.0742-0.51613 0.28387-0.87419 0.51613-1.0871-1.8032-0.2-3.6226-0.46129-3.6226-3.5645 0-0.8871 0.24516-1.3323 0.76129-1.9-0.0839-0.20968-0.35806-1.0742 0.0839-2.1903 0.6742-0.20967 2.2258 0.87097 2.2258 0.87097 0.64516-0.18064 1.3387-0.27419 2.0258-0.27419 0.68709 0 1.3806 0.0936 2.0258 0.27419 0 0 1.5516-1.0839 2.2258-0.87097 0.44193 1.1194 0.16774 1.9806 0.0839 2.1903 0.51613 0.57096 0.83226 1.0161 0.83226 1.9 0 3.1129-1.9 3.3613-3.7032 3.5645 0.29678 0.25484 0.54839 0.73871 0.54839 1.4968 0 1.0871-0.01 2.4322-0.01 2.6968 0 0.20968 0.14839 0.46452 0.55807 0.39032 3.2258-1.071 5.4129-4.1322 5.4129-7.7097 0-4.4742-3.629-7.871-8.1032-7.871zm-4.7613 11.126c-0.0419 0.0323-0.0323 0.10646 0.0226 0.16775 0.0516 0.0516 0.12581 0.0742 0.16775 0.0323 0.0419-0.0323 0.0323-0.10645-0.0226-0.16774-0.0516-0.0516-0.12581-0.0742-0.16775-0.0323zm-0.34838-0.26129c-0.0226 0.0419 0.01 0.0935 0.0742 0.12581 0.0516 0.0323 0.11613 0.0226 0.13871-0.0226 0.0226-0.0419-0.01-0.0935-0.0742-0.12581-0.0645-0.0194-0.11613-0.01-0.13871 0.0226zm1.0452 1.1484c-0.0516 0.0419-0.0323 0.13871 0.0419 0.2 0.0742 0.0742 0.16775 0.0839 0.20968 0.0323 0.0419-0.0419 0.0226-0.13871-0.0419-0.2-0.071-0.0742-0.16775-0.0839-0.20968-0.0323zm-0.36774-0.47419c-0.0516 0.0323-0.0516 0.11613 0 0.19032 0.0516 0.0742 0.13871 0.10645 0.18064 0.0742 0.0516-0.0419 0.0516-0.1258 0-0.2-0.0452-0.0742-0.12903-0.10645-0.18064-0.0645z" fill="currentColor" stroke-width=".032258"/></svg></span></a>

  基本方針は以下の通り:
** Debian パッケージがインストールされているならば，それを優先する
   :[[https://en.wikipedia.org/wiki/Eating_your_own_dog_food][Eating your own dog food - Wikipedia]]

   Emacsに関連するDebianパッケージを幾つかメンテナンスしているので，
   可能な限りDebianパッケージを使うことにしています。
** [[https://github.com/conao3/leaf.el][leaf.el]]でEmacs のパッケージの導入と設定を行なう。
   設定には[[https://github.com/conao3/leaf.el][leaf.el]]を利用します。
   VCS からインストールしたいパッケージが幾つかあるので，
   それらについては[[https://github.com/dimitri/el-get][el-get]]を利用しています。
   今後は[[https://github.com/conao3/feather.el][feather.el]]も試してみたいですね。
** 設定は [[http://orgmode.org/][Org mode]] で書きたい
   以前こんなブログ記事を書きました: [[http://uwabami.junkhub.org/log/20111213.html#p01][Emacsの設定ファイルをorgで書く]]

   というわけで，設定は [[http://orgmode.org/worg/org-contrib/babel/intro.html][Org Babel]] で書いています。
   本ファイル(=README.org=) から，
   Makefile 内の以下のスクリプトで =~/init.el= を生成し，byte-compile します。
   #+begin_src makefile-gmake :tangle no
EMACS	?= emacs
init.el: README.org
	$(EMACS) -Q -q --batch --eval \
	   "(progn \
		  (require 'ob-tangle) \
		  (org-babel-tangle-file \"$<\" \"$@\" \"emacs-lisp\"))"
	$(EMACS) -q -l init.el --batch --eval '(kill-emacs)'
%.elc: %.el
	$(EMACS) -q -l init.el -batch -f batch-byte-compile $<
   #+end_src
   出力される =init.el= 用のおまじない。
   =lexsical-binding= を有効にしておきます。
   #+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
;; Configurations for Emacs
;;                                         Youhei SASAKI <uwabami@gfd-dennou.org>
;; see also https://uwabami.github.io/cc-env/Emacs.html
   #+end_src
** ディレクトリ構成の修正
   分割した設定ファイル群やパッケージでinstallしたパッケージ
   の置き場所は =user-emacs-directory= 以下にまとめています。

   ディレクトリ構成は以下のようにしました:
   #+begin_example
    ~/.emacs.d/
     |-- Makefile    ←  byte-compile 用の rule
     |-- README.org  ←  本ファイル．`org-babel-tangle' で init.el を生成
     |-- pkg
     |   |-- elpa/   ←  package.el で導入したパッケージが置かれる場所
     |   `-- el-get/ ←  el-get で導入したパッケージが置かれる場所
     |-- share/      ←  (基本的に)参照するだけの資源置き場所
     `-- tmp/        ←  一次ファイルの置き場所
   #+end_example
   上記ディレクトリ構成を設定ファイルで使用するために
   ディレクトリ配置を宣言しておきます。
   #+begin_src emacs-lisp
(when load-file-name
  (setq user-emacs-directory
        (expand-file-name (file-name-directory load-file-name))))
(defconst my:d:share
  (expand-file-name "share/" user-emacs-directory))
(defconst my:d:tmp
  (expand-file-name "tmp/" user-emacs-directory))
(defconst my:d:pkg:elpa
  (expand-file-name "pkg/elpa" user-emacs-directory))
(defconst my:d:pkg:elget
  (expand-file-name "pkg/el-get" user-emacs-directory))
(dolist (my:d
         '(my:d:share
           my:d:tmp
           my:d:pkg:elpa
           my:d:pkg:elget))
  (lambda ()
    (unless (file-directory-p my:d)
      (make-directory my:d t))))
   #+end_src
   その他, 良く使うディレクトリもここで設定しておきます。
   #+BEGIN_SRC emacs-lisp
(defconst my:d:org (concat (getenv "HOME") "/Nextcloud/org/"))
   #+END_SRC
   ついでに，
   =custom-set-variables= は別ファイルに出力し，
   終了時に削除するようにしています。
   #+begin_src emacs-lisp
(setq custom-file (concat my:d:tmp "custom.el"))
(add-hook 'kill-emacs-hook
          (lambda ()
            (if (file-exists-p custom-file)
                (delete-file custom-file))))
   #+end_src
   +init.elが汚れる気がしてあまり好きではないのですが...皆さん気にしてないんですかね+
** Byte-Compile 時の Common Lisp の読み込み
   =cl= が =cl-lib= になってます。
   #+begin_src emacs-lisp
(eval-when-compile
  (require 'cl-lib nil t))
   #+end_src
* Package 関連: =package.el=, [[https://github.com/conao3/leaf.el][leaf.el]], [[https://github.com/dimitri/el-get][el-get]]
  [[https://github.com/conao3/leaf.el][leaf.el]]のおかげで，
  無いと途方に暮れるパッケージ以外のインストールは無視できるようになります。
** =package.el=
   パッケージは基本的に =pacakge.el= で導入するので，先ずはその設定。
   #+begin_src emacs-lisp
(setq url-http-attempt-keepalives nil)
(require 'package nil 'noerror)
(setq package-enable-at-startup t
      package-user-dir my:d:pkg:elpa
      package-gnupghome-dir (expand-file-name ".gnupg" (getenv "HOME"))
      ;; elpa/gnutls workaround
      gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(eval-when-compile
  (unless (file-exists-p (locate-user-emacs-file "tmp/bootstrap-stamp"))
    (package-refresh-contents)
    (with-temp-buffer (write-file (locate-user-emacs-file "tmp/bootstrap-stamp")))
    ))
(package-initialize)
   #+end_src
** [[https://github.com/conao3/leaf.el][leaf.el]]
   個々のパッケージの設定には[[https://github.com/conao3/leaf.el][leaf.el]]を利用します。
   #+begin_src emacs-lisp
(unless (package-installed-p 'leaf)
  (package-install 'leaf))
(leaf leaf-keywords
  :ensure t
  :config
  (leaf-keywords-init))
   #+end_src
** [[https://github.com/dimitri/el-get][el-get]]
   自分で修正した版やオリジナル版を別の場所から持ってくる場合は
   [[https://github.com/conao3/leaf.el][leaf.el]]から[[https://github.com/dimitri/el-get][el-get]]を呼び出します。
   #+begin_src emacs-lisp
(defconst el-get-dir my:d:pkg:elget) ;; override default
(leaf el-get
  :ensure t
  :require t
  :init
  (setq el-get-git-shallow-clone t)
  )
   #+end_src
* 環境変数の読み込み: =exec-path-from-shell=
  shell(zsh)で設定した =PATH= などの環境変数をEmacsに引き継ぐために
  [[https://github.com/purcell/exec-path-from-shell][purcell/exec-path-from-shell]] を使います。
  今の所
  - =SHELL=
  - =DEBFULLNAME=
  - =DEBEMAIL=
  - =TEXMFHOME=
  - =SKKSERVER=
  - =http_proxy=
  - =GPG_KEY_ID=
  - =GPG_AGENT_INFO=
  - =PASSWORD_STORE_DIR=
  - =PATH=
  を読み込んでいます．
  #+begin_src emacs-lisp
(leaf exec-path-from-shell
  :ensure t
  :init
  (setq exec-path-from-shell-check-startup-files nil
        exec-path-from-shell-variables
        '("SHELL"
          "DEBFULLNAME"
          "DEBEMAIL"
          "SKKSERVER"
          "TEXMFHOME"
          "http_proxy"
          "GPG_KEY_ID"
          "GPG_AGENT_INFO"
          "PASSWORD_STORE_DIR"
          "PATH"))
  :config
  (exec-path-from-shell-initialize)
  (setq user-full-name (concat (getenv "DEBFULLNAME"))
        user-mail-address (concat (getenv "DEBEMAIL"))
        my:d:password-store
        (concat (getenv "PASSWORD_STORE_DIR") "/Emacs/" (system-name)))
  )
  #+end_src
* 言語の設定 [/]
  最近のEmacsはlocaleから文字コードを自動判別するらしいので，
  以前良く設定していた以下は不要らしいですね。
  #+begin_src emacs-lisp :tangle no
(set-language-environment "Japanese")
(prefer-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-default 'buffer-file-coding-system 'utf-8)
  #+end_src
  - [ ] m17n.org の消滅によって, 参照元が消えた。適切な参照元はどこだろうか。
** cp5022x.el
   Emacs23 から内部が Unicode ベースになっています。

   しかし文字コードの変換はGNU libcのiconvをベースにしているため，
   機種依存文字を含む文字コードの変換をうまく行なえません。
   そこで言語設定前に =cp5022x.el= をインストールすることにしています。
   #+begin_src emacs-lisp
(leaf cp5022x
  :ensure t
  :require t
  :config
  (set-charset-priority 'ascii 'japanese-jisx0208 'latin-jisx0201
                        'katakana-jisx0201 'iso-8859-1 'unicode)
  (set-coding-system-priority 'utf-8 'euc-jp 'iso-2022-jp 'cp932)
  )
   #+end_src
** East Asian Ambiguos 対応
   East Asian Ambiguosを2文字幅にして, ついでに
   CJK 以外の East Asian Ambiguosと絵文字も2文字幅にするようにしています。
   拙作の修正ロケールはこちら: [[https://github.com/uwabami/locale-eaw-emoji]]
   #+begin_src emacs-lisp
(leaf locale-eaw-emoji
  :el-get (locale-eaw-emoji
           :type github
           :pkgname "uwabami/locale-eaw-emoji")
  :require t
  :config
  (eaw-and-emoji-fullwidth)
  )
   #+end_src
** ターミナルでもicon fontを使いたい。
   [[https://github.com/domtronn/all-the-icons.el][all-the-icons.el]]のデータを修正して,
   [[https://github.com/sebastiencs/icons-in-terminal][icons in terminal]]を修正した自作フォントのデータを読みに行くようにしてみました。
   #+begin_src emacs-lisp
(leaf all-the-icons
  :ensure t
  :init
  (setq all-the-icons-scale-factor 0.9
        all-the-icons-default-adjust 0.01)
  )
(leaf all-the-icons-in-terminal
  :el-get (all-the-icons-in-terminal
           :type github
           :pkgname "uwabami/isfit-plus")
  :require t
  :config
  (add-to-list 'all-the-icons-mode-icon-alist
               '(f90-mode all-the-icons-faicon "facebook")) ;; facebook!
  (add-to-list 'all-the-icons-mode-icon-alist
               '(wl-folder-mode all-the-icons-faicon "folder-o" ))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(wl-summary-mode all-the-icons-faicon "folder-open-o"))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(wl-draft-mode all-the-icons-material "drafts"))
  (add-to-list 'all-the-icons-mode-icon-alist
               '(mime-view-mode all-the-icons-faicon "envelope-o"))
  )
   #+end_src
** macOS対応
   最近良く触る様になったので設定している。
   +まあ, イマイチ慣れない訳ですけれど+
   #+begin_src emacs-lisp
(leaf ucs-normalize
  :if (eq system-type 'darwin)
  :defvar (mac-pass-control-to-system ns-command-modifier ns-alternate-modifier)
  :config
  (set-file-name-coding-system 'utf-8-hfs)
  (setq locale-coding-system 'utf-8-hfs)
  (setq mac-pass-control-to-system t  ;; Ctrl を Mac から奪い取る
        ns-command-modifier 'meta     ;; Cmd と Option を逆にする
        ns-alternate-modifier 'super)
  (global-set-key [ns-drag-file] 'ns-find-file)
  )
   #+end_src
* 独自関数
  細かい独自関数，など．
** カーソルのある位置の face を調べる関数
   わりと良く使う. 地味に便利
   #+begin_src emacs-lisp
(defun my:describe-face-at-point ()
  (interactive)
  (message "%s" (get-char-property (point) 'face)))
   #+end_src
** dpkg-status
   もっと良い方法がありそうなモンですが．
   #+begin_src emacs-lisp
(defun my:dpkg-status (package)
  "Return the package status from dpkg --get-selections."
  (string-match "^ii" (shell-command-to-string (format "dpkg -l %s" package))))
   #+end_src
** ファイル名を minibuffer におさまる様に整形
   zsh prompt風味
   #+begin_src emacs-lisp
(defun my:shorten-file-path (fpath max-length)
  "Show up to `max-length' characters of a directory name `fpath' like zsh"
  (let* ((path (reverse (split-string (abbreviate-file-name fpath) "/")))
         (output "")
         (top (mapconcat 'identity (reverse (last path 3)) "/"))
         (vmax (- max-length 4 (length top)))
         (path (butlast path 3))
         )
    (while (and path
                (and (< (length output) vmax)
                     (< (length (concat "/" (car path) output)) vmax)))
      (setq output (concat "/" (car path) output))
      (setq path (cdr path)))
    ;; 省略
    (when path
      (setq output (concat "/..." output)))
    (format "%s%s" top output)
    ))
   #+end_src
* 補完: =ivy,counsel,swiper=
  counsel が swiper に，swiper が ivy に依存しているので，
  パッケージマネージャを使う場合は，counsel をインストールすれば，
  3つのパッケージが同時にインストールされます。
** ivy
   補完の肝。
   #+BEGIN_SRC emacs-lisp
(leaf ivy
  :ensure t
  :init
  (leaf flx :ensure t)
  (leaf ivy-hydra
    :ensure t
    :commands ivy-read
    :bind ((:ivy-minibuffer-map
            ("M-o" . hydra-ivy/body )))
    )
  ;; IDO-like ?
  :bind ((:ivy-minibuffer-map
          ("RET"   . ivy-alt-done)
          ;; ("C-j"   . ivy-immediate-done)
          ;; ("C-RET" . ivy-immediate-done)
          ))
  ;;
  :config
  (setq enable-recursive-minibuffers t
        minibuffer-depth-indicate-mode 1)
  (setq ivy-use-virtual-buffers t
        ivy-use-selectable-prompt t
        ivy-fixed-height-minibuffer t
        ivy-wrap t
        ivy-height 6
        ivy-display-style 'fancy
        ivy-count-format (concat (all-the-icons-faicon "sort-amount-asc") " [%d/%d] ")
        ivy-extra-directories nil       ; default の "." と ".." を除外
        ivy-initial-inputs-alist nil
        ;; ivy-format-functions-alist '((t . ivy-format-function-arrow))
        ivy-re-builders-alist '((t . ivy--regex-fuzzy))
        )
  )
   #+END_SRC
** 補完候補の調整
   #+BEGIN_SRC emacs-lisp
(leaf prescient
  :ensure t
  :commands ivy
  :init
  (setq prescient-save-file (concat my:d:tmp "prescient-save.el")
        prescient-aggressive-file-save t
        prescient-filter-method '(fuzzy regexp initialism))
  :config
  (prescient-persist-mode 1)
  )
(leaf ivy-prescient
  :ensure t
  :commands ivy
  :init
  (setq ivy-prescient-retain-classic-highlighting t
        ;; (dolist (command '(counsel-world-clock ;; Merged!
        ;;                      counsel-app))
        ;;     (add-to-list 'ivy-prescient-sort-commands command))
        )
  (ivy-prescient-mode 1)
  )
   #+END_SRC
** インジケータをアイコンに
   #+BEGIN_SRC emacs-lisp
(leaf *ivy-format-function-arrow
  :after ivy
  :config
  (defun my:ivy-format-function-arrow (cands)
    "Custom; Transform CANDS into a string for minibuffer."
    (ivy--format-function-generic
     (lambda (str)
       (concat (all-the-icons-faicon
                "hand-o-right" :face 'minibuffer-prompt)
               " " (ivy--add-face str 'ivy-current-match)))
     (lambda (str)
       (concat ;; (all-the-icons-faicon "hand-o-right" )
        "   " str))
     cands
     "\n"))
  (setq ivy-format-functions-alist
        '((t . my:ivy-format-function-arrow)))
  )
   #+END_SRC
** =all-the-icons-ivy= アイコン表示
   #+BEGIN_SRC emacs-lisp
(leaf all-the-icons-ivy
  :ensure t
  :config
  (all-the-icons-ivy-setup)
  )
   #+END_SRC
** counsel
   =ivy-read= を使った既存のコマンド群の置き換え
   #+BEGIN_SRC emacs-lisp
(leaf counsel
  :ensure t
  :bind ((("M-x"     . counsel-M-x)
          ("C-x C-r" . my:counsel-recentf)
          ("C-x C-f" . counsel-find-file))
         (:counsel-find-file-map
          ("C-l"     . counsel-up-directory)))
  :init
  ;; smex を使う
  (leaf smex
    :ensure t
    :init
    (setq-default smex-save-file
                  (expand-file-name "smex-items" my:d:tmp))
    )
  (setq-default counsel-mode-override-describe-bindings t)
  ;; recentf-list が長いので短縮表示
  (defun my:counsel-recentf ()
    "Custom: Find a file on `recentf-list'."
    (interactive)
    (require 'recentf)
    (recentf-mode)
    (ivy-read "Recentf: " (mapcar (lambda (f)
                                    (cons (my:shorten-file-path f 77) f))
                                  recentf-list)
              :action (lambda (f)
                        (with-ivy-window
                          (find-file (car f))))
              :require-match t
              :caller 'counsel-recentf)
    )
  :config
  ;; 補完で無視する拡張子の追加．そのうち増える．
  (dolist (ext
           '("./"
             "../"
             ".dvi"
             ".fdb_latexmk"
             ".fls"
             ".ilg"
             ".jqz"
             ".mod"
             ".nav"
             ".out"
             ".snm"
             ".synctex.gz"
             ".vrb"
             ))
    (add-to-list 'completion-ignored-extensions ext))
  (setq counsel-find-file-ignore-regexp
        (regexp-opt completion-ignored-extensions))
  )
   #+END_SRC
** swiper
   検索強化
* 主にEmacs本体および同梱されている拡張に関する設定
  最近ぼちぼち他の拡張も入れる様になってきた.
** 標準機能の設定: 表示関連
   起動時のスプラッシュ画面を表示しない
   #+begin_src emacs-lisp
(setq inhibit-startup-screen t
      inhibit-startup-message t)
   #+end_src
   大抵の場合ターミナル内で =-nw= として起動するし,
   メニューは触ったことないので使わないので，
   フレーム, ツールバー等を非表示にする．
   #+begin_src emacs-lisp
(dolist (mode
         '(tool-bar-mode
           scroll-bar-mode
           menu-bar-mode
           blink-cursor-mode
           column-number-mode))
  (funcall mode -1))
   #+end_src
   ベル無効化
   #+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
   #+end_src
   現在行のハイライト
   #+begin_src emacs-lisp
(global-hl-line-mode t)
   #+end_src
   選択リージョンに色付け
   #+begin_src emacs-lisp
(transient-mark-mode t)
   #+end_src
   対応する括弧を強調表示
   #+begin_src emacs-lisp
(leaf show-paren-mode
  :config
  (setq show-paren-style 'mixed)
  (show-paren-mode t)
  )
   #+end_src
   行番号を表示する =linum-mode= は基本使わない(必要に応じて有効にする)
   ので通常はモードラインに行番号や桁番号を表示しないようする.
   ついでに =linum-mode= を有効にした場合の桁表示を 5 桁に.
   #+begin_src emacs-lisp
(leaf line-number-mode
  :config
  (setq linum-format "%5d ")
  (line-number-mode -1))
   #+end_src
   debug は表示しない: 必要に応じて t に変更する
   #+begin_src emacs-lisp
(setq debug-on-error nil)
   #+end_src
   Compile-Log の非表示:     ほとんど見ないし．
   #+begin_src emacs-lisp
(let ((win (get-buffer-window "*Compile-Log*")))
  (when win (delete-window win)))
   #+end_src
   Warning の抑制: これもほとんど見ないし．
   #+begin_src emacs-lisp
(setq byte-compile-warnings
      '(not
        free-vars
        unresolved
        callargs
        redefine
        ;;        obsolete
        noruntime
        cl-functions
        interactive-only
        make-local
        ))
   #+end_src
** 標準機能の設定: 編集関連
   yes or no を y or n に
   #+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
   #+end_src
   ファイル名の大文字小文字を区別しない(zsh風)
   #+begin_src emacs-lisp
(setq read-file-name-completion-ignore-case t)
   #+end_src
   tab 幅 4, tab でのインデントはしない
   #+begin_src emacs-lisp
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
   #+end_src
   文字列は 72 文字で折り返し(RFC2822風味)
   #+begin_src emacs-lisp
(setq-default fill-column 72)
(setq paragraph-start '"^\\([ 　・○<\t\n\f]\\|(?[0-9a-zA-Z]+)\\)")
(setq-default auto-fill-mode nil)
   #+end_src
   長い行の折り返し:
   デフォルトは折り返し有で =\C-c M-l= で toggle
   #+begin_src emacs-lisp
(set-default 'truncate-lines nil)
(setq truncate-partial-width-windows nil)
   #+end_src
   バッファ終端で newline を入れない
   #+begin_src emacs-lisp
(setq next-line-add-newlines nil)
   #+end_src
   変更のあったファイルの自動再読み込み
   #+begin_src emacs-lisp
(global-auto-revert-mode 1)
   #+end_src
   バックアップとauto-saveの作成/位置の変更:
   #+begin_src emacs-lisp
(setq auto-save-list-file-prefix (concat my:d:tmp ".saves-")
      auto-save-default t
      auto-save-timeout 15
      auto-save-interval 60
      make-backup-files t
      backup-by-copying t ; symlink は使わない
      backup-directory-alist `(("." . ,my:d:tmp))
      auto-save-file-name-transforms `((".*" ,my:d:tmp t))
      version-control t
      kept-new-versions 5
      kept-old-versions 5
      delete-old-versions t
      delete-auto-save-files t
      )
   #+end_src
   Undo/Redo:
   =undo-limit= は無限大にしたいのですが，どうするのかな...?
   #+begin_src emacs-lisp
(setq undo-limit 200000
      undo-strong-limit 260000)
(savehist-mode 1)
(setq history-length t  ; t で無制限
      savehist-file (concat my:d:tmp "history"))
   #+end_src
** 空になったファイルを尋ねずに自動削除
   ゴミが残らないし，地味に便利．
   #+begin_src emacs-lisp
(defun my:delete-file-if-no-contents ()
  (when (and (buffer-file-name (current-buffer))
             (= (point-min) (point-max)))
    (delete-file
     (buffer-file-name (current-buffer)))))
(if (not (memq 'my:delete-file-if-no-contents after-save-hook))
    (setq after-save-hook
          (cons 'my:delete-file-if-no-contents after-save-hook)))
   #+end_src

** scratch を殺さない. 消したら再生成
   ...元ネタがどこだったのか忘れてしまった...
   #+begin_src emacs-lisp
(defun my:make-scratch (&optional arg)
  (interactive)
  (progn
    ;; "*scratch*" を作成して buffer-list に放り込む
    (set-buffer (get-buffer-create "*scratch*"))
    (funcall initial-major-mode)
    (erase-buffer)
    (when (and initial-scratch-message (not inhibit-startup-message))
      (insert initial-scratch-message))
    (or arg
        (progn
          (setq arg 0)
          (switch-to-buffer "*scratch*")))
    (cond ((= arg 0) (message "*scratch* is cleared up."))
          ((= arg 1) (message "another *scratch* is created")))))
;;
(defun my:buffer-name-list ()
  (mapcar (function buffer-name) (buffer-list)))
(add-hook 'kill-buffer-query-functions
          ;; *scratch* バッファで kill-buffer したら内容を消去するだけにする
          (function (lambda ()
                      (if (string= "*scratch*" (buffer-name))
                          (progn (my:make-scratch 0) nil)
                        t))))
(add-hook 'after-save-hook
          ;; *scratch* バッファの内容を保存したら
          ;; *scratch* バッファを新しく作る.
          (function
           (lambda ()
             (unless (member "*scratch*" (my:buffer-name-list))
               (my:make-scratch 1)))))
   #+end_src
** 行末の無駄な空白/改行を削除する
   @see [[http://d.hatena.ne.jp/tototoshi/20101202/1291289625][無駄な行末の空白を削除する(Emacs Advent Calendar jp:2010)]]

   ただし, RD や Markdown だと空白行に意味があったりするので，
   必要に応じて拡張子で判断して外している．
   #+begin_src emacs-lisp
(defvar my:delete-trailing-whitespace-exclude-suffix
  (list "\\.rd$" "\\.md$" "\\.rbt$" "\\.rab$"))
(defun my:delete-trailing-whitespace ()
  (interactive)
  (cond
   ((equal nil
           (cl-loop for pattern in my:delete-trailing-whitespace-exclude-suffix
                    thereis (string-match pattern buffer-file-name)))
    (delete-trailing-whitespace))))
(add-hook 'before-save-hook 'my:delete-trailing-whitespace)
   #+end_src
** ファイル，デイレクトリ整理
   =~/.emacs.d/= 以下にファイルが転がるのがなんか嫌なので, 気がつく度に設定している.
   #+begin_src emacs-lisp
(leaf *changefilelocation
  :init
  (leaf url
    :init
    (setq url-configuration-directory (concat my:d:tmp "url")))
  (leaf nsm
    :if (>= emacs-major-version 25)
    :config
    (setq nsm-settings-file (concat my:d:tmp "network-settings.data")))
  )
   #+end_src
   他にもイロイロありそう．
** =.elc= と =.el= の timestamp を比較し，新しい方を読み込む
   =load-prefer-newer= は Emacs >= 24.4 から．
   #+begin_src emacs-lisp
(when (boundp 'load-prefer-newer)
  (setq load-prefer-newer t))
   #+end_src
** ガベージコレクションの +頻度を下げる+ 表示をしない
   message に gc が走っていることを表示しない
   #+begin_src emacs-lisp
(setq gc-cons-threshold (* 8 1024 1024)
      garbage-collection-messages nil)
   #+end_src
   =gc-cons-threshold= はとりあえず default の設定に.
   メモリ喰いな拡張を入れている場合には, 安易に =gc-cons-threshold= を上げるのは考えものである.
   「gc が走る→大きな領域を掃除するのでその間 emacs が止まる」という事を頻繁に経験することになるだろう.
** =bookmark=: bookmark ファイル
   イマイチ使いこなせてない. 場所だけ変更しておく.
   #+begin_src emacs-lisp
(setq bookmark-default-file (concat my:d:share "bookmarks"))
   #+end_src
** =recentf=: 最近使ったファイル履歴の保管
   ファイルを開く際には =ido-recentf-open= を使うので,
   結局履歴を貯める設定をしている事になっている.
   #+begin_src emacs-lisp
(leaf recentf-ext :ensure t)
(leaf recentf
  :hook (after-init-hook . recentf-mode)
  :config
  (setq recentf-max-saved-items 256
        recentf-save-file (expand-file-name (concat my:d:tmp "recentf"))
        recentf-auto-cleanup 'never
        recentf-exclude '(".recentf"
                          "^/tmp\\.*"
                          "^/private\\.*"
                          "^/var/folders\\.*"
                          "/TAGS$"
                          "^/home/uwabami/.mozilla/\\.*"
                          "\\.*草稿\\.*"
                          "^/[^/:]+:"  ; exclude tramp
                          ))
  )
   #+end_src
   ディレクトリの履歴も取れるので recentf-ext を入れておく
** =abbrev=: 略語展開
   あまり上手く使えていない...。
   #+begin_src emacs-lisp
(leaf abbrev
  :config
  (setq abbrev-file-name (concat my:d:share "abbrev_defs")
        save-abbrevs t)
  (setq-default abbrev-mode t)
  )
   #+end_src
** =eldoc=: emacs-lisp document
   minibuffer では eldoc にお黙り頂く。
   #+begin_src emacs-lisp
(leaf eldoc
  :hook (emacs-lisp-mode-hook . turn-on-eldoc-mode)
  :config
  (defun my:eldoc-message (f &optional string)
    (unless (active-minibuffer-window)
      (funcall f string)))
  (advice-add 'eldoc-message :around #'my:eldoc-message)
  )
   #+end_src
** =midnight=: 一定期間使用しなかった buffer を自動削除
   #+begin_src emacs-lisp
(leaf midnight
  :config
  (setq clean-buffer-list-delay-general 1))
   #+end_src
** =uniquify=: モードラインのファイル名にディレクトリも表示する
   #+begin_src emacs-lisp
(leaf uniquify
  :config
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets
        uniquify-min-dir-content 1
        )
  )
   #+end_src
** =whitespace=: 空白の強調表示
   #+begin_src emacs-lisp
(leaf whitespace
  :config
  (setq whitespace-line-column 72
        whitespace-style '(face              ; faceを使って視覚化する．
                           trailing          ; 行末の空白を対象とする．
                           tabs              ; tab
                           spaces            ; space
                           )
        whitespace-display-mappings '((space-mark ?\u3000 [?\□])
                                      (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t]))
        whitespace-space-regexp "\\(\u3000+\\)"
        whitespace-global-modes '(not
                                  eww-mode
                                  term-mode
                                  eshell-mode
                                  org-agenda-mode
                                  calendar-mode)
        )
  (global-whitespace-mode 1)
  )
   #+end_src
** =saveplace=: 前回の修正位置を記憶する.
   記憶の保存先は =~/.emacs.d/tmp/emacs-places= に変更.
   #+begin_src emacs-lisp
(leaf saveplace
  :config
  (setq-default save-place t)
  (setq save-place-file (concat my:d:tmp "emacs-places")))
   #+end_src
** =time-stamp=: 保存時に timestamp を自動更新
   デフォルトではいろいろと衝突したので
   更新文字列を変更し， =＄Lastupdate: 2= (＄は半角) があったら timestamp を更新する様にした．
   #+begin_src emacs-lisp
(leaf time-stamp
  :config
  (setq time-stamp-active t
        time-stamp-line-limit 10
        time-stamp-start "$Lastupdate: 2"
        time-stamp-end "\\$"
        time-stamp-format "%03y-%02m-%02d %02H:%02M:%02S")
  (add-hook 'before-save-hook 'time-stamp))
   #+end_src
   モード独自の設定(例えば Org とか)に関しては別途．
** =tramp=: ssh 越しにファイルを編集
   #+begin_src emacs-lisp
(leaf tramp
  :config
  (setq tramp-persistency-file-name (concat my:d:tmp "tramp"))
  (add-hook 'kill-emacs-hook
            (lambda ()
              (if (file-exists-p custom-file)
                  (delete-file tramp-persistency-file-name))))
  )
   #+end_src
** =eww=: 内蔵ブラウザ
   背景色の指定がメインだが、上手くうごいてくれていない、ような。
   一旦保留
   #+begin_src emacs-lisp
(leaf eww
  :bind (;; ("<f2>"    . eww)
         (:eww-mode-map
          ("r"  . eww-reload)
          ("o"  . eww)
          ("&"  . eww-browse-with-external-browser)
          ("b"  . eww-back-url)
          ("]"  . eww-next-url)
          ("["  . eww-previous-url)
          ("g"  . eww-top-url)
          ("+"  . my:eww-increase-width)
          ("-"  . my:eww-decrease-width)
          ("h"  . backward-char)
          ("j"  . next-line)
          ("k"  . previous-line)
          ("l"  . forward-char)
          ("/"  . isearch-forward)
          ("?"  . isearch-backward)
          ("n"  . isearch-next)
          ("N"  . isearch-previous)))
         ;;("f"  . ace-link-eww)))
  :init
  (unless (file-directory-p (expand-file-name "eww" my:d:tmp))
    (make-directory (expand-file-name "eww" my:d:tmp)))
  :config
  (setq eww-bookmarks-directory (expand-file-name "eww" my:d:tmp)
        eww-search-prefix "https://www.google.com/search?&gws_rd=cr&complete=0&pws=0&tbs=li:1&lr=lang_ja|lang_en&q=")
  (defvar eww-disable-colorize t)
  (defun my:shr-colorize-region--disable (orig start end fg &optional bg &rest _)
    (unless eww-disable-colorize
      (funcall orig start end fg)))
  (advice-add 'shr-colorize-region :around 'my:shr-colorize-region--disable)
  (advice-add 'eww-colorize-region :around 'my:shr-colorize-region--disable)
  (defun eww-disable-color ()
    "eww で文字色を反映させない"
    (interactive)
    (setq-local eww-disable-colorize t)
    (eww-reload))
  (defun eww-enable-color ()
    "eww で文字色を反映させる"
    (interactive)
    (setq-local eww-disable-colorize nil)
    (eww-reload))
  )
   #+end_src
** =browse-url=
   ブラウザ呼び出しは =xdg-open= に丸投げ.
   #+begin_src emacs-lisp
(leaf browse-url
  :require t
  :bind (("C-c C-j" . browse-url-at-point))
  :config
  ;; (define-key org-journal-mode-map (kbd "C-c C-j") ')
  (cond ((executable-find "xdg-open")
         (setq browse-url-browser-function 'browse-url-xdg-open
               shr-external-browser 'browse-url-xdg-open))
        ((eq system-type 'darwin)
         (setq browse-url-browser-function 'browse-url-default-macosx-browser
               shr-external-browser 'browse-url-default-macosx-browser))
        (t
         (setq browse-url-browser-function 'w3m-browse-url)))
  )
   #+end_src
** =server=: Emacs server
   #+begin_src emacs-lisp
(leaf server
  :require t
  :config
  (unless (server-running-p)
    (server-start)))
   #+end_src
** =ibuffer=: buffer の操作
   #+begin_src emacs-lisp
(leaf ibuffer
  :bind (("C-x C-b" . ibuffer-other-window)
         ("C-x b"   . ibuffer-other-window)
         ("C-x M-b" . ibuffer)
         (:ibuffer-mode-map
          ("."      . hydra-ibuffer-main/body))
         )
  :init
  (leaf hydra :ensure t
    :config
    (defhydra hydra-ibuffer-main (:color pink :hint nil)
"
 ^Navigation^ | ^Mark^        | ^Actions^        | ^View^
-^----------^-+-^----^--------+-^-------^--------+-^----^-------
  _k_:    ʌ   | _m_: mark     | _D_: delete      | _g_: refresh
 _RET_: visit | _u_: unmark   | _S_: save        | _s_: sort
  _j_:    v   | _*_: specific | _a_: all actions | _/_: filter
-^----------^-+-^----^--------+-^-------^--------+-^----^-------
"
    ("j"   ibuffer-forward-line)
    ("RET" ibuffer-visit-buffer :color blue)
    ("k"   ibuffer-backward-line)
    ("m"   ibuffer-mark-forward)
    ("u"   ibuffer-unmark-forward)
    ("*"   hydra-ibuffer-mark/body :color blue)

    ("D"   ibuffer-do-delete)
    ("S"   ibuffer-do-save)
    ("a"   hydra-ibuffer-action/body :color blue)

    ("g"   ibuffer-update)
    ("s"   hydra-ibuffer-sort/body :color blue)
    ("/"   hydra-ibuffer-filter/body :color blue)

    ("o" ibuffer-visit-buffer-other-window "other window" :color blue)
    ("q" quit-window "quit ibuffer" :color blue)
    ("." nil "toggle hydra" :color blue))

    (defhydra hydra-ibuffer-mark (:color teal :columns 5
                                         :after-exit (hydra-ibuffer-main/body))
      "Mark"
      ("*" ibuffer-unmark-all "unmark all")
      ("M" ibuffer-mark-by-mode "mode")
      ("m" ibuffer-mark-modified-buffers "modified")
      ("u" ibuffer-mark-unsaved-buffers "unsaved")
      ("s" ibuffer-mark-special-buffers "special")
      ("r" ibuffer-mark-read-only-buffers "read-only")
      ("/" ibuffer-mark-dired-buffers "dired")
      ("e" ibuffer-mark-dissociated-buffers "dissociated")
      ("h" ibuffer-mark-help-buffers "help")
      ("z" ibuffer-mark-compressed-file-buffers "compressed")
      ("b" hydra-ibuffer-main/body "back" :color blue))

    (defhydra hydra-ibuffer-action (:color teal :columns 4
                                           :after-exit
                                           (if (eq major-mode 'ibuffer-mode)
                                               (hydra-ibuffer-main/body)))
      "Action"
      ("A" ibuffer-do-view "view")
      ("E" ibuffer-do-eval "eval")
      ("F" ibuffer-do-shell-command-file "shell-command-file")
      ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
      ("H" ibuffer-do-view-other-frame "view-other-frame")
      ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
      ("M" ibuffer-do-toggle-modified "toggle-modified")
      ("O" ibuffer-do-occur "occur")
      ("P" ibuffer-do-print "print")
      ("Q" ibuffer-do-query-replace "query-replace")
      ("R" ibuffer-do-rename-uniquely "rename-uniquely")
      ("T" ibuffer-do-toggle-read-only "toggle-read-only")
      ("U" ibuffer-do-replace-regexp "replace-regexp")
      ("V" ibuffer-do-revert "revert")
      ("W" ibuffer-do-view-and-eval "view-and-eval")
      ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
      ("b" nil "back"))

    (defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
      "Sort"
      ("i" ibuffer-invert-sorting "invert")
      ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
      ("v" ibuffer-do-sort-by-recency "recently used")
      ("s" ibuffer-do-sort-by-size "size")
      ("f" ibuffer-do-sort-by-filename/process "filename")
      ("m" ibuffer-do-sort-by-major-mode "mode")
      ("b" hydra-ibuffer-main/body "back" :color blue))

    (defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
      "Filter"
      ("m" ibuffer-filter-by-used-mode "mode")
      ("M" ibuffer-filter-by-derived-mode "derived mode")
      ("n" ibuffer-filter-by-name "name")
      ("c" ibuffer-filter-by-content "content")
      ("e" ibuffer-filter-by-predicate "predicate")
      ("f" ibuffer-filter-by-filename "filename")
      (">" ibuffer-filter-by-size-gt "size")
      ("<" ibuffer-filter-by-size-lt "size")
      ("/" ibuffer-filter-disable "disable")
      ("b" hydra-ibuffer-main/body "back" :color blue))
    )
  :config
  (define-ibuffer-column icon (:name "  ")
    (let ((icon
           (if (and (buffer-file-name)
                    (all-the-icons-auto-mode-match?))
               (all-the-icons-icon-for-file
                (file-name-nondirectory (buffer-file-name)))
             (all-the-icons-icon-for-mode major-mode ))))
      (if (symbolp icon)
          (setq icon (all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver))
        icon)))
  ;;
  (setq ibuffer-formats
        `((mark modified read-only
                " " (icon 2 2 :left :elide)
                ,(propertize " " 'display `(space :align-to 8))
                (name 18 18 :left :elide)
                " " (size 9 -1 :right)
                " " (mode 16 16 :left :elide) " " filename-and-process)
          (mark " " (name 16 -1) " " filename)))
  )
   #+end_src
** その他, 基本的なキーバインドの設定
   既に手癖になってしまっているアレコレ．
   特に =[home]= と =[end]= は無いと途方に暮れます．
   #+begin_src emacs-lisp
(leaf *keybind
  :bind (("C-h"     . backward-delete-char)
         ("C-c M-a" . align-regexp)
         ("C-c ;"   . comment-region)
         ("C-c M-;" . uncomment-region)
         ("C-/"     . undo)
         ("C-c M-r" . replace-regexp)
         ("C-c r"   . replace-string)
         ("<home>"  . beginning-of-buffer)
         ("<end>"   . end-of-buffer)
         ("C-c M-l" . toggle-truncate-lines))
  )
   #+end_src
* カラーコードに色付け: =rainbow-mode=
  =#RRGGBB= のカラーコードに勝手に色が付く．CSS の編集中なんかで地味に便利．
  #+begin_src emacs-lisp
(leaf rainbow-mode :ensure t)
  #+end_src
* 対応する括弧を見易く: =rainbow-delimiters=
  #+begin_src emacs-lisp
(leaf rainbow-delimiters
  :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode))
  #+end_src
* ファイル操作: =dired=
  アイコンを表示する様にしてみた。
  #+begin_src emacs-lisp
(leaf all-the-icons-dired
  :ensure t
  :init
  (define-minor-mode my:all-the-icons-dired-mode
    "Custom: always Display all-the-icons icon for each files in a dired buffer."
    :lighter ""
    (if my:all-the-icons-dired-mode
        (progn
          (add-hook 'dired-after-readin-hook 'all-the-icons-dired--display t t)
          (when (derived-mode-p 'dired-mode)
            (all-the-icons-dired--display)))
      (remove-hook 'dired-after-readin-hook 'all-the-icons-dired--display t)
      (dired-revert)))
  :hook (dired-mode-hook . my:all-the-icons-dired-mode)
  )
  #+end_src
* チラ見: =quick-preview.el=
  ターミナルの場合に上手く動かないので folk 版を作っている
  #+begin_src emacs-lisp
(leaf quick-preview
  :el-get (quick-preview
           :type github
           :pkgname "uwabami/quick-preview.el")
  :bind (("C-c q" . quick-preview-at-point)
         (:dired-mode-map
          ("Q"    . quick-preview-at-point)))
  )
  #+end_src
* Emacs-W3m
  eww がイマイチしっくり来ないので, 結局[[http://emacs-w3m.namazu.org/index-ja.html][Emacs-w3m]]を使っている。
  #+begin_src emacs-lisp
(leaf w3m
  :if (executable-find "w3m")
  :commands (w3m-goto-url w3m-search)
  :bind (("<f2>"     . w3m)
         (:w3m-mode-map
          ("<left>"  . backward-char)
          ("<right>" . forward-char)
          ("<up>"    . previous-line)
          ("<down>"  . next-line))
         (:w3m-minor-mode-map
          ("<left>"  . backward-char)
          ("<right>" . forward-char)
          ("<up>"    . previous-line)
          ("<down>"  . next-line)))
  :config
  (setq w3m-search-default-engine "google"
        w3m-use-cookies t)
  )
  #+end_src
* =ace-link=: リンクを簡単に辿る [0/1]
  #+begin_src emacs-lisp
(leaf ace-link
  :ensure t
  :bind ((:w3m-mode-map
          ("f" . ace-link-w3m))
         (:eww-mode-map
          ("f" . ace-link-eww))
         )
  :config
  (ace-link-setup-default)
  )
  #+end_src
  - [ ] Debianパッケージ版は古い。要更新
* Elscreen
** 導入 [0/1]
   emacs-jpのfolk版を利用中。
   modeline の表示そのものは無効化しておく．
   #+begin_src emacs-lisp
(leaf elscreen
  :el-get (elscreen
           :type github
           :pkgname "emacs-jp/elscreen")
  :init
  (setq elscreen-tab-display-control nil
        elscreen-prefix-key (kbd "C-o")
        elscreen-display-tab 8
        elscreen-display-screen-number nil)
  :config
  (elscreen-start)
  )
   #+end_src
   - [ ] Debian パッケージ版は古い．更新すべき
** elscreen + zsh での連携
   詳細は
   - [[https://masutaka.net/chalow/2011-09-28-1.html][ターミナルの zsh と Emacs を風のように駆け抜ける！]]
   - [[http://syohex.hatenablog.com/entry/20111026/1319606395][cdeを改良]]
   - [[https://qiita.com/__hage/items/2dd732b4dd68e124e8bd][cdeとelscreen-separate-buffer-listの相性が悪い]]
   などを参考に.
   #+begin_src emacs-lisp
(defun return-current-working-directory-to-shell ()
  (expand-file-name
   (with-current-buffer
       (if (featurep 'elscreen)
           (let* ((frame-confs (elscreen-get-frame-confs (selected-frame)))
                  (num (nth 1 (assoc 'screen-history frame-confs)))
                  (cur-window-conf
                   (assoc 'window-configuration
                          (assoc num (assoc 'screen-property frame-confs))))
                  (marker (nth 2 cur-window-conf)))
             (marker-buffer marker))
         (nth 1
              (assoc 'buffer-list
                     (nth 1 (nth 1 (current-frame-configuration))))))
     default-directory)))
   #+end_src
* 日本語入力: =ddskk=
  [[http://openlab.ring.gr.jp/skk/ddskk-ja.html][Daredevil SKK (DDSKK)]] をメインで使用中．無いと途方に暮れる．
  ちなみにGTKが有効になっていると =gtk-immodule= なんかと衝突するので
  =~/.Xresources= で xim を無効にしておくと良い．
  例えば以下の様に:
  #+begin_src conf :tangle no
! disable XIM
Emacs*useXIM: false
  #+end_src
** Emacs 本体側の設定
   実際の設定は別ファイルで行なわれるため
   ここでは設定ファイルの位置変更を変更している．
   #+begin_src emacs-lisp
(unless (locate-library "skk")
  (package-install 'ddskk))
(leaf skk
  :bind (("C-x j"   . skk-mode)
         ("C-x C-j" . skk-mode)
         ("C-\\"    . skk-mode))
  :init
  (setq skk-user-directory (concat my:d:tmp "skk")
        skk-init-file (concat user-emacs-directory "init-ddskk")
        default-input-method "japanese-skk" )
  )
   #+end_src
** DDSKK 本体の設定
   sticky shift: [[http://homepage1.nifty.com/blankspace/emacs/sticky.html][sticky shift]] を参照のこと.
   ddskk の 14.2 以降から同梱されるようになった(ありがたい)
   #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-sticky-key ";")
   #+end_src
   変換候補の表示位置
   #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-show-candidates-always-pop-to-buffer t)
   #+end_src
   候補表示件数を2列に
   #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-henkan-show-candidates-rows 2)
   #+end_src
   日本語表示しない
   #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-japanese-message-and-error nil)
   #+end_src
   メニューを日本語にしない -> toolbar 非表示だし.
   #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-show-japanese-menu nil)
   #+end_src
   注釈の表示
   #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-show-annotation nil)
   #+end_src
   インジケータの表示のカスタマイズ
   #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-latin-mode-string "[_A]")
(setq skk-hiragana-mode-string "[あ]")
(setq skk-katakana-mode-string "[ア]")
(setq skk-jisx0208-latin-mode-string "[Ａ]")
(setq skk-jisx0201-mode-string "[_ｱ]")
(setq skk-abbrev-mode-string "[aA]")
(setq skk-indicator-use-cursor-color nil)
   #+end_src
   インジケータを左端に表示
   #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-status-indicator 'left)
   #+end_src
   mode-line が動くのが許せないので，ちょっと修正
   #+begin_src emacs-lisp :tangle init-ddskk.el
(defadvice skk-make-indicator-alist
    (after my:set-skk-default-indicator activate)
  (dolist (elem
           '((abbrev " [aA]" . "--[aA]:")
             (latin " [_A]" . "--[_A]:")
             (default " [--]" . "--[--]:")))
    (setq ad-return-value
          (append (cons elem nil)
                  (delq (assoc (car elem) ad-return-value) ad-return-value)))))
(setq skk-show-inline t)
   #+end_src
   カーソルには色をつけない
   #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-use-color-cursor nil)
   #+end_src
*** 編集関連
    キーバインド
    #+begin_src emacs-lisp :tangle init-ddskk.el
(global-set-key "\C-x\C-j" 'skk-mode)
(global-set-key "\C-xj" 'skk-mode)
(global-set-key "\C-j" 'skk-mode)
(global-set-key "\C-\\" 'skk-mode)
    #+end_src
    半角カナを入力
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-use-jisx0201-input-method t)
    #+end_src
    Enter で改行しない
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-egg-like-newline t)
    #+end_src
    "「"を入力したら"」"も自動で挿入
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-auto-insert-paren t)
    #+end_src
    句読点変換ルール
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-kuten-touten-alist
      '(
        (jp    . ("。" . "、"))
        (jp-en . ("。" . ", "))
        (en-jp . ("．" . "，"))
        (en    . (". " . ", "))
        ))
(setq-default skk-kutouten-type 'en)
    #+end_src
    全角記号の変換: @ での日付入力は使わない
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-rom-kana-rule-list
      (append skk-rom-kana-rule-list
              '(("!" nil "!")
                (":" nil ":")
                (";" nil ";")
                ("?" nil "?")
                ("z " nil "　")
                ("\\" nil "\\")
                ("@" nil "@")
                )))
    #+end_src
    送り仮名が厳密に正しい候補を優先
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-henkan-strict-okuri-precedence t)
    #+end_src
    辞書の共有
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-share-private-jisyo t)
    #+end_src
    変換候補を縦に表示
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-show-inline 'vertical)
    #+end_src
*** インクリメンタルサーチ
    minibuffer 内では強制的に skk off.
    #+begin_src emacs-lisp :tangle init-ddskk.el
(add-hook 'skk-mode-hook
          (lambda ()
            (and (skk-in-minibuffer-p)
                 (skk-mode-exit))))
(setq skk-isearch-start-mode 'latin)
    #+end_src
    インクリメンタルサーチは migemo に任せることに．
*** 辞書の設定
    追加している辞書の一覧は
    - [[http://www.chibutsu.org/jisho/][地球物理辞書]]
    - [[http://www.geocities.jp/living_with_plasma/tanudic.html][天文・天体物理用語の漢字変換用辞書]]
    - はてなキーワード
    - [[http://matsucon.net/material/dic/][2ちゃんねる顔文字辞書 MatsuCon]]
    - [[http://matsucon.net/][MatsuCon]]
    といった所.
    はてなキーワードからの辞書の抽出は [[http://d.hatena.ne.jp/znz][znz]] さんの
    - [[http://rubyist.g.hatena.ne.jp/znz/20060924/p1][「はてなダイアリーキーワードふりがなリスト」を SKK の辞書に変換]]
    を参考に.
    [[http://matsucon.net/][MatsuCon]] で公開されている顔文字に関しては
    顔文字に ; や が含まれている場合に, 適宜quoteする必要があるので
    以下のスクリプトで適当に変換.
    #+begin_src ruby :tangle no
#!/usr/bin/env ruby
require 'nkf'
src = ARGV[0]
if ARGV.size < 1
  puts "usage: ime2skk.rb ime_dictionary"
  exit 0
end
File.open(src, "r") {|f|
  f.each do |line|
    line_euc = NKF.nkf("-S -e",line)
    if line_euc =~ /^([^!]+?)\t(.+?)\t.+$/
      entry = $1
      content = $2
      if content =~/;/
        puts entry + " /(concat \"" + content.gsub(';','\\\\073') + "\")/"
      elsif content =~/\//
        puts entry + " /(concat \"" + content.gsub('/','\\\\057') + "\")/"
      else
        puts entry + " /" + content + "/"
      end
    end
  end
}
    #+end_src
    他にも quote する必要あるような気もするけれど, それは気がついた時に.

    辞書サーバの指定は以下.
    #+begin_src emacs-lisp :tangle init-ddskk.el
(cond
 ((getenv "SKKSERVER")
  (setq skk-server-host "127.0.0.1"
        skk-server-portnum "1178"
        skk-large-jisyo  nil)
  (add-to-list 'skk-search-prog-list
               '(skk-server-completion-search) t)
  (add-to-list 'skk-search-prog-list
               '(skk-comp-by-server-completion) t))
 (t
  (setq skk-get-jisyo-directory (concat my:d:tmp "skk-jisyo")
        skk-large-jisyo (concat skk-get-jisyo-directory "/SKK-JISYO.L")))
 )
(when (file-exists-p "/usr/local/share/skkdic/SKK-JISYO.emoji.utf8")
  (setq skk-extra-jisyo-file-list
        (list '("/usr/local/share/skkdic/SKK-JISYO.emoji.utf8" . utf-8))))
    #+end_src
    辞書登録の際に送り仮名を削除
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-check-okurigana-on-touroku 'auto)
    #+end_src
    漢字登録のミスをチェックする
    #+begin_src emacs-lisp :tangle init-ddskk.el
(setq skk-check-okurigana-on-touroku t)
    #+end_src
*** 動的補完
    まだ設定していない...
    #+begin_src emacs-lisp :tangle init-ddskk.el
;; ;; 動的補完
;; (setq skk-dcomp-activate t)
;; (setq skk-dcomp-multiple-activate t)
;; (setq skk-dcomp-multiple-rows 5)
;; ;; 動的補完の複数表示群のフェイス
;; (set-face-foreground 'skk-dcomp-multiple-face "Black")
;; (set-face-background 'skk-dcomp-multiple-face "LightGoldenrodYellow")
;; (set-face-bold-p 'skk-dcomp-multiple-face nil)
;; ;; 動的補完の複数表示郡の補完部分のフェイス
;; (set-face-foreground 'skk-dcomp-multiple-trailing-face "dim gray")
;; (set-face-bold-p 'skk-dcomp-multiple-trailing-face nil)
;; ;; 動的補完の複数表示郡の選択対象のフェイス
;; (set-face-foreground 'skk-dcomp-multiple-selected-face "White")
;; (set-face-background 'skk-dcomp-multiple-selected-face "LightGoldenrod4")
;; (set-face-bold-p 'skk-dcomp-multiple-selected-face nil)
    #+end_src
*** 部首変換, 総画数変換
    上手く使いこなせていない
    #+begin_src emacs-lisp :tangle init-ddskk.el
(add-to-list 'skk-search-prog-list
             '(skk-tankan-search 'skk-search-jisyo-file
                                 skk-large-jisyo 10000))
    #+end_src
* Copy & Paste:
** Linux では =xclip= を利用。
   clipboard と PRIMARY の同期には =gpaste= を使っている．
   #+begin_src emacs-lisp
(leaf xclip
  :if (and (executable-find "xclip")
           (eq system-type 'gnu/linux))
  :ensure t
  :config
  (xclip-mode 1))
   #+end_src
** macOS では =pbcopy/pbpaste= を利用する。
   =pbcopy/pbpase= の呼び出し方が変わった? 動かない時がある様な。
   #+BEGIN_SRC emacs-lisp
(leaf *macOSclipborad
  :if (eq system-type 'darwin)
  :config
  (defun my:copy-from-osx ()
    "Get string via pbpaste"
    (shell-command-to-string "pbpaste"))
  (defun my:paste-to-osx (text &optional push)
    "put `TEXT' via pbcopy with `PUSH' mode"
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))
  (setq interprogram-cut-function 'my:paste-to-osx
        interprogram-paste-function 'my:copy-from-osx)
  )
   #+END_SRC
* インクリメンタル検索: =migemo=
  稀に暴走する, ような...?
  #+begin_src emacs-lisp
(leaf migemo
  :if (executable-find "cmigemo")
  :require t
  :config
  (cond
   ((and (eq system-type 'darwin)
         (file-directory-p "/usr/local/share/migemo/utf-8/"))
    (setq migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict"))
   (t
    (setq migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict"))
   )
  (setq migemo-command "cmigemo"
        migemo-options '("-q" "--emacs")
        migemo-user-dictionary nil
        migemo-regex-dictionary nil
        migemo-coding-system 'utf-8-unix)
  (migemo-init)
  )
  #+end_src
* 校正，辞書等
** RedPen
   便利そうなんだけれど, イマイチ上手く使いこなせていない。
   #+begin_src emacs-lisp
(leaf redpen-paragraph
  :if (executable-find "redpen")
  ;; :el-get (redpen-paragraph
  ;;          :type github
  ;;          :pkgname "karronoli/redpen-paragraph.el")
  :ensure t
  :bind (("C-c R" . redpen-paragraph))
  :config
  (defvar redpen-commands
    '("redpen -r json -c ~/.config/redpen/redpen-conf-en.xml %s 2>/dev/null"
      "redpen -r json -c ~/.config/redpen/redpen-conf-ja.xml %s 2>/dev/null"))
  (add-hook 'kill-emacs-hook
            (lambda ()
              (if (file-exists-p redpen-temporary-filename)
                  (delete-file redpen-temporary-filename))))
  )
   #+end_src
** spell checker
   ispell はコマンドとして =aspell= を利用する．
   #+begin_src emacs-lisp
(leaf ispell
  :if (file-executable-p "aspell")
  :init
  (setq-default ispell-program-name "aspell")
  :config
  (add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")))
   #+end_src
   flyspell-mode は別途有効化しておいた方が良いのかもしれない
   #+begin_src emacs-lisp
(leaf flyspell
  :config
  (defun my:flyspell-popup-choose (orig event poss word)
    (if (window-system)
        (funcall orig event poss word)
      (flyspell-emacs-popup-textual event poss word)))
  (advice-add 'flyspell-emacs-popup :around #'my:flyspell-popup-choose)
  )
   #+end_src
** 辞書
   #+begin_src emacs-lisp
(leaf lookup
  :if (and (my:dpkg-status "lookup-el")
           (file-exists-p "/usr/local/share/dict/lookup-enabled"))
  :commands (lookup lookup-region lookup-pattern)
  :bind (("C-c w" . lookup-pattern)
         ("C-c W" . lookup-word))
  :init
  (setq lookup-search-agents
        '(
          (ndeb   "/usr/local/share/dict/eijiro"    :alias "英辞郎")
          (ndeb   "/usr/local/share/dict/waeijiro"  :alias "和英辞郎")
          (ndeb   "/usr/local/share/dict/rikagaku5" :alias "理化学辞典 第5版")
          (ndeb   "/usr/local/share/dict/koujien4"  :alias "広辞苑 第4版")
          (ndeb   "/usr/local/share/dict/wadai5"    :alias "研究社 和英大辞典 第5版")
          (ndeb   "/usr/local/share/dict/eidai6"    :alias "研究社 英和大辞典 第6版")
          (ndeb   "/usr/local/share/dict/colloc"    :alias "研究社 英和活用大辞典 ")
          )))
   #+end_src
* 認証関連: =plstore=, =oauth2=, =password-store=
** oauth2, plstore
   oauth2 の認証情報は =plstore= で保存される．
   ファイルの置き場所と暗号鍵の設定をしておく.
   また, plstore のデフォルトは対称鍵暗号化なので，
   =GPG_KEY_ID= を設定しておく.
   #+begin_src emacs-lisp
(leaf *authehtification
  :if (getenv "GPG_KEY_ID")
  (leaf oauth2
    :ensure t
    :init
    (setq oauth2-token-file (concat my:d:tmp "oauth2.plstore"))
    )
  (leaf plstore
    :ensure t
    :init
    (setq plstore-secret-keys 'silent
          plstore-encrypt-to (getenv "GPG_KEY_ID"))
    )
  )
   #+end_src
** password-store, auth-password-store
   auth-source として =password-store= を使う拡張
   #+begin_src emacs-lisp
(leaf *password-store
  :if (and my:d:password-store
           (executable-find "pass"))
  (leaf password-store :ensure t)
  (leaf auth-source-pass :ensure t)
  )
   #+end_src
** id-manager の設定
   ID と Password の簡単な組の管理をするのに非常に重宝していました。
   最近は =password-store= を使う様になったので, そのうち全部移行しますが, とりあえず。
   #+BEGIN_SRC emacs-lisp
(leaf id-manager
  :if (file-exists-p "~/.gnupg/idm-db.gpg")
  :ensure t
  :bind ("M-7" . idm-open-list-command)
  :config
  (setq idm-database-file
        (expand-file-name "~/.gnupg/idm-db.gpg"))
  (setq idm-clipboard-expire-time-sec 30)
  )
   #+END_SRC
* MUA の設定: =wanderlust=
  MUA として Wanderlust を使っている
** Emacs 本体側の設定
   Emacs 本体での設定は以下の通り. Wanderlust 自体の設定は別ファイルで行なわれる．
   ここでは =wl-init-file= を指定することで，設定ファイルを明示している．
   #+begin_src emacs-lisp
(leaf wl
  :if (and (or (my:dpkg-status "wl")
               (my:dpkg-status "wl-beta"))
           (my:dpkg-status "rail"))
  :commands (wl wl-other-frame wl-draft wl-user-agent wl-user-agent-compose wl-draft-send wl-draft-kill)
  :init
  (define-mail-user-agent
    'wl-user-agent
    'wl-user-agent-compose
    'wl-draft-send
    'wl-draft-kill
    'mail-send-hook)
  (setq elmo-msgdb-directory "~/.cache/wanderlust"
        elmo-maildir-folder-path "~/.cache/wanderlust"
        elmo-cache-directory "~/.cache/wanderlust"
        wl-score-files-directory "~/.cache/wanderlust"
        wl-init-file (concat user-emacs-directory "init-wl")
        mail-user-agent 'wl-user-agent
        read-mail-command 'wl)
  (unless (file-directory-p elmo-msgdb-directory)
    (make-directory elmo-msgdb-directory))
  (unless (file-directory-p (concat elmo-msgdb-directory "/local"))
    (make-directory (concat elmo-msgdb-directory "/local")))
  (unless (file-directory-p (concat elmo-msgdb-directory "/local/Trash"))
    (make-directory (concat elmo-msgdb-directory "/local/Trash")))
  :config
  (defun my:wl-mode-line-buffer-identification (&optional id)
    (force-mode-line-update t))
  (advice-add 'wl-mode-line-buffer-identification
              :override 'my:wl-mode-line-buffer-identification)
  )
   #+end_src
   割と =/etc/emacs/site-start.d/65wl-beta.el= と重複している気がするが...
** Wanderlust 本体の設定
   実際の設定は以下の通り
*** byte-compile の準備
     #+begin_src emacs-lisp :tangle init-wl.el
(eval-when-compile
  (require 'cp5022x)
  (require 'el-x)
  (require 'wl)
  (require 'mime-def))
     #+end_src
*** 依存/追加ライブラリのインストールと読み込み
**** rail
     SEMI や FLIM などの UA の表示に [[http://uwabami.github.com/rail/][rail]] を使っている.
     ちなみに rail を有効にすると, 以下の様に User-Agent が表示される
     #+html: <div class="col-7 px2 mx-auto">
     #+html: <amp-img layout="responsive" width=640 height=400 src="https://uwabami.github.io/software/rail/images/wanderlust_with_or_without_rail.png" alt="rail preview"></amp-img>
     #+html: </div>

     #+begin_src emacs-lisp :tangle init-wl.el
(leaf rail
  :config
  (setq rail-emulate-genjis t))
     #+end_src
**** cp5022x を使う
     ISO-2022-JP を CP50220 として扱う.
     [[http://d.hatena.ne.jp/kiwanami/20091103/1257243524][Wanderlustと文字コード]] も参照のこと.
     #+begin_src emacs-lisp :tangle init-wl.el
(add-to-list 'mime-charset-coding-system-alist '(iso-2022-jp . cp50220))
(setq wl-mime-charset 'iso-2022-jp)
     #+end_src
**** elscreen-wl [0/1]
     メール作成時に =elscreen= と連携してくれる．便利
     #+begin_src emacs-lisp :tangle init-wl.el
(leaf elscreen-wl
  :disabled t
  :el-get (elscreen-wl
           :type github
           :pkgname "syohex/emacs-elscreen-wl")
  )
     #+end_src
     - [ ] 最近上手く動いていない. 一旦保留
**** SEMI の追加設定
     HTML メールを表示するために eww を使う.
     mime-setup がロードされる前に記述する必要あり.
     #+begin_src emacs-lisp :tangle init-wl.el
;; (setq mime-view-text/html-previewer 'shr)
;; (setq mime-setup-enable-inline-html 'shr)
;; 幅指定 → 実際の関数は eww の設定を参照
;; (defvar my:shr-width 78)
;; (defun my:shr-insert-document (&rest them)
;;   (let ((shr-width (min (1- (window-width)) my:shr-width)))
;;    (apply them)))
;; (defun my:mime-shr-preview-text/html (&rest args)
;;   (advice-add 'shr-insert-document :around 'my:shr-insert-document)
;;   (unwind-protect
;;       (apply args)
;;     (advice-remove 'shr-insert-document 'my:shr-insert-document)))
;; (advice-add 'mime-shr-preview-text/html :around
;;            'my:mime-shr-preview-text/html)
;;
(leaf mime-w3m :require t)
(leaf mime-setup)
     #+end_src
     どのアプリケーションで開くか → =xdg-open= に丸投げ．
     #+begin_src emacs-lisp :tangle init-wl.el
;; (setq mime-view-mailcap-files '("~/.mailcap"))
     #+end_src
     =~/.mailcap= 自体は以下
     #+begin_src conf :tangle no
applications/*; xdg-open %s;
image/*; xdg-open %s;
video/*; xdg-open %s;
     #+end_src
     MIME の例の保存先の変更
     #+begin_src emacs-lisp :tangle init-wl.el
(setq mime-situation-examples-file
      (concat my:d:tmp "mime-example"))
     #+end_src
     text/plain を html より優先
     #+begin_src emacs-lisp :tangle no
(setq mime-view-type-subtype-score-alist
      '(((text . plain) . 0)
        ((text . html)  . 1)
        ))
     #+end_src
     音を鳴らすアレやコレの無効化
     #+begin_src emacs-lisp :tangle init-wl.el
(setq mime-play-find-every-situations nil
      mime-play-delete-file-immediately nil
      process-connection-type nil)
     #+end_src
*** 個人情報の設定
    具体的な設定内容は以下のファイルに置いている
    #+begin_src emacs-lisp :tangle init-wl.el
(load (concat my:d:password-store "/wl-info.gpg"))
    #+end_src
    設定している内容は以下の通り
**** 自身のメールアドレスと購読メーリングリストの設定
     #+begin_src emacs-lisp :tangle no
;; From: の設定
(setq wl-from (concat user-full-name " <" user-mail-address ">"))
;; (system-name) が FQDN を返さない場合、
;; `wl-local-domain' にホスト名を除いたドメイン名を設定
(setq wl-local-domain "example.com")
;; 自分のメールアドレスのリスト
(setq wl-user-mail-address-list
      (list (wl-address-header-extract-address wl-from)
            ;; "e-mail2@example.com"
            ;; "e-mail3@example.net" ...
            ))
;; 自分の参加しているメーリングリストのリスト
(setq wl-subscribed-mailing-list
      '("wl@lists.airs.net"
        "apel-ja@m17n.org"
        "emacs-mime-ja@m17n.org"
        ;; "ml@example.com" ...
        ))
     #+end_src
**** 送受信用サーバの設定
     受信(IMAP)
     #+begin_src emacs-lisp :tangle no
(setq elmo-imap4-default-server "your imap server")
(setq elmo-imap4-default-port '993)
(setq elmo-imap4-default-stream-type 'ssl)
     #+end_src
     送信(SMTP)
     #+begin_src emacs-lisp :tangle no
(setq wl-smtp-posting-server "your smtp server")
(setq wl-smtp-posting-user "your account")
(setq wl-smtp-posting-port 587)
(setq wl-smtp-connection-type 'starttls)
(setq wl-smtp-authenticate-type "login")
     #+end_src
**** From に応じて送信サーバをきりかえる.
     本来はメール作成時/返信時の template の切り替えなのだれど,
     送信時の SMTP の設定を from に合わせてきりかえるようにする.
     default に二重に指定しているのは，
     一度別のアカウントに切り替えた後に再びトグルして戻って来た際に元に戻す(上書き)するため.
     #+begin_src emacs-lisp :tangle no
(setq wl-template-alist
      '(("default"
         ("From" . wl-from)
         (wl-smtp-posting-server . "your smtp server")
         (wl-smtp-posting-user . "your account")
         (wl-smtp-posting-port . 587)
         (wl-smtp-connection-type . 'starttls)
         (wl-smtp-authenticate-type . "login")
         )
        ("example1"
         ("From" . "Your Name <account@example1.com>")
         (wl-smtp-posting-server . "smtp.example1.com")
         (wl-smtp-posting-user . "your account")
         (wl-smtp-posting-port . 587)
         (wl-smtp-connection-type . 'starttls)
         (wl-smtp-authenticate-type . "login")
         )
        ("example2"
         ("From" . "Your Name <account@example2.com>")
         (wl-smtp-posting-server . "smtp.example2.com")
         (wl-smtp-posting-user . "your account")
         (wl-smtp-posting-port . 587)
         (wl-smtp-connection-type . 'starttls)
         (wl-smtp-authenticate-type . "plain")
         )
        ("ssh:smtp"
         ;; need ssh tunnel
         ;; ssh -f -N -L 20025:localhost:25 smtp.server.com
         ("From" . "Your Name <account@example3.com>")
         (wl-smtp-posting-server . "localhost")
         (wl-smtp-posting-user . "your ssh account")
         (wl-smtp-posting-port . 20025)
         (wl-smtp-connection-type . 'nil)
         (wl-smtp-authenticate-type . 'nil)
         )
        ))
     #+end_src
     ssh tunnel を自動的にやる事はできないモンだろうか
     (送信時に open して, 送信後に close する, みたいなの).

     ついでに template の切り替えに関して幾つか設定.
     #+begin_src emacs-lisp :tangle init-wl.el
;; template 切り替え時に 内容を表示
(setq wl-template-visible-select t)
     #+end_src
     =draft-mode= で =C-c C-n= をするとテンプレートを切り替え
     #+begin_src emacs-lisp  :tangle init-wl.el
(define-key wl-draft-mode-map "\C-c\C-n" 'wl-template-select)
     #+end_src
     from に応じて wl-from, wl-envelope-from,
     送信 smtp サーバを変更する送信時に変更
     #+begin_src emacs-lisp  :tangle init-wl.el
(add-hook 'wl-draft-send-hook
          (lambda ()
            (set (make-local-variable 'wl-from)
                 (std11-fetch-field "From"))))
     #+end_src
     送信時に自動的に wl-draft-config-alist を適用...しない?
     #+begin_src emacs-lisp  :tangle init-wl.el
(remove-hook 'wl-draft-send-hook 'wl-draft-config-exec)
     #+end_src
*** 基本設定
**** imap 関連
     デフォルトの認証設定
     フォルダ名は UTF-7 でエンコードされているので,
     表示する際にこれをデコードする
     #+begin_src emacs-lisp :tangle init-wl.el
(setq elmo-imap4-use-modified-utf7 t)
     #+end_src
**** 非同期チェック
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-folder-check-async t)
     #+end_src
**** フォルダの位置の default からの変更
     =~/.cache/wanderlust/= に集約している
     local の Mail folder の位置
     #+begin_src emacs-lisp :tangle init-wl.el
(setq elmo-maildir-folder-path "~/.cache/wanderlust"
      elmo-localdir-folder-path "~/.cache/wanderlust/local")
     #+end_src
     local フォルダの設定:
     =.lost+found= は =elmo-maildir-folder-path= からの相対パスになっていることに注意
     #+begin_src emacs-lisp :tangle init-wl.el
(setq elmo-lost+found-folder ".lost+found")
(setq wl-queue-folder "+queue")
     #+end_src
     folders の位置の変更
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-folders-file (concat my:d:password-store "/wl-folders.gpg"))
     #+end_src
     Drafts, Trash の置き場所
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-draft-folder "+Drafts")
(setq wl-trash-folder "+Trash")
(setq elmo-lost+found-folder "+lost+found")
(setq wl-temporary-file-directory "~/Downloads/")
     #+end_src
     アドレス帳
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-use-petname t)
(setq wl-address-file  "~/.mua/Address")
     #+end_src
     LDAP サーバからアドレスを引くことも可能.
     以前は GCALDaemon を使って local に ldap サーバを上げていたのだけれども,
     Google Contacts の API が変わったらしく
     GCALDaemon で LDAP サーバは使えなくなったのでコメントアウト.
     #+begin_src emacs-lisp :tangle no
(setq wl-use-ldap t)
(setq wl-ldap-server "localhost")
(setq wl-ldap-port "389")
(setq wl-ldap-base "dc=math,dc=kyoto-u,dc=ac,dc=jp")
     #+end_src
     パスワードの保存先
     #+begin_src emacs-lisp :tangle init-wl.el
(setq elmo-passwd-alist-file-name (concat my:d:password-store "/wl-passwd.gpg"))
     #+end_src
**** フォルダ編集時に backup を作成しない.
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-fldmgr-make-backup nil)
     #+end_src
**** FCC, BCC の設定
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-fcc nil)
;; (setq wl-fcc "%Sent")
     #+end_src
     fcc を既読にする場合は以下．=wl-fcc= が nil の場合には意味は無い
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-fcc-force-as-read t)
     #+end_src
     bcc は常に自身に.
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-bcc (concat user-mail-address))
     #+end_src
**** 起動時に =%INBOX= のみをチェック
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-auto-check-folder-name "%INBOX")
     #+end_src
**** フォルダ選択時の初期設定
     imap の namespace を毎度入力するのが面倒なので，これを追加しておく.
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-default-spec "%")
     #+end_src
**** confirm 関連の設定
     スキャン時の問い合わせの無効化.
     ちなみに confirm を nil にしても 問い合わせが無いだけで
     threshold は効くので, 明示的に nil に.
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq elmo-folder-update-confirm nil)
(setq elmo-folder-update-threshold nil)
(setq elmo-message-fetch-confirm nil)
(setq elmo-message-fetch-threshold nil)
(setq wl-prefetch-confirm nil)
(setq wl-prefetch-threshold nil)
     #+end_src
     終了時に確認しない
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-interactive-exit nil)
     #+end_src
     送信時は確認する
     #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-interactive-send t)
     #+end_src
**** misc.
     大きいメッセージを送信時に分割しない
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq mime-edit-split-message nil)
     #+end_src
     スレッドは常に閉じる
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-thread-insert-opened nil)
     #+end_src
     3 pain 表示 -> 使わない
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-stay-folder-window nil)
     #+end_src
     未読を優先的に読む
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-summary-move-order 'unread)
     #+end_src
     改ページ無視
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-break-pages nil)
     #+end_src
     icon を使わない → GUI でもメニュー表示してないし, 体感的には遅くなる
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-highlight-folder-with-icon nil)
     #+end_src
**** dispose, delete の設定
     Gmail用に%INBOXでは削除を =wl-trash-folder= への移動ではなく，「delete」に．
     #+begin_src emacs-lisp   :tangle init-wl.el
(add-to-list 'wl-dispose-folder-alist
             '("^%INBOX" . remove))
     #+end_src
     迷惑メール関連も
     #+begin_src emacs-lisp   :tangle init-wl.el
(add-to-list 'wl-dispose-folder-alist
             '(".*Junk$" . remove))
     #+end_src
**** 折り返しの設定
     message は折り返す.
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-message-truncate-lines nil)
     #+end_src
     draft も折り返す
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-draft-truncate-lines nil)
     #+end_src
**** mode-line の設定
     長いと嫌なのでイロイロ削る
     #+begin_src emacs-lisp   :tangle init-wl.el
(setq wl-summary-mode-line-format "") ; "%f {%t}(%n/%u/%a)"
(setq wl-message-mode-line-format "") ; "<< %f:%F>> [%m]"
     #+end_src
*** キーバインド関連
    =C-c C-j= を browse-url に明け渡す
    #+begin_src emacs-lisp :tangle init-wl.el
(define-key wl-draft-mode-map "\C-c\C-j" 'browse-url-at-point)
    #+end_src
    =M-u= で unread にする
    #+begin_src emacs-lisp :tangle init-wl.el
(define-key wl-summary-mode-map "\M-u" 'wl-summary-mark-as-unread)
    #+end_src
    =i= で sync <- Mew 風
    #+begin_src emacs-lisp :tangle init-wl.el
(define-key wl-summary-mode-map "i" 'wl-summary-sync-update)
    #+end_src
    =C-o= は elscreen で使う
    #+begin_src emacs-lisp :tangle init-wl.el
(define-key wl-summary-mode-map "\C-o" nil )
    #+end_src
    =M-o= で =auto-refile=  (Mew 風)
    #+begin_src emacs-lisp :tangle init-wl.el
(define-key wl-summary-mode-map "\M-o" 'wl-summary-auto-refile)
    #+end_src
*** flag とフォルダを行き来する関数の追加
    "=" でフラグ付きフォルダと
    実際にメッセージのあるフォルダを行き来する.
    Gmail の「スター付き」フォルダでも有効
    #+begin_src emacs-lisp :tangle init-wl.el
(require 'elmo nil 'noerror)
(defun my:wl-summary-jump-to-referer-message ()
  (interactive)
  (when (wl-summary-message-number)
    (if (eq (elmo-folder-type-internal wl-summary-buffer-elmo-folder) 'flag)
        (progn
          (let* ((referer (elmo-flag-folder-referrer
                           wl-summary-buffer-elmo-folder
                           (wl-summary-message-number)))
                 (folder (if (> (length referer) 1)
                             (completing-read
                              (format "Jump to (%s): " (car (car referer)))
                              referer
                              nil t nil nil (car (car referer)))
                           (car (car referer)))))
            (wl-summary-goto-folder-subr folder 'no-sync nil nil t)
            (wl-summary-jump-to-msg (cdr (assoc folder referer)))))
      (when (eq (elmo-folder-type wl-summary-last-visited-folder) 'internal)
        (wl-summary-goto-last-visited-folder)))))
(define-key wl-summary-mode-map "=" 'my:wl-summary-jump-to-referer-message)
    #+end_src
*** summary-mode の表示のカスタマイズ
**** 自分が差出人である mail は To:某 と表示
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-summary-showto-folder-regexp ".*")
(setq wl-summary-from-function 'wl-summary-default-from)
     #+end_src
**** サマリ行の表示関連
     サマリ行のフォーマット指定
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-summary-line-format
      "%T%P%1@%1>%Y/%M/%D %21(%t%[%19(%c %f%)%]%) %#%~%s"
      wl-summary-width 84)
     #+end_src
     サマリ表示は切り詰めない
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-subject-length-limit t)
     #+end_src
     スレッドの幅の指定
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-thread-indent-level 2)
(setq wl-thread-have-younger-brother-str "+"
      wl-thread-youngest-child-str "+"
      wl-thread-vertical-str "|"
      wl-thread-horizontal-str "-"
      wl-thread-space-str " ")
     #+end_src

     以下の二つの設定を有効にするには
     =elmo-msgdb-extra-fields= を設定する必要がある.
     この変数は振り分け判定にも使用するのでそこで設定している
**** Gmail 風に, 自分宛のメールに ">" をつけて表示する
     元ネタ [[http://d.hatena.ne.jp/khiker/20080206/wanderlust]]
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-user-mail-address-regexp "^uwabami.*\\|^sasakyh.*")
;; 一覧表示での置き換え規則に追加
(defun my:wl-summary-line-for-me ()
  (if (catch 'found
        (let ((to (elmo-message-entity-field wl-message-entity 'to))
              (cc (elmo-message-entity-field wl-message-entity 'cc)))
          (when (or (stringp to) cc)
            (setq to
                  (append (if (stringp to) (list to) to)
                          (when cc
                            (if (stringp cc) (list cc) cc)))))
          (dolist (i to)
            (when (wl-address-user-mail-address-p (eword-decode-string i))
              (throw 'found t)))))
      ">"
    ""))
;; > を summary-line-format に追加
(setq wl-summary-line-format-spec-alist
      (append wl-summary-line-format-spec-alist
              '((?> (my:wl-summary-line-for-me)))))
     #+end_src
**** 添付ファイルがあったら, サマリ行に @ を付ける
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-summary-line-format-spec-alist
      (append wl-summary-line-format-spec-alist
              '((?@ (wl-summary-line-attached)))))
     #+end_src
**** クォートされた文字列もデコードする
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq mime-header-lexical-analyzer
      '(
        ;; eword-analyze-quoted-string
        eword-analyze-domain-literal
        eword-analyze-comment
        eword-analyze-spaces
        eword-analyze-special
        eword-analyze-encoded-word
        eword-analyze-atom))
     #+end_src
**** Subject が変わってもスレッドを切らない
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-summary-divide-thread-when-subject-changed nil)
     #+end_src
**** Subject での Tab や複数スペースを無視
     #+begin_src emacs-lisp  :tangle init-wl.el
(defadvice std11-unfold-string (after simply activate)
  (setq ad-return-value
        (elmo-replace-in-string ad-return-value "[ \t]+" " ")))
     #+end_src
**** 重複メッセージを非表示に
     フォルダ内の Message-ID が同じメールを非表示にする
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-folder-process-duplicates-alist
      '(
        (".*" . hide)
        ))
     #+end_src
**** sort 順: 返信が来た順
     元ネタは [[http://ikazuhiro.s206.xrea.com/article.php/20140920115345919][Re: wanderlust で GMail 風、新着レス順にソート]].
     あんまり頑張る気がなかったので =el-x= にある =dflet= を使っている。
     #+begin_src emacs-lisp  :tangle init-wl.el
(leaf el-x :ensure t :require t)
(defun wl-summary-overview-entity-compare-by-reply-date (a b)
  "Compare message A and B by latest date of replies including thread."
  (dflet ((string-max2 (x y) (cond ((string< x y) y)
                                  ('t x)))
         (elmo-entity-to-number (x)
                                (elt (cddr x) 0))
         (thread-number-get-date (x)
                                 (timezone-make-date-sortable
                                  (elmo-msgdb-overview-entity-get-date
                                   (elmo-message-entity
                                    wl-summary-buffer-elmo-folder
                                    x))))
         (thread-get-family (x)
                            (cons x (wl-thread-entity-get-descendant
                                     (wl-thread-get-entity x))))
         (max-reply-date  (x)
                          (cond ((eq 'nil x)
                                 'nil)
                                ((eq 'nil (cdr x))
                                 (thread-number-get-date (car x)))
                                ('t
                                 (string-max2 (thread-number-get-date (car x))
                                              (max-reply-date (cdr x))))))
         )
    (string<
     (max-reply-date (thread-get-family (elmo-entity-to-number a)))
     (max-reply-date (thread-get-family (elmo-entity-to-number b))))))
(add-to-list 'wl-summary-sort-specs 'reply-date)
(setq wl-summary-default-sort-spec 'reply-date)
     #+end_src
*** 振り分け設定
    =$= 以外を振り分け対象に
    #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-summary-auto-refile-skip-marks '("$"))
    #+end_src
**** 振り分け判定に使用するヘッダ
     添付の有無の表示にも使うので =Content-Type= も登録.
     あと =Delivered-To= はメールの検索の時に結構重宝している.
     #+begin_src emacs-lisp :tangle init-wl.el
(setq elmo-msgdb-extra-fields
      '(
        "List-Post"
        "List-Id"
        "List-ID"                  ;; たまに List-ID で来るメールあるよね?
        "Resent-CC"
        "Mailing-List"
        "X-Mailing-List"
        "X-ML-Address"
        "X-ML-Name"
        "X-ML-To"
        "Delivered-To"
        "Content-Type"              ;; 添付の有無の表示の為に追加
        "X-Google-Appengine-App-Id" ;; GAEの送信するメールの振り分け用
        "To"
        "Cc"
        "From"
        "Subject"
        "Reply-To"
        "Auto-Submitted"            ;; Git commit/Cron notify
        ))
     #+end_src
*** メッセージ表示
**** いったん全て非表示に
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-message-ignored-field-list '("^.*:"))
     #+end_src
**** 見たいヘッダだけ表示
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-message-visible-field-list
      '("^Subject:"
        "^From:"
        "^To:"
        "^Cc:"
        "^Date:"
        "^Message-ID:"
        ))
     #+end_src
**** 表示順の変更
     Mew 風...
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-message-sort-field-list
      '("^Subject:"
        "^From:"
        "^To:"
        "^Cc:"
        "^Date:"
        "^Message-ID:"
        ))
     #+end_src
**** From, To を省略表示しない
     To や From にアドレスが沢山指定されていると省略されるので，これを無効化
     #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-message-use-header-narrowing nil)
     #+end_src
*** Wanderlust: Face の設定
    デフォルトより細かく指定するために幾つかの face 定義を追加.
    #+begin_src emacs-lisp :tangle init-wl.el
(setq wl-highlight-message-header-alist
      '(("Subject[ \t]*:"
         . wl-highlight-message-subject-header-contents)
        ("From[ \t]*:"
         . wl-highlight-message-from-header-contents)
        ("Date[ \t]*:"
         . wl-highlight-message-date-header-contents)
        ("\\(.*To\\|Cc\\|Newsgroups\\)[ \t]*:"
         . wl-highlight-message-important-header-contents)
        ("\\(User-Agent\\|X-Mailer\\|X-Newsreader\\)[ \t]*:"
         . wl-highlight-message-unimportant-header-contents)
        ))
    #+end_src
    face の色付け
    #+begin_src emacs-lisp
(defun my:wl-set-face (face spec)
  (make-face face)
  (cond ((fboundp 'face-spec-set)
         (face-spec-set face spec))
        (t
         (wl-declare-face face spec))))
(my:wl-set-face 'wl-highlight-folder-closed-face
                '((t (:foreground "#4cff4c" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-folder-few-face
                '((t (:foreground "#FF4C4C" :bold t :italic nil :weight bold ))))
(my:wl-set-face 'wl-highlight-folder-zero-face
                '((t (:foreground "#f6f3e8" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-cited-text-1
                '((t (:foreground "#7fff7f" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-cited-text-2
                '((t (:foreground "#ffff7f" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-cited-text-3
                '((t (:foreground "#7f7fff" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-cited-text-4
                '((t (:foreground "#7fffff" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-cited-text-5
                '((t (:foreground "#ff7fff" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-cited-text-6
                '((t (:foreground "#ff7f7f" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-cited-text-7
                '((t (:foreground "#4cff4c" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-cited-text-8
                '((t (:foreground "#ffff4c" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-cited-text-9
                '((t (:foreground "#4c4cff" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-cited-text-10
                '((t (:foreground "#4cffff" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-cited-text-11
                '((t (:foreground "#ff4cff" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-cited-text-12
                '((t (:foreground "#ff4c4c" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-date-header-contents
                '((t (:foreground "#4CFF4C" :bold t :italic nil :weight bold ))))
(my:wl-set-face 'wl-highlight-message-header-contents
                '((t (:foreground "#aaaaaa" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-headers
                '((t (:foreground "#4CFFFF" :bold t :italic nil :weight bold ))))
(my:wl-set-face 'wl-highlight-message-important-header-contents2
                '((t (:foreground "#4CFF4C" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-signature
                '((t (:foreground "#aaaaaa" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-message-important-header-contents
                '((t (:foreground "#FF4CFF" :bold t :italic nil :weight bold ))))
(my:wl-set-face 'wl-highlight-message-subject-header-contents
                '((t (:foreground "#FF4C4C" :bold t :italic nil :weight bold ))))
(my:wl-set-face 'wl-highlight-message-from-header-contents
                '((t (:foreground "#FFFF4C" :bold t :italic nil :weight bold ))))
(my:wl-set-face 'wl-highlight-message-unimportant-header-contents
                '((t (:foreground "#aaaaaa" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-summary-answered-face
                '((t (:foreground "#4CFF4C" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-summary-refiled-face
                '((t (:foreground "#7F7FFF" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-summary-thread-top-face
                '((t (:foreground "#F6F3E8" :bold nil :italic nil :weight normal ))))
(my:wl-set-face 'wl-highlight-summary-important-flag-face
                '((t (:foreground "#ffff4c" :bold nil :italic nil :weight normal ))))
;;
;; (my:wl-set-face 'wl-highlight-folder-killed-face
;;                 '((t (:foreground ,my:h:black :5Dbold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-folder-many-face
;;                 '((t (:foreground ,my:h:magenta :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-folder-opened-face
;;                 '((t (:foreground "#4cffff" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-folder-path-face
;;                 '((t (:underline t :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-folder-unknown-face
;;                 '((t (:foreground "#4cffff" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-folder-unread-face
;;                 '((t (:foreground ,my:n:blue :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-header-separator-face
;;                 '((t (:inherit highlight :bold t ))))
;; (my:wl-set-face 'wl-highlight-message-citation-header
;;                 '((t (:foreground ,my:h:green :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-copied-face
;;                 '((t (:foreground "#4CFFFF" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-deleted-face
;;                 '((t (:foreground ,my:h:black :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-displaying-face
;;                 '((t (:underline t :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-disposed-face
;;                 '((t (:foreground "#aaaaaa" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-flagged-face
;;                 '((t (:foreground ,my:h:yellow :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-forwarded-face
;;                 '((t (:foreground ,my:h:blue :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-high-read-face
;;                 '((t (:foreground ,my:h:green :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-high-unread-face
;;                 '((t (:foreground ,my:h:orange :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-important-face
;;                 '((t (:foreground "#ffff4c" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-killed-face
;;                 '((t (:foreground ,my:h:black :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-l:read-face
;;                 '((t (:foreground "#4CFF4C" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-l:unread-face
;;                 '((t (:foreground ,my:h:lightb :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-new-face
;;                 '((t (:foreground "#ff4c4c" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-normal-face
;;                 '((t (:foreground "#f6f3e8" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-prefetch-face
;;                 '((t (:foreground ,my:n:blue :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-resend-face
;;                 '((t (:foreground ,my:h:orange :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-target-face
;;                 '((t (:foreground "#4CFFFF" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-temp-face
;;                 '((t (:foreground ,my:n:violet :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-summary-unread-face
;;                 '((t (:foreground "#ff4c4c" :bold nil :italic nil ))))
;; (my:wl-set-face 'wl-highlight-thread-indent-face
;;                 '((t (:underline t :bold nil :italic nil ))))
    #+end_src
*** 作成/返信設定
    自分宛のメールに返信する場合は =To:=, =Cc:= から自分のアドレスを削除
    #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-draft-always-delete-myself t)
    #+end_src
    "a" (without-argument)では =Reply-To:= や =From:= などで
    指定された唯一人または唯一つの投稿先に返信.
    また, =X-ML-Name:= と =Reply-To:= がついているなら =Reply-To:= 宛に返信
    #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-draft-reply-without-argument-list
      '((("X-ML-Name" "Reply-To") . (("Reply-To") nil nil))
        ("X-ML-Name" . (("To" "Cc") nil nil))
        ("Followup-To" . (nil nil ("Followup-To")))
        ("Newsgroups" . (nil nil ("Newsgroups")))
        ("Reply-To" . (("Reply-To") nil nil))
        ("Mail-Reply-To" . (("Mail-Reply-To") nil nil))
        ("From" . (("From") nil nil))))
    #+end_src
    =C-u a= (with-argument)であれば関係する全ての人・投稿先に返信
    #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-draft-reply-with-argument-list
      '(("Followup-To" . (("From") nil ("Followup-To")))
        ("Newsgroups" . (("From") nil ("Newsgroups")))
        ("Mail-Followup-To" . (("Mail-Followup-To") nil ("Newsgroups")))
        ("From" . (("From") ("To" "Cc") ("Newsgroups")))))
    #+end_src
    サマリ表示には petname を使うが, 引用には使わない
    #+begin_src emacs-lisp  :tangle init-wl.el
(setq wl-default-draft-cite-decorate-author nil)
    #+end_src
**** メール本文の文字コード
     丸囲み数字なんかが入ってしまうと
     勝手にエンコーディングが変わってしまって鬱陶しい. どうしたモンだろうかね.
     #+begin_src emacs-lisp :tangle no
(add-hook 'wl-draft-mode-hook
          (lambda ()
            (add-to-list 'mime-charset-type-list '(utf-8 8 nil))))
     #+end_src
**** draft mode で orgtbl を有効に
     #+begin_src emacs-lisp  :tangle init-wl.el
(add-hook 'wl-draft-mode-hook 'turn-on-orgtbl)
     #+end_src
**** c-sig
     署名の選択に c-sig を使用している.
     設定は以下の通り. Mew 風に =C-c <tab>= で signature を挿入するようにしている
     #+begin_src emacs-lisp  :tangle init-wl.el
(leaf c-sig
  :config
  (eval-when-compile (require 'wl))
  (setq sig-insert-end t
        sig-save-to-sig-name-alist nil
        message-signature-file nil)
  (define-key wl-draft-mode-map "\C-c\t" 'insert-signature-eref)
  (add-hook 'wl-draft-mode-hook
            '(lambda ()
               (define-key (current-local-map) "\C-c\C-w"
                 'insert-signature-eref)))
  )
     #+end_src
*** GPG 署名
    以前は mailcrypt を使っていたけれど,
    epa があるので主にキーバインドの設定のみ.
    =draft-mode= の文字コードをあらかじめ指定しておかないと,
    送信時に文字コードが変換されるので不正な署名となってしまう.

    もっとうまい方法/正攻法がありそうな気がするけれど,
    使えてるから, まあ良いかな, とか.
    #+begin_src emacs-lisp :tangle init-wl.el
      (setq mime-pgp-verify-when-preview nil)
      (defun my:epa-wl-decrypt-message ()
        (interactive)
        (save-window-excursion
          (wl-summary-jump-to-current-message)
          (wl-message-decrypt-pgp-nonmime)))
      (defun my:epa-wl-verify-message ()
        (interactive)
        (save-selected-window
          (wl-summary-jump-to-current-message)
          (wl-message-verify-pgp-nonmime)))
      (leaf-keys ((:wl-summary-mode-map
                   ("C-c : d" . my:epa-wl-decrypt-message)
                   ("C-c : v" . my:epa-wl-verify-message))
                  (:wl-draft-mode-map
                   ("C-c : s" . epa-mail-sign)
                   ("C-c : e" . epa-mail-encrypt))))
    #+end_src
*** 検索
    notmuchを使う.
    #+begin_src emacs-lisp  :tangle init-wl.el
(leaf elmo-search
  :bind ((:wl-summary-mode-map
          ("v" . wl-quicksearch-goto-search-folder-wrapper))
         (:wl-folder-mode-map
          ("v" . wl-quicksearch-goto-search-folder-wrapper)))
  :config
  (elmo-search-register-engine 'notmuch-custom 'local-file
                               :prog "notmuch-query-custom"
                               :args '(elmo-search-split-pattern-list)
                               :charset 'utf-8)
  (setq elmo-search-default-engine 'notmuch-custom)
  (setq wl-quicksearch-folder "[]")
  )
    #+end_src
    実際の呼び出しはスレッドを全部取得したいので以下を呼び出している
    #+begin_src sh :tangle no
#!/bin/sh
if [ ! x"$*" = x"" ] ; then
    res=$(notmuch search --output=threads "$*")
fi
if [ ! x"$res" = x"" ] ; then
    echo $res | xargs notmuch search --sort=oldest-first --output=files
fi
    #+end_src
    検索時にメールが多すぎると怒られるので. 数字は適当.
    #+begin_src emacs-lisp  :tangle init-wl.el
(setq elmo-multi-divide-number 2000000000)
(setq elmo-multi-number 2000000000)
    #+end_src
** Linux Desktop で =mailto:= リンクを扱うために
   ついでに =mailto= のリンクを emacsclient で扱うために，以下の関数を定義しておく
   #+begin_src emacs-lisp
(defun my:mailto-compose-mail (mailto-url)
  (if (and (stringp mailto-url)
           (string-match "\\`mailto:" mailto-url))
      (progn
        (require 'rfc2368)
        (let* ((headers (mapcar (lambda (h) (cons (intern (car h)) (cdr h)))
                                (rfc2368-parse-mailto-url mailto-url)))
               (good-headers (remove-if (lambda (h) (member (car h) '(Body))) headers))
               (body (cdr (assoc 'Body headers))))
          (wl-draft good-headers nil nil body)))))
   #+end_src
   Desktop の設定では
   #+begin_src sh :tangle no
#!/bin/sh
# emacs-mailto-handler

mailto=$1
mailto="mailto:${mailto#mailto:}"
mailto=$(printf '%s\n' "$mailto" | sed -e 's/[\"]/\\&/g')
elisp_expr="(my:mailto-compose-mail \"$mailto\")"

emacsclient -a "" -n --eval "$elisp_expr" \
	        '(set-window-dedicated-p (selected-window) t)'
   #+end_src
   をメーラとして指定すれば良い．
   GNOME は =.desktop= ファイルが無いと「お気に入り」登録ができないので
   以下のファイルを適当な名前で =~/.local/share/applications/= 以下に放り込んでおくと良いだろう
   #+begin_src conf :tangle no
[Desktop Entry]
Name=Emacs Mail Handler
GenericName=Mail User Agent
X-GNOME-FullName=Emacs Mail Handler
Comment=Use emacsclient as MUA, handling mailto link
Keywords=email
Exec=/home/uwabami/bin/emacs-mailto-handler %U
Icon=emacs25
Terminal=false
Type=Application
Categories=GNOME;GTK;Office;Email;
StartupNotify=false
MimeType=application/mbox;message/rfc822;x-scheme-handler/mailto;
   #+end_src
** メールからの予定の取り込み: =mhc=
   #+begin_src emacs-lisp
(leaf mhc
  :if (file-directory-p (concat (getenv "HOME") "/.config/mhc"))
  :ensure t
  :commands (mhc-import)
  :config
  (setq mhc-calendar-day-strings ["日" "月" "火" "水" "木" "金" "土"]
        mhc-calendar-header-function 'mhc-calendar-make-header-ja
        mhc-calendar-language 'japanese)
  )
   #+end_src
* カレンダー: =japanese-holidays=
  日本の祝日を表示するために =japanese-holidays= をインストール
  #+begin_src emacs-lisp
(leaf japanese-holidays
  :ensure t
  :require t
  :hook ((calendar-today-visible-hook   . japanese-holiday-mark-weekend)
         (calendar-today-invisible-hook . japanese-holiday-mark-weekend)
         (calendar-today-visible-hook   . calendar-mark-today))
  :config
  (setq calendar-holidays               ; とりあえず日本のみを表示
        (append japanese-holidays holiday-local-holidays)
        mark-holidays-in-calendar t     ; 祝日をカレンダーに表示
        calendar-month-name-array       ; 月と曜日の表示調整
        ["01" "02" "03" "04" "05" "06" "07" "08" "09" "10" "11" "12" ]
        calendar-day-name-array
        ["日" "月" "火" "水" "木" "金" "土"]
        calendar-day-header-array
        ["日" "月" "火" "水" "木" "金" "土"]
        calendar-date-style 'iso         ; ISO format (YYYY/MM/DD) に変更
        japanese-holiday-weekend '(0 6)  ; 土曜日・日曜日を祝日として表示
        japanese-holiday-weekend-marker
        '(holiday nil nil nil nil nil japanese-holiday-saturday)
        ;; 日曜開始
        calendar-week-start-day 0)
  (calendar-set-date-style 'iso)
  )
  #+end_src
* VCS
** git{attributes,config,ignore}-mode, git-commit
   #+begin_src emacs-lisp
(leaf *git
  :if (and (>= emacs-major-version 25)
           (executable-find "git"))
  :init
  (leaf git-commit :ensure t)
  (leaf gitattributes-mode :ensure t)
  (leaf gitconfig-mode :ensure t)
  (leaf gitignore-mode :ensure t)
  )
   #+end_src
** magit:
   magit は Emacs の Git Frontend.
   結局の所 CUI でコマンド叩く事も多いけれど，これはこれで重宝している．
   #+begin_src emacs-lisp
(leaf magit
  :if (executable-find "git")
  :bind (("C-x g" . magit-status))
  :ensure t
  :config
  (setq magit-refs-show-commit-count 'all
        ;; magit-completing-read-function 'magit-ido-completing-read
        magit-log-buffer-file-locked t
        magit-revision-show-gravatars nil
        )
  )
   #+end_src
** Git Gutter+
   飽きたら止めるかもしれないけれど.
   #+begin_src emacs-lisp
(leaf git-gutter+
  :if (and (executable-find "git")
           (>= emacs-major-version 25))
  :ensure t
  :bind ("C-x G" . global-git-gutter+-mode)
  )
   #+end_src
** ghq
   #+BEGIN_SRC emacs-lisp
(leaf ivy-ghq
  :if (executable-find "ghq")
  :el-get (ivy-ghq
           :type github
           :pkgname "analyticd/ivy-ghq")
  :bind (("C-x f" . ivy-ghq-open))
  :config
  (setq ivy-ghq-short-list t)
  )
   #+END_SRC
* Org-mode
  =org-mode= が無いと生きていけない体になりました
** 基本設定: =org=
   目新しい設定はしていない，と思う．強いて言えば
   以前のメモの整理のために [[http://howm.osdn.jp/index-j.html][howm: Hitori Otegaru Wiki Modoki]] も使っていたので,
   howm も有効にしている，ぐらい．
   #+begin_src emacs-lisp
(leaf org
  :bind (("C-x n s" . org-narrow-to-subtree)
         ("C-x n w" . widen))
  :init
  (with-eval-after-load "org"
    )
  :config
  (setq org-directory my:d:org                 ;; Nextcloud に保存する
        org-return-follows-link t              ;; return でリンクを辿る
        org-startup-folded t                   ;; 見出しを畳んで表示
        org-startup-truncated t                ;; 折り返し無し
        org-emphasis-alist                     ;; 基本 "-nw" なので色変更
        (cons '("+" '(:strike-through t :foreground "#999999"))
              (cl-delete "+" org-emphasis-alist :key 'car :test 'equal))
        org-file-apps-defaults '((remote . emacs)  ;; xdg-open 任せ
                                 (system . "xdg-open %s")
                                 (t      . "xdg-open %s"))
        org-file-apps-defaults-gnu '((remote . emacs)  ;; xdg-open 任せ
                                     (system . "xdg-open %s")
                                     (t      . "xdg-open %s"))
        ;; GTD: 状態の追加
        org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "CANCEL(c)" "SOMEDAY(s)")
          (type "ARTICLE(a)")
          (type "MEMO(m)")
          )
        ;; GTD: タグの追加
        org-tag-alist '(("OFFICE"     . ?o)
                        ("HOME"       . ?h)
                        ("MAIL"       . ?m)
                        ("WORK"       . ?w)
                        ("Debian"     . ?d)
                        ("Computer"   . ?c)
                        ("Book"       . ?b)
                        ("Emacs"      . ?e)
                        ("TeX"        . ?t)
                        ("Ruby"       . ?r)
                        )
        )
  ;; GTD: TODO→...→DONE としたエントリを =Arhive.org= に移動
  (defun my:org-archive-done-tasks ()
    (interactive)
    (org-map-entries 'org-archive-subtree "/DONE" 'file))
  (setq org-archive-location "Archive.org::")
  (add-hook 'org-todo-statistics-hook 'my:org-archive-done-tasks)
  (add-hook 'org-todo-after-statistics-hook 'my:org-archive-done-tasks)
  ;; 文字コード強制 ... 今時いらないかも．
  (modify-coding-system-alist 'file "\\.org\\'" 'utf-8)
  ;; howm ファイルも org-mode で．
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.howm$" . org-mode))
  ;;; timestamp 更新文字列の変更
  ;;  org-mode では ＃+DATE: をひっかける用に(＃は小文字)．
  (defun my:org-timestamp-hook ()
    "Change `time-stamp-start' in org-mode"
    (set (make-local-variable 'time-stamp-start) "#\\+date: 2")
    (set (make-local-variable 'time-stamp-end)   "\$")
    )
  (add-hook #'org-mode-hook #'my:org-timestamp-hook)
  )
   #+end_src
** Org-Id
   使いこなせてないのだけれど.
   #+begin_src emacs-lisp
(leaf org-id
  :config
  (setq org-id-locations-file (concat my:d:share "org-id-locations"))
  )
   #+end_src
** Babel
   #+begin_src emacs-lisp
(leaf org-src
  :config
  (setq org-src-fontify-natively t       ;; font-lock
        org-src-tab-acts-natively t      ;; indent
        org-edit-src-content-indentation 0
        org-src-preserve-indentation t
        )
  )
   #+end_src
** Agenda: スケジュール，TODO 表示
   GTD 用の設定．後述の =org-gcal= と =orgmine= で取得したデータも表示している．
   ついでに
   - 土曜日をの face を追加.
   - 祝日, 休日を日曜と同じfaceにする.
   なんて事もやっている．元ネタは [[https://julien.danjou.info/blog/2010/org-mode-and-holidays][Org-mode and holidays]]
   #+begin_src emacs-lisp
(leaf org-agenda
  :bind (("C-c a" . org-agenda))
  :init
  (defface my:org-agenda-date-saturday
    '((t (:foreground "#7FBFFF" :bold t )))
    "Agenda 表示中の土曜日用のface")
  (defface my:org-agenda-date-today-saturday
    '((t (:inherit my:org-agenda-date-saturday :underline t)))
    "Agenda 表示中の今日かつ土曜日用のface")
  (defface my:org-agenda-date-today-weekend
    '((t (:inherit org-agenda-date-weekend :underline t)))
    "Agenda 表示中の今日かつ日・祝日用のface")
  ;; こっからは org-gcal で同期したカレンダーの色
  (defface my:org-agenda-calendar-Univ
    '((t (:foreground "#7FFF7F")))
    "Agenda 表示中, Univ.org の表示 face"
    :group 'org-agenda )
  (defface my:org-agenda-calendar-Schedule
    '((t (:foreground "#7FFFFF")))
    "Agenda 表示中, Schedule.org の表示 face"
    :group 'org-agenda )
  (defface my:org-agenda-calendar-GFD
    '((t (:foreground "#FFFF7F")))
    "Agenda 表示中, GFD.org の表示 face"
    :group 'org-agenda )
  (defface my:org-agenda-calendar-DebianJP
    '((t (:foreground "#BF7FFF")))
    "Agenda 表示中, DebianJP.org の表示 face"
    :group 'org-agenda )
  (defface my:org-agenda-calendar-twitter
    '((t (:foreground "#CCCCCC")))
    "Agenda 表示中, Twitter log の表示 face"
    :group 'org-agenda )
  ;; 更新用の関数 - とりあえず動いているので良しとするが，リファクタリングしたい
  (defun my:org-agenda-day-face-function (date)
    "Compute DATE face for saturday, holidays."
    (cl-dolist (file (org-agenda-files nil 'ifmode))
      (cond
       ((member (calendar-day-of-week date) '(7))
        (if (org-agenda-todayp date)
            (cl-return 'my:org-agenda-date-today-weekend))
        (cl-return 'org-agenda-date-weekend))
       ((member (calendar-day-of-week date) '(6))
        (if (org-agenda-todayp date)
            (cl-return 'my:org-agenda-date-today-saturday))
        (cl-return 'my:org-agenda-date-saturday)))
      (let ((face
             (cl-dolist (entry (org-agenda-get-day-entries file date))
               (let ((category (with-temp-buffer
                                 (insert entry)
                                 (org-get-category (point-min)))))
                 (when (or (string= "祝日" category)
                           (string= "休日" category))
                   (if (org-agenda-todayp date)
                       (cl-return 'my:org-agenda-date-today-weekend)
                     (cl-return 'org-agenda-date-weekend)))))))
        (when face (cl-return face)))))
  :config
  ;; 使用するファイル
  (dolist (file
           '("Archive.org"
             "Holidays.org"
             "Memo.org"
             "Schedule.org"
             "MHC.org"
             "GFD.org"
             "Univ.org"
             "DebianJP.org"
             "twitter.org"
             "journal.org"
             "Wunderlist.org"
             "redmine_GFD.org"
             "redmine_FluidSoc.org"
             ))
    (add-to-list 'org-agenda-files (concat my:d:org file)))
  (add-to-list 'org-agenda-files (locate-user-emacs-file "README.org"))
  ;; 表示のカスタマイズ
  (setq org-agenda-span 'day                   ;; day or week
        org-agenda-format-date "%Y/%m/%d (%a)" ;; YY/MM/DD (曜)
        org-agenda-weekend-days '(0)           ;; 日曜始まり
        ;; 表示関数
        org-agenda-day-face-function 'my:org-agenda-day-face-function
        org-agenda-custom-commands             ;; GTD 用の設定
        '(
          ("n" "agenda and all TODO list"
           (
            (agenda ""
                    ((org-agenda-ndays 1)
                     (org-agenda-entry-types '(:timestamp :sexp))))
            (todo "TODO"
                  ((org-agenda-prefix-format " %i %-22:c"))
                  )
            (todo "新規|着手|進行中|確認"
                  ((org-agenda-prefix-format " %i %-22:c"))
                  )
            (todo "WAIT"
                  ((org-agenda-prefix-format " %i %-22:c"))
                  )
            (todo "SOMEDAY"
                  ((org-agenda-prefix-format " %i %-22:c"))
                  )
            ))
          ("N" "All memo entry"
           (;;
            (todo "MEMO")
            ))
          )
        )
  ;; 色付け
  (add-hook 'org-agenda-finalize-hook
            (lambda ()
              (save-excursion
                (goto-char (point-min))
                (while (re-search-forward "Univ:" nil t)
                  (add-text-properties (match-beginning 0) (point-at-eol)
                                       '(face my:org-agenda-calendar-Univ)))
                (goto-char (point-min))
                (while (re-search-forward "Schedule:" nil t)
                  (add-text-properties (match-beginning 0) (point-at-eol)
                                       '(face my:org-agenda-calendar-Schedule)))
                (goto-char (point-min))
                (while (re-search-forward "MHC:" nil t)
                  (add-text-properties (match-beginning 0) (point-at-eol)
                                       '(face my:org-agenda-calendar-Schedule)))
                (goto-char (point-min))
                (while (re-search-forward "DebianJP:" nil t)
                  (add-text-properties (match-beginning 0) (point-at-eol)
                                       '(face my:org-agenda-calendar-DebianJP)))
                (goto-char (point-min))
                (while (re-search-forward "GFD:" nil t)
                  (add-text-properties (match-beginning 0) (point-at-eol)
                                       '(face my:org-agenda-calendar-GFD)))
                (goto-char (point-min))
                (while (re-search-forward "twitter:" nil t)
                  (add-text-properties (match-beginning 0) (point-at-eol)
                                       '(face my:org-agenda-calendar-twitter)))
                (goto-char (point-min))
                (while (re-search-forward "誕生日:" nil t)
                  (add-text-properties (match-beginning 0) (point-at-eol)
                                       '(face org-agenda-date-weekend)))
                (goto-char (point-min))
                (while (re-search-forward "祝日:" nil t)
                  (add-text-properties (match-beginning 0) (point-at-eol)
                                       '(face org-agenda-date-weekend)))
                (goto-char (point-min))
                (while (re-search-forward "休日:" nil t)
                  (add-text-properties (match-beginning 0) (point-at-eol)
                                       '(face org-agenda-date-weekend)))
                )))
  )
   #+end_src
** Org-journal: 日記
   単一ファイルに記述すること, および
   エントリ作成時に日付を入れるために =org-jounnal-new-entry= を =advice= している
   #+begin_src emacs-lisp
(leaf org-journal
  :if (and (file-directory-p my:d:org)
           (>= emacs-major-version 25))
  :ensure t
  :after (org)
  :bind (("C-c C-j" . nil)
         (:org-journal-mode-map
          ("C-c C-j" . nil)))
  :init
  (add-hook 'org-journal-mode-hook
            (setq truncate-lines t))
  :config
  (setq org-journal-dir my:d:org
        org-journal-file-format "journal.org"
        org-journal-date-format "%x (%a)"
        org-journal-date-prefix "* "
        org-journal-time-format "<%Y-%m-%d %R> "
        org-journal-time-prefix "** MEMO "
        org-journal-find-file 'find-file
        )
  (defun my:org-journal-add-date-entry (prefix &optional time)
    "Insert date entry to `org-journal-file'"
    (find-file (expand-file-name org-journal-file-format org-journal-dir))
    (org-journal-decrypt)
    (unless
        (string-match (format-time-string org-journal-date-format)
                      (buffer-substring-no-properties (point-min) (point-max)))
      (progn
        (goto-char (point-max))
        (insert (concat "\n" org-journal-date-prefix
                        (format-time-string org-journal-date-format)))
        ))
    )
  (advice-add 'org-journal-new-entry :before 'my:org-journal-add-date-entry)
  )
;; Key bindings -- 使えてない...
;; (define-key org-journal-mode-map (kbd "C-c C-f") 'org-journal-open-next-entry)
;; (define-key org-journal-mode-map (kbd "C-c C-b") 'org-journal-open-previous-entry)
;; (define-key org-journal-mode-map (kbd "C-c C-j") 'org-journal-new-entry)
;; (define-key calendar-mode-map "j" 'org-journal-read-entry)
;; (define-key calendar-mode-map (kbd "C-j") 'org-journal-display-entry)
;; (define-key calendar-mode-map "]" 'org-journal-next-entry)
;; (define-key calendar-mode-map "[" 'org-journal-previous-entry)
;; (define-key calendar-mode-map (kbd "i j") 'org-journal-new-date-entry)
;; (define-key calendar-mode-map (kbd "f f") 'org-journal-search-forever)
;; (define-key calendar-mode-map (kbd "f w") 'org-journal-search-calendar-week)
;; (define-key calendar-mode-map (kbd "f m") 'org-journal-search-calendar-month)
;; (define-key calendar-mode-map (kbd "f y") 'org-journal-search-calendar-year)))
   #+end_src
** Capture: メモ取り
   キーバインドは以前 changelog memo をやっていた時の癖で =C-x m= をメモにしている.
   他には wanderlust のメールを扱えるように =org-wl= を読み込んで template を追加したぐらい.
   notmuch のインデックスの方が良いかもしれない, と最近思っている.
   #+begin_src emacs-lisp
(leaf ol-wl
 :if (and (or (my:dpkg-status "wl-beta")
              (my:dpkg-status "wl"))
          (file-directory-p my:d:org))
 :el-get (ol-wl
          :url "https://code.orgmode.org/bzg/org-mode/raw/master/contrib/lisp/ol-wl.el"
          )
 )
(leaf org-capture
  :bind (("C-x m" . org-capture))
  :if (file-directory-p my:d:org)
  :config
  (defun my:org-journal-add-date-entry-capture ()
    (my:org-journal-add-date-entry nil)
    (goto-char (point-max))
    )
  ;; @see https://github.com/sprig/org-capture-extension/issues/37
  ;; Brackets '{' '}' in link description cause broken org-mode link #37]]
  (defun my:transform-square-brackets-to-round-ones (string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat
     (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c)))
             string-to-transform))
    )
  (setq org-default-notes-file (concat my:d:org "journal.org")
        org-capture-templates
        `(
          ("t" "TODO" plain
           (function my:org-journal-add-date-entry-capture)
           "** TODO %^{title} %^g\n  %?\n  %a"
           :prepend nil
           :unnarrowed nil
           :kill-buffer t
           )
          ;; "* TODO <%<%Y-%m-%d>> %:subject %^g\n  %?\n  %a\n  #+BEGIN_QUOTE\n%i\n  #+END_QUOTE"
          ("e" "Email TODO" plain
           (function my:org-journal-add-date-entry-capture)
           "** TODO [[wl:\%5Bmsgid:%:message-id-no-brackets\%5D][%(my:transform-square-brackets-to-round-ones \"%:subject\")]]\n  :PROPERTIES:\n  :CREATED: %u\n  :END:%?\n"
           :prepend nil
           :unnarrowed nil
           :kill-buffer t
           )
          ("m" "Memo/Journal Entry" plain
           (function my:org-journal-add-date-entry-capture)
           "** MEMO %T %?"
           :prepend nil
           :unnarrowed nil
           :kill-buffer t
           )
          ("a" "Aritcle Entry" plain
           (function my:org-journal-add-date-entry-capture)
           "** ARTICLE %T %? "
           :prepend nil
           :unnarrowed nil
           :kill-buffer t
           )
          )
        )
  )
   #+end_src
** OrgとGoogle カレンダーの連携: =org-gcal=
*** token 等の置き場所の変更
    #+begin_src emacs-lisp
(leaf request
  :ensure t
  :init
  (setq request-storage-directory (concat my:d:tmp "request"))
  (unless (file-directory-p request-storage-directory)
    (make-directory request-storage-directory)))
    #+end_src
*** org-gcal 本体の設定
    実際の情報等は =password-store= を使って設定しておく.
    ついでに agenda 表示の際の色付けを設定．
    #+begin_src emacs-lisp
(leaf org-gcal
  :if (and my:d:password-store
           (file-directory-p my:d:org))
  :commands (org-gcal-fetch org-gcal-sync)
  :ensure t
  :init
  (setq org-gcal-dir (concat my:d:tmp "org-gcal"))
  (unless org-gcal-dir (make-directory org-gcal-dir))
  (setq org-gcal-token-file (expand-file-name ".org-gcal-token" org-gcal-dir)
        alert-log-messages t
        alert-default-style 'log
        org-gcal-down-days   90  ;; 過去 3 month
        org-gcal-up-days    180  ;; 未来 6 month
        org-gcal-auto-archive nil)
  (load (concat my:d:password-store "/org-gcal.gpg"))
  )
    #+end_src
    password-store には multiline で設定を書く．例えば以下:
    #+begin_src emacs-lisp :tangle no
(setq org-gcal-client-id "XXXXXXXXXXX"
      org-gcal-client-secret "XXXXXXXXXXX"
      org-gcal-file-alist
      '(("XXXXX@gmail.com" . "~/org/Schedule.org")
        ("YYYYY@group.calendar.google.com" . "~/org/Project1.org")))
    #+end_src
** OrgとRedmine の連携: =orgmine=
   素晴しい!!
   [[https://github.com/kametoku/orgmine][kametoku/orgmine: Emacs minor mode for org-mode with redmine integration]]
   #+begin_src emacs-lisp
(leaf *orgmine
  :if  (and my:d:password-store
            (file-directory-p my:d:org))
  :init
  (setq enable-local-variables :safe)
  (leaf elmine :ensure t)
  (add-hook 'org-mode-hook
            (lambda ()
              (if (assoc "om_server" org-file-properties) (orgmine-mode))))
  (leaf orgmine
    :commands (orgmine-mode)
    :el-get (orgmine
             :type github
             :pkgname "kametoku/orgmine")
    :config
    (setq orgmine-note-block-begin "#+begin_src gfm"   ;; 要調整
          orgmine-note-block-end   "#+end_src\n"
          orgmine-default-todo-keyword "新規")
    (load (concat my:d:password-store "/orgmine.gpg"))
    )
  )
   #+end_src
* TeX
** AUCTeX
   Debian パッケージ版を使う．
   やっている事は
   - japanese-latex-mode において, 幾つかのコマンドが追加/上書きされているが， あまり使うことの無いコマンドが表示されるのが嫌なのでそれらを削除．
   - コンパイルには latexmk を使う
   と言った所.
   #+begin_src emacs-lisp
(leaf tex-jp
  :if (and (executable-find "uplatex")
           (my:dpkg-status "auctex"))
  :init (progn
          (add-hook 'LaTeX-mode-hook #'TeX-source-correlate-mode)
          (add-hook 'LaTeX-mode-hook #'TeX-PDF-mode)
          (add-hook 'LaTeX-mode-hook #'turn-on-reftex))
  :config
  (add-hook 'LaTeX-mode-hook
            (function
             (lambda ()
               (dolist (command '("pTeX"
                                  "LaTeX"
                                  "pLaTeX"
                                  "pBibTeX"
                                  "jTeX"
                                  "jLaTeX"
                                  "jBibTeX"))
                 (delq (assoc command TeX-command-list) TeX-command-list))
               (setq TeX-command-default "LaTeX"
                     japanese-LaTeX-command-default "LaTeX"
                     TeX-PDF-mode t
                     TeX-command-output-list '(("LaTeX" ("pdf")))
                     )
               (add-to-list 'TeX-expand-list
                            '("%(LATEXENC)"
                              (lambda ()
                                (let ((str (japanese-TeX-get-encoding-string)))
                                  (if str (format "%s" str) "")))))
               (add-to-list 'TeX-command-list
                            '("LaTeX"
                              "LATEXENC=%(LATEXENC) latexmk -gg %t"
                              TeX-run-TeX nil (latex-mode) :help "Run Latexmk")))))
  (setq TeX-source-correlate-method 'synctex
        TeX-source-correlate-start-server t
        TeX-source-correlate-mode t
        TeX-view-program-selection '((output-dvi "xdvi")
                                     (output-pdf "Evince")
                                     (output-html "xdg-open"))
        TeX-auto-save t
        TeX-auto-local  (expand-file-name "auctex/auto" my:d:tmp)
        TeX-style-local (expand-file-name "auctex/style" my:d:tmp)
        TeX-parse-self t
        TeX-auto-untabify t
        font-latex-fontify-script nil
        font-latex-fontify-sectioning 1.0
        font-latex-script-display nil
        reftex-plug-into-AUCTeX t
        )
  )
   #+end_src
   =~/.latexmkrc= は以下の通り
   #+begin_src perl :tangle no
#!/usr/bin/env perl
$kanji  = defined $ENV{"LATEXENC"} ? "-kanji=$ENV{\"LATEXENC\"}" : "-kanjii=utf8" ;
$latex  = "platex -interaction=nonstopmode -src-specials -shell-escape --synctex=1 $kanji";
$latex_silent = "platex -interaction=batchmode -src-specials -shell-escape --synctex=1 $kanji";
$bibtex = "pbibtex $kanji";
$makeindex = "touch -m %D";
$dvipdf = "dvipdfmx %O -o %D %S";
$dvips = 'dvips %O -z -f %S | convbkmk -u > %D';
$ps2pdf = 'ps2pdfwr %O %S %D';
$pdf_mode = 3;
$pdf_previewer = 'start xdg-open';
$pdf_update_method = 0;
$clean_ext = "snm nav vrb synctex.gz";
   #+end_src
* Markdown
  あまり好きじゃないんだけれど, 必要に迫られて書く事が増えてきたので設定しておく。
  #+BEGIN_SRC emacs-lisp
(leaf markdown-mode
  :if (executable-find "pandoc")
  :mode ("\\.\\(md\\|markdown\\|mkd\\)\\'" . gfm-mode)
  :init
  (add-hook 'markdown-mode-hook
            (lambda ()
              (electric-indent-local-mode -1)
              (orgtbl-mode)
              ))
  (add-hook 'gfm-mode-hook
            (lambda ()
              (electric-indent-local-mode -1)
              (orgtbl-mode)
              ))
  :config
  (setq markdown-command
        "pandoc --from markdown_github -t html5 --mathjax --highlight-style pygments")
  )
  #+END_SRC
* SCSS
  #+BEGIN_SRC emacs-lisp
(leaf scss-mode
  :if (executable-find "sass")
  :ensure t
  :mode "\\.scss\\'"
  :config
  (setq scss-sass-command (executable-find "sass"))
  )
  #+END_SRC
* その他のモード設定
  読み込むだけの mode の設定. 設定が増えたら別途まとめる。
  #+BEGIN_SRC emacs-lisp
(leaf *misc-mode
  :init
  (leaf yaml-mode
    :ensure t
    :mode "\\(\.yml\\|\.yaml\\)"
    )
  (leaf generic-x)
  (leaf textile-mode :ensure t)
  )
  #+END_SRC
  #+END_SRC
* MoinMoin: =moinmoin-mode=, =moomin.el=
  Debian Wiki や職場の Wiki を編集するための
  MoinMoin の設定.
** =moinmoin-mode=
   MoinMoin 本体の moinmoin-mode 自体は古くて
   screen-lines に依存していたりするので folk して更新中.
   [[https://github.com/uwabami/moinmoin-mode][uwabami/moinmoin-mode: Fork from EmacsForMoinMoin, for Emacs >= 25]]
   #+BEGIN_SRC emacs-lisp
(leaf moinmoin-mode
  :el-get (moinmoin-mode
           :type github
           :pkgname "uwabami/moinmoin-mode")
  )
   #+END_SRC
   そのうち気になる所を弄る，ということで．
** =moomin=
   元々は =moomin = emacs-request + helm + moinmoin-mode=
   という奴. folk して ido-vertical-mode を support する様に
   多少弄った版を使う。
   [[https://github.com/uwabami/moomin-el][uwabami/moomin-el: Edit MoinMoin with Emacs]]
#+BEGIN_SRC emacs-lisp
(use-package moomin
  :disabled t
  :if (file-directory-p my:d:password-store)
  :quelpa (moomin
           :fetcher github
           :repo "uwabami/moomin-el")
  :bind (("C-x w" . ido-moomin)
         :map moinmoin-mode-map
         ("C-c C-c" . moomin-save-current-buffer)
         ("C-c C-s" . moomin-save-current-buffer)
         ("C-c C-o" . moomin-browse-current-page)
         ("C-c C-r" . moomin-reload-current-page))
  :config
  (setq moomin-history-file
        (concat my:d:tmp ".moomin_history"))
  (load (concat my:d:password-store "/moomin.gpg"))
  )
#+END_SRC
* 日記: =tDiary= [0/1]
  #+begin_src emacs-lisp
(leaf tdiary-mode
  :if (and (file-directory-p my:d:password-store)
           (file-directory-p (concat (getenv "HOME") "/Nextcloud/tdiary")))
  :commands tdiary-mode tdiary-replace tdiary-append
  :el-get (tdiary-mode
           :type github
           :pkgname "uwabami/tdiary-mode")
  :commands (tdiary-new tdiary-replace tdiary-append)
  :config
  (setq tdiary-text-directory (concat (getenv "HOME") "/Nextcloud/tdiary/")
        tdiary-diary-list '(("log" "https://uwabami.junkhub.org/log/"))
        tdiary-style-mode 'org-mode
        tdiary-text-suffix ".org"
        ;; tdiary-text-save-p t
        )
  (load (expand-file-name "tdiary-mode.gpg" my:d:password-store))
  (tdiary-passwd-file-load)
  )
  #+end_src
  - [ ] org2blog で tDiary を更新できないか妄想している
* テーマ, フォント, モードライン, などなど
** xterm-color
   色を端末と揃える。
   #+begin_src emacs-lisp
(leaf xterm-color
  :ensure t
  :config
  (setq xterm-color-names
        ["#020202"    ; black
         "#FF4C4C"    ; red
         "#4Cff4C"    ; green
         "#FFFF4C"    ; yellow
         "#4C4CFF"    ; blue
         "#FF4CFF"    ; magenta
         "#4CFFFF"    ; cyan
         "#AAAAAA"]   ; white
        xterm-color-names-bright
        ["#4C4C4C"    ; black
         "#FF7F7F"    ; red
         "#7FFF7F"    ; green
         "#FFFF7F"    ; yellow
         "#7F7FFF"    ; blue
         "#FF7FFF"    ; magenta
         "#7FFFFF"    ; cyan
         "#FFFFFF"]   ; white
        xterm-color-use-bold-for-bright nil
        )
  )
   #+end_src
** フォント
  #+begin_src emacs-lisp
(defun my:load-window-config ()
  "load window-system specific settings"
  (interactive)
  (when window-system
    (progn
      (set-frame-parameter nil 'alpha 95)
      (set-face-attribute 'default nil
                          :family "FSMRMP"
                          ;; :family "Ricty Discord"
                          ;; :family "SF Mono Square"
                          ;; :family "Monospace"
                          ;; :family "Hackgen"
                          :height 165)
      (set-face-attribute 'fixed-pitch nil
                          :family "FSMRMP"
                          ;; :family "SF Mono Square"
                          ;; :family "Monospace"
                          ;; :family "Hackgen"
                          :height 165)
      (set-face-attribute 'variable-pitch nil
                          :family "FSMRMP"
                          ;; :family "SF Mono Square"
                          ;; :family "Monospace"
                          ;; :family "Hackgen"
                          :height 165)
      (setq use-default-font-for-symbols nil)
      (set-fontset-font nil
                        '(#xE0A0 . #xEEE0)
                        (font-spec :family "FSMRMP" :height 150))
      ;; (dolist (range
      ;;          '(
      ;;            (#x1f000 . #x1f02f)    ; Mahjong Tiles
      ;;            (#x1f0a0 . #x1f0ff)    ; Playing Cards
      ;;            (#x1f110 . #x1f19a)    ; Enclosed Alphanumeric Supplement
      ;;                                   ; Regional Indicator Symbol
      ;;                                   ; Enclosed Ideographic Supplement,
      ;;                                   ; Emoticons
      ;;                                   ; Transport and Map Symbols
      ;;                                   ; Alchemical Symbols
      ;;            (#x1f1e6 . #x1f8ff)))
      ;;   (set-fontset-font nil
      ;;                     range
      ;;                     (font-spec :family "Symbola" :height 200)))
      ;;
      ;; (set-background-color "#242424")
      )))
(setq frame-background-mode (frame-parameter nil 'background-mode))
;; (setq default-frame-alist
;;       '(
;;         (foreground-color . "#F6F3E8")
;;         (scroll-bar-foreground-color . "red")
;;         (vertical-scroll-bars . right)
;;         ))
(when (window-system)
  (my:load-window-config))
  #+end_src
** font-locks
   現在修正中, そろそろテーマにすべきかしら?
  #+begin_src emacs-lisp
(setq frame-background-mode (frame-parameter nil 'background-mode))
(custom-set-faces
 '(default                             ((t (:foreground "#F6F3E8" ))))
 '(cursor                              ((t (:foreground "#4CFF4C" :background "#4CFF4C" ))))
 ;; basic
 '(font-lock-builtin-face              ((t (:foreground "#7FBFFF" ))))
 '(font-lock-comment-delimiter-face    ((t (:foreground "#a5a5a6" ))))
 '(font-lock-comment-face              ((t (:foreground "#a5a5a6" ))))
 '(font-lock-constant-face             ((t (:foreground "#FFBF7F" ))))
 '(font-lock-doc-face                  ((t (:foreground "#7FFF7F" ))))
 '(font-lock-doc-string-face           ((t (:foreground "#7FFF7F" ))))
 '(font-lock-function-name-face        ((t (:foreground "#BF7FFF"))))
 '(font-lock-keyword-face              ((t (:foreground "#FF7F7F"))))
 '(font-lock-link-face                 ((t (:foreground "#7FFFFF" ))))
 '(font-lock-negation-char-face        ((t (:foreground "#7FFFFF" :bold t   :italic nil))))
 '(font-lock-preprocessor-face         ((t (:foreground "#FF4C4C" :bold nil :italic nil))))
 '(font-lock-regexp-grouping-backslash ((t (:foreground "#4Cff4C" :bold t   :italic nil))))
 '(font-lock-regexp-grouping-construct ((t (:foreground "#7F7FFF" :bold t   :italic nil))))
 '(font-lock-string-face               ((t (:foreground "#7FFF7F" ))))
 '(font-lock-type-face                 ((t (:foreground "#FFFF7F" ))))
 '(font-lock-variable-name-face        ((t (:foreground "#7F7FFF" ))))
 '(font-lock-warning-face              ((t (:foreground "#FF7FBF" :bold t ))))
 '(mode-line                           ((t (:foreground "#F6F3E8" :background "#222244" ))))
 '(mode-line-inactive                  ((t (:foreground "#666666" :background "#999999" :bold nil ))))
 '(fringe                              ((t (:foreground "#666666" :background "#282828" ))))
 ;; '(hl-line                           ((t (:inherit highlight :underline t ))))
 '(highlight                           ((t (:background "#556b2f" ))))
 '(term-color-black                    ((t (:background "#242424" :foreground "#242424"))))
 '(term-color-blue                     ((t (:background "#4c4cff" :foreground "#4c4cff"))))
 '(term-color-cyan                     ((t (:background "#4cffff" :foreground "#4cffff"))))
 '(term-color-green                    ((t (:background "#4cff4c" :foreground "#4cff4c"))))
 '(term-color-magenta                  ((t (:background "#ff4cff" :foreground "#ff4cff"))))
 '(term-color-red                      ((t (:background "#ff4c4c" :foreground "#ff4c4c"))))
 '(term-color-white                    ((t (:background "#f6f3e8" :foreground "#f6f3e8"))))
 '(term-color-yellow                   ((t (:background "#ffff4c" :foreground "#ffff4c"))))
 ;;
 '(minibuffer-prompt                   ((t (:foreground "#BF7FFF" ))))
 '(region                              ((t (:background "#222244" ))))
 ;; dired
 '(dired-directory                     ((t (:bold t :foreground "#7F7FFF" ))))
 '(dired-flagged                       ((t (:inherit error ))))
 ;; '(dired-header
 '(dired-ignored                       ((t (:inherit shadow ))))
 ;; '(dired-mark
 ;; '(dired-marked
 '(dired-perm-write                    ((t (:bold t :foreground "#FFFF7F" ))))
 '(dired-symlink                       ((t (:bold t :foreground "#7FFFFF" ))))
 '(dired-warning                       ((t (:inherit font-lock-warning-face ))))
 ;; helm
 '(helm-source-header                  ((t (:foreground "#F6F3E8" :background "#224488" :bold t))))
 '(helm-visible-mark                   ((t (:inherit highlight ))))
 '(helm-selection                      ((t (:inherit highlight ))))
 '(helm-selection-line                 ((t (:inherit highlight ))))
 '(helm-ff-directory                   ((t (:inherit dired-directory ))))
 '(helm-bookmark-directory             ((t (:inherit helm-ff-directory ))))
 '(helm-buffer-directory               ((t (:inherit helm-ff-directory ))))
 '(helm-ff-dotted-directory            ((t (:inherit helm-ff-directory ))))
 '(helm-ff-file                        ((t (:inherit default ))))
 '(helm-bookmark-file                  ((t (:inherit helm-ff-file ))))
 '(helm-buffer-file                    ((t (:inherit helm-ff-file ))))
 '(helm-grep-file                      ((t (:inherit helm-ff-file ))))
 '(helm-etags-file                     ((t (:inherit helm-ff-file ))))
 '(helm-ff-executable                  ((t (:inherit helm-ff-file :foreground "#7FFF7F" :bold t))))
 '(helm-ff-symlink                     ((t (:inherit default :foreground "#7FFFFF" :bold t))))
 '(helm-ff-dotted-symlink-directory    ((t (:inherit helm-ff-symlink ))))
 '(helm-ff-invalid-symlink             ((t (:inherit default :foreground "#FF7F7F" ))))
 ;; ido
 '(ido-first-match                     ((t (:underline t :weight bold))))
 '(ido-only-match                      ((t (:foreground "#FFFF4C" :overline nil :weight bold))))
 '(ido-subdir                          ((t (:inherit dired-directory))))
 '(ido-vertical-first-match-face       ((t (:inherit ido-first-match))))
 '(ido-vertical-match-face             ((t (:foreground "#4CFF4C"))))
 '(ido-grid-mode-match                 ((t (:inherit ido-first-match ))))
 ;; ivy
 '(ivy-current-match                   ((t (:inherit highlight ))))
 '(ivy-confirm                         ((t (:inherit minibuffer-prompt ))))
 '(ivy-subdir                          ((t (:inherit dired-directory))))
 '(ivy-minibuffer-match-face-1         ((t (:inherit 'unspecified foreground "#FF4C4C" ))))
 '(ivy-minibuffer-match-face-2         ((t (:inherit 'unspecified foreground "#4CFF4C" ))))
 '(ivy-minibuffer-match-face-2         ((t (:inherit 'unspecified foreground "#4C4CFF" ))))
 ;; powerline
 '(powerline-active1                   ((t (:background "#000000":foreground "#F6F3E8"))))
 '(powerline-active2                   ((t (:background "#666666" :foreground "#F6F3E8"))))
 '(powerline-inactive1                 ((t (:inherit mode-line-inactive))))
 '(powerline-inactive2                 ((t (:inherit mode-line-inactive))))
 ;; preview-latex
 '(font-latex-sectioning-0-face        ((t (:inherit font-latex-sectioning-1-face))))
 '(font-latex-sectioning-1-face        ((t (:inherit font-latex-sectioning-2-face))))
 '(font-latex-sectioning-2-face        ((t (:inherit font-latex-sectioning-3-face))))
 '(font-latex-sectioning-3-face        ((t (:inherit font-latex-sectioning-4-face))))
 '(font-latex-sectioning-4-face        ((t (:inherit font-latex-sectioning-5-face ))))
 '(font-latex-sectioning-5-face        ((t (:inherit font-lock-type-face :bold t))))
 '(font-latex-slide-title-face         ((t (:inherit font-lock-type-face :bold t))))
 '(font-latex-subscript-face           ((t nil)))
 '(font-latex-superscript-face         ((t nil)))
 '(font-latex-math-face                ((t (:inherit font-lock-constant-face ))))
 '(font-latex-script-char-face         ((t (:inherit font-lock-preprocessor-face :bold t))))
 '(font-latex-verbatim-face            ((t (:inherit font-lock-doc-string-face ))))
 ;; elscreen
 '(elscreen-tab-control-face           ((t (:background "#222244" :foreground "#f6f3e8" :underline t :bold t ))))
 '(elscreen-tab-current-screen-face    ((t (:background "#222244" :foreground "#f6f3e8" :underline t :bold t ))))
 '(elscreen-tab-other-screen-face      ((t (:background "#222244" :foreground "#aaaaaa" :underline t :bold nil ))))
 '(elscreen-tab-background-face        ((t (:background "#222244" :foreground "#aaaaaa" :underline t :bold nil ))))
 ;; git-gutter
 '(git-gutter:added                    ((t (:inherit default :bold t :foreground "#4CFF4C" :background "#666666"))))
 '(git-gutter:deleted                  ((t (:inherit default :bold t :foreground "#FF7FBF" :background "#666666"))))
 '(git-gutter:modified                 ((t (:inherit default :bold t :foreground "#FFFF4C" :background "#666666"))))
 '(git-gutter:unchanged                ((t (:inherit default :background "#666666" ))))
 '(git-gutter:separator-face           ((t (:inherit default :foreground "#FF4C4C" :background "#666666"))))
  ;;; howm
 '(howm-mode-keyword-face              ((t (:foreground "#7F7FFF" :background nil ))))
 '(howm-mode-title-face                ((t (:foreground "#4CFFFF" :background nil ))))
 '(howm-reminder-deadline-face         ((t (:bold t :foreground "#FF4C4C" :background nil ))))
 '(howm-reminder-late-deadline-face    ((t (:bold t :underline t :foreground "#FF0000" :background nil ))))
 '(howm-reminder-today-face            ((t (:bold t :foreground "#FFBF7F" :background nil ))))
 '(howm-reminder-tomorrow-face         ((t (:bold t :foreground "#FF7FBF" :background nil ))))
 ;; outline
 '(outline-1                           ((t (:inherit font-lock-function-name-face :bold t))))
 '(outline-2                           ((t (:inherit font-lock-string-face :bold t))))
 '(outline-3                           ((t (:inherit font-lock-keyword-face :bold t))))
 '(outline-4                           ((t (:inherit font-lock-type-face :bold t ))))
 '(outline-5                           ((t (:inherit font-lock-constant-face :bold t ))))
 '(outline-6                           ((t (:inherit font-lock-variable-name-face :bold t))))
 '(outline-7                           ((t (:inherit font-lock-builtin-face :bold t ))))
 '(outline-8                           ((t (:inherit font-lock-comment-face :bold t ))))
 ;; org
 '(org-agenda-date-today               ((t (:underline t :bold t ))))
 '(org-agenda-date                     ((t (:foreground "#FFFFFF" ))))
 '(org-agenda-date-weekend             ((t (:foreground "#FF7F7F" :bold t))))
 '(org-agenda-calendar-event           ((t (:foreground "#F6F3E8" ))))
 '(org-hide                            ((t (:foreground "#4C4C4C" ))))
 '(org-block                           ((t (:inherit font-lock-comment-face))))
 ;;
 ;; moinmoin
 '(moinmoin-h1                         ((t (:inherit outline-1))))
 '(moinmoin-h2                         ((t (:inherit outline-2))))
 '(moinmoin-h3                         ((t (:inherit outline-3))))
 '(moinmoin-h4                         ((t (:inherit outline-4))))
 '(moinmoin-h5                         ((t (:inherit outline-5))))
 '(moinmoin-url                        ((t (:inherit font-lock-link-face))))
 '(moinmoin-url-title                  ((t (:inherit moinmoin-url :bold t))))
 '(moinmoin-anchor-ref-id              ((t (:inherit moinmoin-url :underline t))))
 '(moinmoin-anchor-ref-title           ((t (:inherit moinmoin-url :bold t))))
 '(moinmoin-wiki-link                  ((t (:inherit moinmoin-url :underline t ))))
 '(moinmoin-inter-wiki-link            ((t (:inherit moinmoin-url :underline t ))))
 '(moinmoin-item                       ((t (:inherit font-lock-doc-face ))))
 '(moinmoin-item-2                     ((t (:inherit font-lock-doc-face ))))
 ;; company-mode
 '(company-tooltip                     ((t (:foreground "#242424" :background "#acacac"))))
 '(company-tooltip-common              ((t (:foreground "#242424" :background "#acacac"))))
 '(company-tooltip-common-selection    ((t (:foreground "#f6f3e8" :background "#4c4cff"))))
 '(company-tooltip-selection           ((t (:foreground "#242424" :background "#4c4cff"))))
 '(company-preview-common              ((t (:background nil :foreground "#acacac" :underline t))))
 '(company-scrollbar-fg                ((t (:background "#FFBF7F"))))
 '(company-scrollbar-bg                ((t (:background "#4c4c4c"))))
 )
  #+end_src
** モードラインのカスタマイズ
*** SKK の調整
    SKK の状態がヒョコヒョコ動くのが嫌なので，skk-modeline-input-mode= に
    常に現在の状況を表示する様にしておく．
    #+begin_src emacs-lisp
(defun my:skk-modeline-input-mode ()
  "SKKが読み込まれていない場合でも skk-modeline-input-mode に文字を入れる."
  (unless (boundp 'skk-modeline-inpt-mode)
    (setq skk-modeline-input-mode "--[--]:")))
;; 初回更新
(my:skk-modeline-input-mode)
;; hook
(unless (featurep 'powerline)
  (add-hook 'after-change-major-mode-hook
            #'(lambda() (skk-mode)(skk-mode))))
(unless (featurep 'doom-modeline)
  (add-hook 'after-change-major-mode-hook
            #'(lambda() (skk-mode)(skk-mode))))
    #+end_src
*** major/minor モードの表示設定
    diminish や delight があるわけですが,
    微妙にこれで指定できない奴もあってアレですね.
    #+begin_src emacs-lisp
(defvar my:mode-line-cleaner-alist
  `(;; For minor-mode, first char is 'space'
    ;; (yas-minor-mode         . " Ya")
    (eldoc-mode             . "")
    (abbrev-mode            . "")
    (undo-tree-mode         . "")
    (flymake-mode           . "")
    (isearch-mode           . "")
    (global-whitespace-mode . "")
    (editorconfig-mode      . "")
    (company-mode           . "")
    (rainbow-mode           . "")
    (orgmine-mode           . "")
    (orgtbl-mode            . "")
    (org-src-mode           . "")
    (git-gutter+-mode       . " ")
    (projectile-mode        . "")
    ))
(defun my:clean-mode-line ()
  "Cleanup major/minor mode."
  (interactive)
  (cl-loop for (mode . mode-str) in my:mode-line-cleaner-alist
           do
           (let ((old-mode-str (cdr (assq mode minor-mode-alist))))
             (when old-mode-str
               (setcar old-mode-str mode-str))
             ;; major mode
             (when (eq mode major-mode)
               (setq mode-name mode-str)))))
(add-hook 'after-change-major-mode-hook 'my:clean-mode-line)
    #+end_src
*** powerline 本体の設定．
    default-theme をベースに見たい物だけ表示するようにしてみた．
    #+begin_src emacs-lisp
(leaf powerline
  :ensure t
  :init
  ;; ddskk そのものに modeline を更新する関数があるので無効化する
  (defun my:disable-skk-setup-modeline ()
    "skk-setup-modeline による modeline の更新を無効化"
    (setq skk-indicator-alist (skk-make-indicator-alist))
    (force-mode-line-update t))
  (advice-add 'skk-setup-modeline :override 'my:disable-skk-setup-modeline)
  ;; Git の表示のカスタマイズ
  (defpowerline my:powerline-vc
    (when (and (buffer-file-name (current-buffer)) vc-mode)
      (format "%s"
              (replace-regexp-in-string "Git\\(:\\|-\\)" ""
                                        (format-mode-line '(vc-mode vc-mode))))))
  (defpowerline my:powerline-buffer-percentage
    (format "%.2s" (let ((current (format-mode-line "%p")))
                     (cond
                      ((string= current "All") "・")
                      ((string= current "Bottom") "↑")
                      ((string= current "Top") "↓")
                      (t current)
                      ))))
  ;; major-mode のアイコン表示
  (defun my:modeline-icon-for-mode (&rest mode)
    (when (featurep 'all-the-icons)
      (apply #'all-the-icons-icon-for-mode mode)))
  (defpowerline my:powerline-major-mode
    (propertize (format-mode-line (my:modeline-icon-for-mode major-mode))
                'mouse-face 'mode-line-highlight
                'help-echo "Major mode\n\ mouse-1: Display major mode menu\n\ mouse-2: Show help for major mode\n\ mouse-3: Toggle minor modes"
                'local-map (let ((map (make-sparse-keymap)))
                             (define-key map [mode-line down-mouse-1]
                               `(menu-item ,(purecopy "Menu Bar") ignore
                                           :filter (lambda (_) (mouse-menu-major-mode-map))))
                             (define-key map [mode-line mouse-2] 'describe-mode)
                             (define-key map [mode-line down-mouse-3] mode-line-mode-menu)
                             map)))
  ;; theme のカスタマイズ
  (defun my:powerline-theme ()
    "Custom theme for personal use."
    (interactive)
    (setq-default mode-line-format
                  '("%e"
                    (:eval
                     (let* ((active (powerline-selected-window-active))
                            ;; (mode-line-buffer-id (if active 'mode-line-buffer-id 'mode-line-buffer-id-inactive))
                            (mode-line (if active 'mode-line 'mode-line-inactive))
                            (face1 (if active 'powerline-active1 'powerline-inactive1))
                            (face2 (if active 'powerline-active2 'powerline-inactive2))
                            (separator-left
                             (intern (format "powerline-%s-%s"
                                             (powerline-current-separator)
                                             (car powerline-default-separator-dir))))
                            (separator-right
                             (intern (format "powerline-%s-%s"
                                             (powerline-current-separator)
                                             (cdr powerline-default-separator-dir))))
                            (lhs (list (powerline-raw (substring skk-modeline-input-mode 2 -1) mode-line 'l)
                                       (powerline-raw mode-line-mule-info mode-line 'l)
                                       (powerline-raw " ")
                                       (my:powerline-major-mode)
                                       (powerline-raw "%*" mode-line 'l)
                                       (powerline-raw " ")
                                       (funcall separator-left mode-line face1)
                                       ;; (powerline-buffer-id mode-line-buffer-id 'l)
                                       (powerline-buffer-id face1 'r)
                                       (powerline-raw " " face1)
                                       (funcall separator-left face1 face2)
                                       (my:powerline-vc face2 'r)
                                       ))
                            (rhs (list (powerline-raw global-mode-string face2 'r)
                                       (funcall separator-right face2 face1)
                                       (powerline-process face1 'l)
                                       (powerline-minor-modes face1 'l)
                                       (powerline-narrow face1 'l)
                                       (funcall separator-right face1 mode-line)
                                       ;; (powerline-raw " ")
                                       ;; (powerline-raw "%4l" mode-line 'l)
                                       ;; (powerline-raw ":" mode-line 'l)
                                       ;; (powerline-raw "%3c" mode-line 'r)
                                       ;; (powerline-raw " " mode-line)
                                       (my:powerline-buffer-percentage mode-line 'l)
                                       (powerline-raw " " mode-line 'l)
                                       )))
                       (concat (powerline-render lhs)
                               (powerline-fill face2 (powerline-width rhs))
                               (powerline-render rhs)))))))
  :config
  ;; 半角スペース
  (setq powerline-default-separator 'utf-8     ; UTF-8
        powerline-utf-8-separator-left #x20    ; 半角スペース
        powerline-utf-8-separator-right #x20   ; 半角スペース
        powerline-display-buffer-size nil
        powerline-display-mule-info t
        powerline-display-hud t
        )
  (my:powerline-theme)
  )
    #+end_src
* 起動時間の出力
  [[http://memo.sugyan.com/entry/20120120/1327037494][起動時間を計測する 改訂版 - すぎゃーんメモ]]
  #+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs init time: %.3f sec"
                     (float-time (time-subtract
                                  after-init-time
                                  before-init-time)))))
  #+end_src
* LICENSE
  幾つかの関数の元ネタとして Emacs 本体のコードを参照したので, GPL-3 or later です．
  #+begin_example
Copyright (C) 2011--2017 Youhei SASAKI <uwabami@gfd-dennou.org>
.
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
.
This package is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
.
You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
  #+end_example
