#+TITLE: Emacs の設定
#+DATE: 2019-01-11 01:58:25
#+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
* ヘッダ
  #+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
;; Configurations for Emacs
;; Youhei SASAKI <uwabami@gfd-dennou.org>
;; see also https://uwabami.github.io/cc-env/Emacs.html
  #+END_SRC
* ディレクトリ構成
  分割した設定ファイル群やパッケージで install したパッケージ
  の置き場所は =user-emacs-directory= 以下にまとめています．

  試行錯誤の結果，ディレクトリ構成は以下のようにしました:
  #+BEGIN_EXAMPLE
    ~/.emacs.d/
     |-- Makefile    ←  byte-compile 用の rule
     |-- README.org  ←  本ファイル．`org-babel-tangle' で init.el を生成
     |-- modules/    ←  git submodules. 今の所 leaf.el のみ
     |-- pkg/
         |-- elpa/   ←  package.el で導入したパッケージが置かれる場所
         `-- quelpa/ ←  quelpa で導入したパッケージが置かれる場所
     |-- share/      ←  (基本的に)参照するだけの資源置き場所
     `-- tmp/        ←  一次ファイルの置き場所
  #+END_EXAMPLE
  上記ディレクトリ構成を設定ファイルで使用するためにディレクトリ配置を宣言しておきます．
  #+BEGIN_SRC emacs-lisp
(when load-file-name
  (setq user-emacs-directory (file-name-directory load-file-name)))
(defconst my:d:share
  (expand-file-name "share/" user-emacs-directory))
(defconst my:d:tmp
  (expand-file-name "tmp/" user-emacs-directory))
  #+END_SRC
  ついでに，
  =custom-set-variables= は別ファイルに出力，終了時に削除するようにしています．
  #+BEGIN_SRC emacs-lisp
(setq custom-file (concat my:d:tmp "custom.el"))
(add-hook 'kill-emacs-hook
          (lambda ()
            (if (file-exists-p custom-file)
                (delete-file custom-file))))
  #+END_SRC
  +init.elが汚れる気がしてあまり好きではないのですが...皆さん気にしてないんですかね+
* Package の初期化
  ほとんど leaf で設定するので不要?
  #+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (locate-user-emacs-file "modules/leaf.el/"))
(require 'leaf nil 'noerror)
(leaf package
  :init
  (setq package-enable-at-startup t
        package-user-dir (locate-user-emacs-file "pkg/elpa")
        package-gnupghome-dir (expand-file-name ".gnupg" (getenv "HOME")))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (eval-when-compile
    (unless (file-exists-p (locate-user-emacs-file "tmp/bootstrap-stamp"))
      (package-refresh-contents)))
  :config
  (package-initialize)
  (setq leaf-backend/:ensure 'package)
  )
   #+END_SRC
  bind-key
  #+BEGIN_SRC emacs-lisp
(leaf bind-key
  :ensure t
  :config
  (setq leaf-backend/:bind  'bind-key
        leaf-backend/:bind* 'bind-key))
  #+END_SRC
  quelpa
  #+BEGIN_SRC emacs-lisp
(leaf quelpa
  :ensure t
  :init
  (setq quelpa-dir (locate-user-emacs-file "pkg/quelpa")
        quelpa-upgrade-p nil
        quelpa-checkout-melpa-p nil
        quelpa-update-melpa-p nil
        quelpa-melpa-recipe-stores nil)
  )
  #+END_SRC
  その他, 便利なアレコレ
  #+BEGIN_SRC emacs-lisp
(leaf cl-lib)
(leaf el-x     :ensure t)
(leaf diminish :ensure t)
(leaf s        :ensure t)
  #+END_SRC
* 独自関数
  細かい独自関数，など．
** カーソルのある位置の face を調べる関数
   わりと良く使う. 地味に便利
   #+BEGIN_SRC emacs-lisp
(defun my:describe-face-at-point ()
  (interactive)
  (message "%s" (get-char-property (point) 'face)))
   #+END_SRC
** 機能を無効化するための関数の定義
   =line-number-mode= など「有効無効をtoggleする関数」は
   慣習的に =0= 以下の数字を指定すると明示的に無効化できるので，
   =-1= を設定する関数を定義しておく.
   #+BEGIN_SRC emacs-lisp
(defun my:disable-builtin-mode (mode)
  "与えられた mode が存在するのであれば -1 をセットして無効化"
  (if (fboundp mode) (funcall mode -1)))
   #+END_SRC
** dpkg-status
   もっと良い方法がありそうなモンですが．
   #+BEGIN_SRC emacs-lisp
(defun my:dpkg-status (package)
  "Return the package status from dpkg --get-selections."
  (string-match "^ii" (shell-command-to-string (format "dpkg -l %s" package))))
   #+END_SRC
** 行末の無駄な空白/改行を削除する
   @see [[http://d.hatena.ne.jp/tototoshi/20101202/1291289625][無駄な行末の空白を削除する(Emacs Advent Calendar jp:2010)]]

   ただし, RD や Markdown だと空白行に意味があったりするので，
   必要に応じて拡張子で判断して外している．
   #+BEGIN_SRC emacs-lisp
(defvar my:delete-trailing-whitespace-exclude-suffix
  (list "\\.rd$" "\\.md$" "\\.rbt$" "\\.rab$"))
(defun my:delete-trailing-whitespace ()
  (interactive)
  (cond
   ((equal nil
           (cl-loop for pattern in my:delete-trailing-whitespace-exclude-suffix
                    thereis (string-match pattern buffer-file-name)))
    (delete-trailing-whitespace))))
(add-hook 'before-save-hook 'my:delete-trailing-whitespace)
   #+END_SRC
** 空になったファイルを尋ねずに自動削除
   ゴミが残らないし，地味に便利．
   #+BEGIN_SRC emacs-lisp
(defun my:delete-file-if-no-contents ()
  (when (and (buffer-file-name (current-buffer))
             (= (point-min) (point-max)))
    (delete-file
     (buffer-file-name (current-buffer)))))
(if (not (memq 'my:delete-file-if-no-contents after-save-hook))
    (setq after-save-hook
          (cons 'my:delete-file-if-no-contents after-save-hook)))
   #+END_SRC
** scratch を殺さない. 消したら再生成
   ...元ネタがどこだったのか忘れてしまった...
   #+BEGIN_SRC emacs-lisp
(defun my:make-scratch (&optional arg)
  (interactive)
  (progn
    ;; "*scratch*" を作成して buffer-list に放り込む
    (set-buffer (get-buffer-create "*scratch*"))
    (funcall initial-major-mode)
    (erase-buffer)
    (when (and initial-scratch-message (not inhibit-startup-message))
      (insert initial-scratch-message))
    (or arg
        (progn
          (setq arg 0)
          (switch-to-buffer "*scratch*")))
    (cond ((= arg 0) (message "*scratch* is cleared up."))
          ((= arg 1) (message "another *scratch* is created")))))

(defun my:buffer-name-list ()
  (mapcar (function buffer-name) (buffer-list)))
(add-hook 'kill-buffer-query-functions
          ;; *scratch* バッファで kill-buffer したら内容を消去するだけにする
          (function (lambda ()
                      (if (string= "*scratch*" (buffer-name))
                          (progn (my:make-scratch 0) nil)
                        t))))
(add-hook 'after-save-hook
          ;; *scratch* バッファの内容を保存したら
          ;; *scratch* バッファを新しく作る.
          (function
           (lambda ()
             (unless (member "*scratch*" (my:buffer-name-list))
               (my:make-scratch 1)))))
   #+END_SRC
** ファイル名を minibuffer におさまる様に整形
   zsh 風味
   #+BEGIN_SRC emacs-lisp
(defun my:shorten-file-path (fpath max-length)
  "Show up to `max-length' characters of a directory name `fpath' like zsh"
  (let* ((path (reverse (split-string (abbreviate-file-name fpath) "/")))
         (output "")
         (top (string-join (reverse (last path 3)) "/"))
         (vmax (- max-length 4 (length top)))
         (path (butlast path 3))
         )
    (while (and path
                (and (< (length output) vmax)
                     (< (length (concat "/" (car path) output)) vmax)))
      (setq output (concat "/" (car path) output))
      (setq path (cdr path)))
    ;; 省略
    (when path
      (setq output (concat "/..." output)))
    (format "%s%s" top output)
    ))
   #+END_SRC
* 環境変数の読み込み: =exec-path-from-shell=
  zsh で設定した =PATH= などの環境変数を Emacs に引き継ぐために
  [[https://github.com/purcell/exec-path-from-shell][purcell/exec-path-from-shell]] を使います．
  今の所
  - =SHELL=
  - =DEBFULLNAME=
  - =DEBEMAIL=
  - =TEXMFHOME=
  - =SKKSERVER=
  - =http_proxy=
  - =GPG_KEY_ID=
  - =GPG_AGENT_INFO=
  - =PASSWORD_STORE_DIR=
  - =PATH=
  を読み込んでいます．
  #+BEGIN_SRC emacs-lisp
(defvar my:d:password-store nil)
(leaf exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns)) (exec-path-from-shell-initialize))
  (exec-path-from-shell-copy-envs
   '("SHELL"
     "DEBFULLNAME"
     "DEBEMAIL"
     "SKKSERVER"
     "TEXMFHOME"
     "http_proxy"
     "GPG_KEY_ID"
     "GPG_AGENT_INFO"
     "PASSWORD_STORE_DIR"
     "PATH"
     ))
  (setq user-full-name (concat (getenv "DEBFULLNAME"))
        user-mail-address (concat (getenv "DEBEMAIL"))
        my:d:password-store (concat (getenv "PASSWORD_STORE_DIR") "/Emacs/" (system-name)))
  )
  #+END_SRC
* 言語の設定
  日本語, UTF-8 にしています.
  #+BEGIN_SRC emacs-lisp
(set-language-environment "Japanese")
(prefer-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-default 'buffer-file-coding-system 'utf-8)
  #+END_SRC
  その他, 機種依存文字等についての設定をアレコレ.
** cp5022x.el
   Emacs23 から内部が Unicode ベースになっています．

   しかし文字コードの変換は GNU libc の iconv をベースにしているため，
   環境によっては文字の変換がうまく行なえません．
   そこで言語設定前に =cp5022x.el= をインストールすることにしています．
   #+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'locale-eaw-emoji)
  (quelpa '(locale-eaw-emoji
            :fetcher github
            :repo "uwabami/locale-eaw-emoji")))
(leaf locale-eaw-emoji
  :config
  (eaw-and-emoji-fullwidth))
   #+END_SRC
** OSの違いに起因する条件分岐
   Mac と Linux では同じ Unicode でも正規化が異なります
   (具体的には Mac のファイルシステムである HFS+ では Unicode の正規化が異なります).
   Unicode の正規化と Mac OS X 特有の事情については
   - [[http://homepage1.nifty.com/nomenclator/unicode/normalization.htm][Unicode正規化とは]]
   - [[http://www.sakito.com/2010/05/mac-os-x-normalization.html][Mac OS X におけるファイル名に関するメモ(NFC, NFD等)]]
   等が参考になるでしょう.

   日本語のファイル名を扱うことは滅多にないものの,
   たまに祟りがあるのでそれを回避するための設定をしています.

   Windows の場合はファイル名などは cp932 にしているものの,
   最近 Windows 使っていないので良く知りません(というわけで，設定を捨てました).
   +さらに，最近は Mac OS でも Emacs 使ってないから，これが正しのか良くわからない...+
   #+BEGIN_SRC emacs-lisp
(leaf ucs-normalize
  :if (eq system-type 'darwin)
  :byte-compile-vars mac-pass-control-to-system ns-command-modifier ns-alternate-modifier
  :config
  (set-file-name-coding-system 'utf-8-hfs)
  (setq locale-coding-system 'utf-8-hfs)
  ;; ついでにキーバインド: Ctrl を Mac から奪い取る
  (setq mac-pass-control-to-system t)
  ;; Cmd と Option を逆にする
  (setq ns-command-modifier 'meta)
  (setq ns-alternate-modifier 'super)
  (global-set-key [ns-drag-file] 'ns-find-file)
  )
   #+END_SRC
* Elscreen
** 導入 [0/1]
   modeline の表示そのものは無効化しておく．
   - [ ] Debian パッケージ版は古い．更新すべき
   #+BEGIN_SRC emacs-lisp
(quelpa '(elscreen
          :fetcher github
          :repo "emacs-jp/elscreen"))
(leaf elscreen
  :init
  (setq elscreen-tab-display-control nil
        elscreen-prefix-key (kbd "C-o")
        elscreen-display-tab 8
        elscreen-display-screen-number nil)
  :config
  (elscreen-start))
   #+END_SRC
** elscreen + zsh での連携
  詳細は
  - [[https://masutaka.net/chalow/2011-09-28-1.html][ターミナルの zsh と Emacs を風のように駆け抜ける！]]
  - [[http://syohex.hatenablog.com/entry/20111026/1319606395][cdeを改良]]
  - [[https://qiita.com/__hage/items/2dd732b4dd68e124e8bd][cdeとelscreen-separate-buffer-listの相性が悪い]]
  などを参考に.
  #+BEGIN_SRC emacs-lisp
(defun return-current-working-directory-to-shell ()
  (expand-file-name
   (with-current-buffer
       (if (featurep 'elscreen)
           (let* ((frame-confs (elscreen-get-frame-confs (selected-frame)))
                  (num (nth 1 (assoc 'screen-history frame-confs)))
                  (cur-window-conf
                   (assoc 'window-configuration
                          (assoc num (assoc 'screen-property frame-confs))))
                  (marker (nth 2 cur-window-conf)))
             (marker-buffer marker))
         (nth 1
              (assoc 'buffer-list
                     (nth 1 (nth 1 (current-frame-configuration))))))
     default-directory)))
  #+END_SRC
* 日本語入力: =ddskk=
  [[http://openlab.ring.gr.jp/skk/ddskk-ja.html][Daredevil SKK (DDSKK)]] をメインで使用中．無いと途方に暮れる．
  ちなみにGTKが有効になっていると =gtk-immodule= なんかと衝突するので
  =~/.Xresources= で xim を無効にしておくと良い．
  例えば以下の様に:
  #+BEGIN_SRC conf :tangle no
! disable XIM
Emacs*useXIM: false
  #+END_SRC
** Emacs 本体側の設定
   実際の設定は別ファイルで行なわれるため
   ここでは設定ファイルの位置変更を変更している．
   #+BEGIN_SRC emacs-lisp
(unless (require 'skk nil 'noerror)
  (package-install 'ddskk))
(leaf skk
  :bind (("C-x j"   . skk-mode)
         ("C-x C-j" . skk-mode)
         ("C-\\"    . skk-mode))
  :init
  (setq skk-user-directory (concat my:d:tmp "skk")
        skk-init-file (concat user-emacs-directory "init-ddskk")
        default-input-method "japanese-skk" )
  )
   #+END_SRC
** DDSKK 本体の設定
   sticky shift: [[http://homepage1.nifty.com/blankspace/emacs/sticky.html][sticky shift]] を参照のこと.
   ddskk の 14.2 以降から同梱されるようになった(ありがたい)
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-sticky-key ";")
   #+END_SRC
   変換候補の表示位置
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-show-candidates-always-pop-to-buffer t)
   #+END_SRC
   候補表示件数を2列に
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-henkan-show-candidates-rows 2)
   #+END_SRC
   日本語表示しない
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-japanese-message-and-error nil)
   #+END_SRC
   メニューを日本語にしない -> toolbar 非表示だし.
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-show-japanese-menu nil)
   #+END_SRC
   注釈の表示
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-show-annotation nil)
   #+END_SRC
   インジケータの表示のカスタマイズ
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-latin-mode-string "[_A]")
(setq skk-hiragana-mode-string "[あ]")
(setq skk-katakana-mode-string "[ア]")
(setq skk-jisx0208-latin-mode-string "[Ａ]")
(setq skk-jisx0201-mode-string "[_ｱ]")
(setq skk-abbrev-mode-string "[aA]")
(setq skk-indicator-use-cursor-color nil)
   #+END_SRC
   インジケータを左端に表示
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-status-indicator 'left)
   #+END_SRC
   mode-line が動くのが許せないので，ちょっと修正
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(defadvice skk-make-indicator-alist
    (after my:set-skk-default-indicator activate)
  (dolist (elem
           '((abbrev " [aA]" . "--[aA]:")
             (latin " [_A]" . "--[_A]:")
             (default " [--]" . "--[--]:")))
    (setq ad-return-value
          (append (cons elem nil)
                  (delq (assoc (car elem) ad-return-value) ad-return-value)))))
(setq skk-show-inline t)
   #+END_SRC
   カーソルには色をつけない
   #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-use-color-cursor nil)
   #+END_SRC
*** 編集関連
    キーバインド
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(global-set-key "\C-x\C-j" 'skk-mode)
(global-set-key "\C-xj" 'skk-mode)
(global-set-key "\C-j" 'skk-mode)
(global-set-key "\C-\\" 'skk-mode)
    #+END_SRC
    半角カナを入力
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-use-jisx0201-input-method t)
    #+END_SRC
    Enter で改行しない
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-egg-like-newline t)
    #+END_SRC
    "「"を入力したら"」"も自動で挿入
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-auto-insert-paren t)
    #+END_SRC
    句読点変換ルール
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-kuten-touten-alist
      '(
        (jp    . ("。" . "、"))
        (en-jp . ("．" . "，"))
        (en    . (". " . ", "))
        ))
(setq-default skk-kutouten-type 'en)
    #+END_SRC
    全角記号の変換: @ での日付入力は使わない
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-rom-kana-rule-list
      (append skk-rom-kana-rule-list
              '(("!" nil "!")
                (":" nil ":")
                (";" nil ";")
                ("?" nil "?")
                ("z " nil "　")
                ("\\" nil "\\")
                ("@" nil "@")
                )))
    #+END_SRC
    送り仮名が厳密に正しい候補を優先
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-henkan-strict-okuri-precedence t)
    #+END_SRC
    辞書の共有
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-share-private-jisyo t)
    #+END_SRC
    変換候補を縦に表示
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-show-inline 'vertical)
    #+END_SRC
*** インクリメンタルサーチ
    minibuffer 内では強制的に skk off.
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(add-hook 'skk-mode-hook
          (lambda ()
            (and (skk-in-minibuffer-p)
                 (skk-mode-exit))))
(setq skk-isearch-start-mode 'latin)
    #+END_SRC
    インクリメンタルサーチは migemo に任せることに．
*** 辞書の設定
    追加している辞書の一覧は
    - [[http://www.chibutsu.org/jisho/][地球物理辞書]]
    - [[http://www.geocities.jp/living_with_plasma/tanudic.html][天文・天体物理用語の漢字変換用辞書]]
    - はてなキーワード
    - [[http://matsucon.net/material/dic/][2ちゃんねる顔文字辞書 MatsuCon]]
    - [[http://matsucon.net/][MatsuCon]]
    といった所.
    はてなキーワードからの辞書の抽出は [[http://d.hatena.ne.jp/znz][znz]] さんの
     - [[http://rubyist.g.hatena.ne.jp/znz/20060924/p1][「はてなダイアリーキーワードふりがなリスト」を SKK の辞書に変換]]
    を参考に.
    [[http://matsucon.net/][MatsuCon]] で公開されている顔文字に関しては
    顔文字に ; や が含まれている場合に, 適宜quoteする必要があるので
    以下のスクリプトで適当に変換.
    #+BEGIN_SRC ruby :tangle no
#!/usr/bin/env ruby
require 'nkf'
src = ARGV[0]
if ARGV.size < 1
  puts "usage: ime2skk.rb ime_dictionary"
  exit 0
end
File.open(src, "r") {|f|
  f.each do |line|
    line_euc = NKF.nkf("-S -e",line)
    if line_euc =~ /^([^!]+?)\t(.+?)\t.+$/
      entry = $1
      content = $2
      if content =~/;/
        puts entry + " /(concat \"" + content.gsub(';','\\\\073') + "\")/"
      elsif content =~/\//
        puts entry + " /(concat \"" + content.gsub('/','\\\\057') + "\")/"
      else
        puts entry + " /" + content + "/"
      end
    end
  end
}
    #+END_SRC
    他にも quote する必要あるような気もするけれど, それは気がついた時に.

    辞書サーバの指定は以下.
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(cond
 ((getenv "SKKSERVER")
  (setq skk-server-host "127.0.0.1"
        skk-server-portnum "1178"
        skk-large-jisyo  nil)
  (add-to-list 'skk-search-prog-list
               '(skk-server-completion-search) t)
  (add-to-list 'skk-search-prog-list
               '(skk-comp-by-server-completion) t))
 (t
  (setq skk-get-jisyo-directory (concat my:d:tmp "skk-jisyo")
        skk-large-jisyo (concat skk-get-jisyo-directory "/SKK-JISYO.L")))
 )
(when (file-exists-p "/usr/local/share/skkdic/SKK-JISYO.emoji.utf8")
  (setq skk-extra-jisyo-file-list
        (list '("/usr/local/share/skkdic/SKK-JISYO.emoji.utf8" . utf-8))))
    #+END_SRC
    辞書登録の際に送り仮名を削除
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-check-okurigana-on-touroku 'auto)
    #+END_SRC
    漢字登録のミスをチェックする
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(setq skk-check-okurigana-on-touroku t)
    #+END_SRC
*** 動的補完
    まだ設定していない...
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
    ;; ;; 動的補完
    ;; (setq skk-dcomp-activate t)
    ;; (setq skk-dcomp-multiple-activate t)
    ;; (setq skk-dcomp-multiple-rows 5)
    ;; ;; 動的補完の複数表示群のフェイス
    ;; (set-face-foreground 'skk-dcomp-multiple-face "Black")
    ;; (set-face-background 'skk-dcomp-multiple-face "LightGoldenrodYellow")
    ;; (set-face-bold-p 'skk-dcomp-multiple-face nil)
    ;; ;; 動的補完の複数表示郡の補完部分のフェイス
    ;; (set-face-foreground 'skk-dcomp-multiple-trailing-face "dim gray")
    ;; (set-face-bold-p 'skk-dcomp-multiple-trailing-face nil)
    ;; ;; 動的補完の複数表示郡の選択対象のフェイス
    ;; (set-face-foreground 'skk-dcomp-multiple-selected-face "White")
    ;; (set-face-background 'skk-dcomp-multiple-selected-face "LightGoldenrod4")
    ;; (set-face-bold-p 'skk-dcomp-multiple-selected-face nil)
    #+END_SRC
*** 部首変換, 総画数変換
    上手く使いこなせていない
    #+BEGIN_SRC emacs-lisp :tangle init-ddskk.el
(add-to-list 'skk-search-prog-list
             '(skk-tankan-search 'skk-search-jisyo-file
                                 skk-large-jisyo 10000))
    #+END_SRC
* Copy & Paste
** Linux: =xclip=
   =xclip= で clipboard とデータをやりとり．
   #+BEGIN_SRC emacs-lisp
(leaf xclip
  :if (executable-find "xclip")
  :ensure t
  :config
  (xclip-mode 1))
   #+END_SRC
   clipboard と PRIMARY の同期には =gpaste= を使っている．
* インクリメンタル検索: =migemo=
  #+BEGIN_SRC emacs-lisp
(quelpa '(migemo
          :fetcher github
          :repo "uwabami/migemo"))
(leaf migemo
  :if (executable-find "cmigemo")
  :byte-compile-funcs ((migemo-init . migemo))
  :config
  (setq migemo-command "cmigemo"
        migemo-options '("-q" "--emacs")
        migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict"
        migemo-user-dictionary nil
        migemo-regex-dictionary nil
        migemo-coding-system 'utf-8-unix)
  (migemo-init)
  )
  #+END_SRC
* 補完: =ido=
  補完は =ido= が軽いし速いので好み.
  見た目がちょっと簡素すぎる気もするので、なんとか弄りたい所ではある。
** =ido= の設定
   #+BEGIN_SRC emacs-lisp
(leaf ido
  :bind (("C-x C-f" . ido-find-file)
         )
  :config
  (ido-mode t)
  ;; (ido-everywhere t)  ; <- Wanderlust みたいに, 過去の選択を覚えている奴と相性悪い.
  (setq ido-enable-prefix nil             ; prefix match 入力を先頭一致可能
        ido-confirm-unique-completion t   ; TAB で名前の一致まで. その後 RET で実行
        ido-enable-flex-matching t        ; flx matching を試す際には prefix を無効化すること
        ido-enable-dot-prefix t           ; . を prefix として扱う
        ido-default-file-method   'selected-window
        ido-default-buffer-method 'selected-window
        ido-max-directory-size 10000
        ido-enable-tramp-completion nil
        ido-use-faces t
        ido-ignore-extensions t
        ido-cannot-complete-command 'ido-next-match
        ido-save-directory-list-file (concat my:d:tmp "ido.last"))
  ;; 補完で無視する拡張子の追加．そのうち増える．
  (cl-loop for ext in
           '(".dvi"
             ".fdb_latexmk"
             ".fls"
             ".ilg"
             ".jqz"
             ".mod"
             ".nav"
             ".out"
             ".snm"
             ".synctex.gz"
             ".vrb"
             )
           do (add-to-list 'completion-ignored-extensions ext))
  (add-hook 'ido-setup-hook
            (lambda ()
              (define-key ido-completion-map (kbd "C-h") 'ido-delete-backward-updir)
              (define-key ido-completion-map (kbd "C-l") 'ido-delete-backward-updir)))
  (defun my:ido-disable-line-trucation ()
    (set (make-local-variable 'truncate-lines) nil))
  (add-hook 'ido-minibuffer-setup-hook 'my:ido-disable-line-trucation)
  )
   #+END_SRC
** =flx-ido=: flex match の強化
   曖昧マッチが非常に直感的になった．地味に便利で手放せない．
   #+BEGIN_SRC emacs-lisp
(leaf flx-ido
  :ensure t
  :config
  (flx-ido-mode 1)
  (setq flx-ido-use-faces nil
        flx-ido-threshold 10000)
  )
   #+END_SRC
** =ido-grid-mode=: 候補を並べて表示
   横に並ぶと正直シンドイので並べてみる。
   #+BEGIN_SRC emacs-lisp
(quelpa '(ido-grid
          :fetcher github
          :repo "larkery/ido-grid.el"))
(leaf ido-grid
  :config
  (setq ido-grid-enabled t
        ido-grid-start-small nil
        ido-grid-rows 0.15
        ido-grid-max-columns nil
        ido-grid-indent 1
        ido-grid-column-padding 3
        ido-grid-bind-keys t
        ido-max-directory-size 100000  ;; avoid [Too Big]
        )
  (ido-grid-enable)
  (defun my:ido-grid-force-one-columns (o &rest args)
    (let ((ido-grid-max-columns 1)   ;; single vertical col
          (ido-grid-start-small nil) ;; popup immediately
          (ido-grid-rows 0.15))      ;; 15% of frame height
      (apply o args)
      ))
  )
   #+END_SRC
** =ido-recentf=: recentf を ido で
   "recentf-list" の結果を整形して, minibuffer に納まる様に縮小したり
   #+BEGIN_SRC emacs-lisp
(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (let ((files (mapcar (lambda (f)
                         (cons (my:shorten-file-path f 77) f))
                       recentf-list)))
    (let ((selected (ido-completing-read "Files: " (mapcar #'car files))))
      (find-file (assoc-default selected files)))))
(bind-key "C-x C-r" 'ido-recentf-open)
   #+END_SRC
** =smex=
   M-x を ido で。
   #+BEGIN_SRC emacs-lisp
(leaf smex
  :ensure t
  :bind (("M-x" . smex))
  :config
  (setq smex-auto-update t
        smex-save-file (concat my:d:tmp "smex-items")
        smex-prompt-string "smex: "
        smex-flex-matching nil
        )
  )
   #+END_SRC
* 起動時間の計測
  [[http://memo.sugyan.com/entry/20120120/1327037494][起動時間を計測する 改訂版 - すぎゃーんメモ]]
  #+BEGIN_SRC emacs-lisp
(defun my:emacs-init-time ()
  "Emacs booting time in msec."
  (message "Emacs booting time: %.0f [msec] = `emacs-init-time'."
           (* 1000
              (float-time (time-subtract
                           after-init-time
                           before-init-time)))))
(add-hook 'after-init-hook #'my:emacs-init-time)
  #+END_SRC
* 警告の抑制
  普段は殆んど見ない.
  #+BEGIN_SRC emacs-lisp
;; (setq byte-compile-warnings
;;       '(free-vars
;;         unresolved
;;         callargs
;;         redefine
;; ;;        obsolete
;;         noruntime
;;         cl-functions
;;         interactive-only
;;         make-local))
;; (setq ad-redefinition-action 'accept)
  #+END_SRC
* エラー表示の抑制
  これも普段は見ない.
  #+BEGIN_SRC emacs-lisp
;; (setq debug-on-error nil)
  #+END_SRC
* フォントと色
  そろそろテーマにした方が良い，とは思ってはいる．
  #+BEGIN_SRC emacs-lisp
(setq ansi-color-names-vector
      [unspecified "#242424" "#FF4c4c" "#4cff4c" "#ffff4c"
                   "#4c4cff" "#ff4cff" "#4cffff" "#f6f3e8"]
      )
(defun my:load-window-config ()
  "load window-system specific settings"
  (interactive)
  (when window-system
    (progn
      (set-frame-parameter nil 'alpha 90)
      (set-face-attribute 'default nil
                          :family "RictyDiscord"
                          :height 180)
      (set-face-attribute 'fixed-pitch nil
                          :family "RictyDiscord"
                          :height 180)
      (set-face-attribute 'variable-pitch nil
                          :family "RictyDiscord"
                          :height 180)
      (set-background-color "#242424")
      )))
(setq frame-background-mode (frame-parameter nil 'background-mode))
(setq default-frame-alist
      '(
        (foreground-color . "#F6F3E8")
        (scroll-bar-foreground-color . "red")
        (vertical-scroll-bars . right)
        ))
(when (window-system)
  (my:load-window-config))
  #+END_SRC
  現在修正中．
  #+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(default                             ((t (:foreground "#F6F3E8" ))))
 '(cursor                              ((t (:foreground "#4CFF4C" :background "#4CFF4C" ))))
 ;; basic
 '(font-lock-builtin-face              ((t (:foreground "#7FBFFF" ))))
 '(font-lock-comment-delimiter-face    ((t (:foreground "#a5a5a6" ))))
 '(font-lock-comment-face              ((t (:foreground "#a5a5a6" ))))
 '(font-lock-constant-face             ((t (:foreground "#FFBF7F" ))))
 '(font-lock-doc-face                  ((t (:foreground "#7FFF7F" ))))
 '(font-lock-doc-string-face           ((t (:foreground "#7FFF7F" ))))
 '(font-lock-function-name-face        ((t (:foreground "#BF7FFF"))))
 '(font-lock-keyword-face              ((t (:foreground "#FF7F7F"))))
 '(font-lock-link-face                 ((t (:foreground "#7FFFFF" ))))
 '(font-lock-negation-char-face        ((t (:foreground "#7FFFFF" :bold t   :italic nil))))
 '(font-lock-preprocessor-face         ((t (:foreground "#FF4C4C" :bold nil :italic nil))))
 '(font-lock-regexp-grouping-backslash ((t (:foreground "#A5EE4C" :bold t   :italic nil))))
 '(font-lock-regexp-grouping-construct ((t (:foreground "#7F7FFF" :bold t   :italic nil))))
 '(font-lock-string-face               ((t (:foreground "#7FFF7F" ))))
 '(font-lock-type-face                 ((t (:foreground "#FFFF7F" ))))
 '(font-lock-variable-name-face        ((t (:foreground "#7F7FFF" ))))
 '(font-lock-warning-face              ((t (:foreground "#FF7FBF" :bold t ))))
 '(mode-line                           ((t (:foreground "#F6F3E8" :background "#222244" ))))
 '(mode-line-inactive                  ((t (:foreground "#666666" :background "#999999" :bold nil ))))
 '(fringe                              ((t (:foreground "#666666" :background "#282828" ))))
;; '(hl-line                           ((t (:inherit highlight :underline t ))))
;; '(highlight                         ((t (:background "#333333" ))))
 '(term-color-black                    ((t (:background "#242424" :foreground "#242424"))))
 '(term-color-blue                     ((t (:background "#4c4cff" :foreground "#4c4cff"))))
 '(term-color-cyan                     ((t (:background "#4cffff" :foreground "#4cffff"))))
 '(term-color-green                    ((t (:background "#4cff4c" :foreground "#4cff4c"))))
 '(term-color-magenta                  ((t (:background "#ff4cff" :foreground "#ff4cff"))))
 '(term-color-red                      ((t (:background "#ff4c4c" :foreground "#ff4c4c"))))
 '(term-color-white                    ((t (:background "#f6f3e8" :foreground "#f6f3e8"))))
 '(term-color-yellow                   ((t (:background "#ffff4c" :foreground "#ffff4c"))))
  ;;
 '(minibuffer-prompt                   ((t (:foreground "#BF7FFF" ))))
 '(region                              ((t (:background "#222244" ))))
 ;; dired
 '(dired-directory                     ((t (:bold t :foreground "#7F7FFF" ))))
 '(dired-flagged                       ((t (:inherit error ))))
 ;; '(dired-header
 '(dired-ignored                       ((t (:inherit shadow ))))
 ;; '(dired-mark
 ;; '(dired-marked
 '(dired-perm-write                    ((t (:bold t :foreground "#FFFF7F" ))))
 '(dired-symlink                       ((t (:bold t :foreground "#7FFFFF" ))))
 '(dired-warning                       ((t (:inherit font-lock-warning-face ))))
 ;; helm
 '(helm-source-header                  ((t (:foreground "#F6F3E8" :background "#224488" :bold t))))
 '(helm-visible-mark                   ((t (:inherit highlight ))))
 '(helm-selection                      ((t (:inherit highlight ))))
 '(helm-selection-line                 ((t (:inherit highlight ))))
 '(helm-ff-directory                   ((t (:inherit dired-directory ))))
 '(helm-bookmark-directory             ((t (:inherit helm-ff-directory ))))
 '(helm-buffer-directory               ((t (:inherit helm-ff-directory ))))
 '(helm-ff-dotted-directory            ((t (:inherit helm-ff-directory ))))
 '(helm-ff-file                        ((t (:inherit default ))))
 '(helm-bookmark-file                  ((t (:inherit helm-ff-file ))))
 '(helm-buffer-file                    ((t (:inherit helm-ff-file ))))
 '(helm-grep-file                      ((t (:inherit helm-ff-file ))))
 '(helm-etags-file                     ((t (:inherit helm-ff-file ))))
 '(helm-ff-executable                  ((t (:inherit helm-ff-file :foreground "#7FFF7F" :bold t))))
 '(helm-ff-symlink                     ((t (:inherit default :foreground "#7FFFFF" :bold t))))
 '(helm-ff-dotted-symlink-directory    ((t (:inherit helm-ff-symlink ))))
 '(helm-ff-invalid-symlink             ((t (:inherit default :foreground "#FF7F7F" ))))
 ;; ido
 '(ido-first-match                     ((t (:underline t :weight bold))))
 '(ido-only-match                      ((t (:foreground "#FFFF4C" :overline nil :weight bold))))
 '(ido-subdir                          ((t (:inherit dired-directory))))
 ;; '(ido-vertical-first-match-face       ((t (:inherit ido-first-match))))
 ;;'(ido-vertical-match-face             ((t (:foreground "#4CFF4C"))))
 ;; '(ido-grid-mode-match ((t (:inherit ido-first-match ))))
 ;; powerline
 '(powerline-active1                   ((t (:background "#000000":foreground "#F6F3E8"))))
 '(powerline-active2                   ((t (:background "#666666" :foreground "#F6F3E8"))))
 '(powerline-inactive1                 ((t (:inherit modeline-inactive))))
 '(powerline-inactive2                 ((t (:inherit modeline-inactive))))
 ;; preview-latex
 '(font-latex-sectioning-0-face        ((t (:inherit font-latex-sectioning-1-face))))
 '(font-latex-sectioning-1-face        ((t (:inherit font-latex-sectioning-2-face))))
 '(font-latex-sectioning-2-face        ((t (:inherit font-latex-sectioning-3-face))))
 '(font-latex-sectioning-3-face        ((t (:inherit font-latex-sectioning-4-face))))
 '(font-latex-sectioning-4-face        ((t (:inherit font-latex-sectioning-5-face ))))
 '(font-latex-sectioning-5-face        ((t (:inherit font-lock-type-face :bold t))))
 '(font-latex-slide-title-face         ((t (:inherit font-lock-type-face :bold t))))
 '(font-latex-subscript-face           ((t nil)))
 '(font-latex-superscript-face         ((t nil)))
 '(font-latex-math-face                ((t (:inherit font-lock-constant-face ))))
 '(font-latex-script-char-face         ((t (:inherit font-lock-preprocessor-face :bold t))))
 '(font-latex-verbatim-face            ((t (:inherit font-lock-doc-string-face ))))
 ;; elscreen
 '(elscreen-tab-control-face           ((t (:background "#222244" :foreground "#f6f3e8" :underline t :bold t ))))
 '(elscreen-tab-current-screen-face    ((t (:background "#222244" :foreground "#f6f3e8" :underline t :bold t ))))
 '(elscreen-tab-other-screen-face      ((t (:background "#222244" :foreground "#aaaaaa" :underline t :bold nil ))))
 '(elscreen-tab-background-face        ((t (:background "#222244" :foreground "#aaaaaa" :underline t :bold nil ))))
 ;; git-gutter
 '(git-gutter:added                    ((t (:inherit default :bold t :foreground "#4CFF4C" :background "#666666"))))
 '(git-gutter:deleted                  ((t (:inherit default :bold t :foreground "#FF7FBF" :background "#666666"))))
 '(git-gutter:modified                 ((t (:inherit default :bold t :foreground "#FFFF4C" :background "#666666"))))
 '(git-gutter:unchanged                ((t (:inherit default :background "#666666" ))))
 '(git-gutter:separator-face           ((t (:inherit default :foreground "#FF4C4C" :background "#666666"))))
  ;;; howm
 '(howm-mode-keyword-face              ((t (:foreground "#7F7FFF" :background nil ))))
 '(howm-mode-title-face                ((t (:foreground "#4CFFFF" :background nil ))))
 '(howm-reminder-deadline-face         ((t (:bold t :foreground "#FF4C4C" :background nil ))))
 '(howm-reminder-late-deadline-face    ((t (:bold t :underline t :foreground "#FF0000" :background nil ))))
 '(howm-reminder-today-face            ((t (:bold t :foreground "#FFBF7F" :background nil ))))
 '(howm-reminder-tomorrow-face         ((t (:bold t :foreground "#FF7FBF" :background nil ))))
 ;; outline
 '(outline-1                           ((t (:inherit font-lock-function-name-face :bold t))))
 '(outline-2                           ((t (:inherit font-lock-string-face :bold t))))
 '(outline-3                           ((t (:inherit font-lock-keyword-face :bold t))))
 '(outline-4                           ((t (:inherit font-lock-type-face :bold t ))))
 '(outline-5                           ((t (:inherit font-lock-constant-face :bold t ))))
 '(outline-6                           ((t (:inherit font-lock-variable-name-face :bold t))))
 '(outline-7                           ((t (:inherit font-lock-builtin-face :bold t ))))
 '(outline-8                           ((t (:inherit font-lock-comment-face :bold t ))))
 ;; org
 '(org-agenda-date-today               ((t (:underline t ))))
 '(org-agenda-date                     ((t (:foreground "#FFFFFF" ))))
 '(org-agenda-date-weekend             ((t (:foreground "#FF7F7F" :bold t))))
 '(org-agenda-calendar-event           ((t (:foreground "#F6F3E8" ))))
 '(org-hide                            ((t (:foreground "#4C4C4C" ))))
 ;;
 ;; moinmoin
 '(moinmoin-h1                         ((t (:inherit outline-1))))
 '(moinmoin-h2                         ((t (:inherit outline-2))))
 '(moinmoin-h3                         ((t (:inherit outline-3))))
 '(moinmoin-h4                         ((t (:inherit outline-4))))
 '(moinmoin-h5                         ((t (:inherit outline-5))))
 '(moinmoin-url                        ((t (:inherit font-lock-link-face))))
 '(moinmoin-url-title                  ((t (:inherit moinmoin-url :bold t))))
 '(moinmoin-anchor-ref-id              ((t (:inherit moinmoin-url :underline t))))
 '(moinmoin-anchor-ref-title           ((t (:inherit moinmoin-url :bold t))))
 '(moinmoin-wiki-link                  ((t (:inherit moinmoin-url :underline t ))))
 '(moinmoin-inter-wiki-link            ((t (:inherit moinmoin-url :underline t ))))
 '(moinmoin-item                       ((t (:inherit font-lock-doc-face ))))
 '(moinmoin-item-2                     ((t (:inherit font-lock-doc-face ))))
 )
;; review
;; '(review-mode-header1-face  ((t (:inherit outline-1))))
;; '(review-mode-header2-face  ((t (:inherit outline-2))))
;; '(review-mode-header3-face  ((t (:inherit outline-3))))
;; '(review-mode-header4-face  ((t (:inherit outline-4))))
;; '(review-mode-header5-face  ((t (:inherit outline-5))))
  #+END_SRC
* =powerline=: モードラインを綺麗に
** ddskk の表示のカスタマイズ
   SKK の状態がヒョコヒョコ動くのが嫌なので，
   =skk-modeline-input-mode= に常に現在の状況を表示する様にしておく．
 #+BEGIN_SRC emacs-lisp
(defun my:skk-modeline-input-mode ()
  "skk が読み込まれていない場合でも skk-modeline-input-mode に文字を入れて返す"
  (unless (boundp 'skk-modeline-inpt-mode)
    (setq skk-modeline-input-mode "--[--]:")))
(my:skk-modeline-input-mode)
   #+END_SRC
 ddskk そのものに modeline を更新する関数があるので無効化する
   #+BEGIN_SRC emacs-lisp
(defadvice skk-setup-modeline (around my:disable-skk-setup-modeline activate)
  "skk-setup-modeline による modeline の更新を無効化"
  (setq skk-indicator-alist (skk-make-indicator-alist))
  (force-mode-line-update t))
   #+END_SRC
** powerline 本体の設定．
   default-theme をベースに見たい物だけ表示するようにしてみた．
   変更点として,
   - separater は環境によってズレるので，半角スペースに変更
   - vc-mode でのアイコン表示に U+26A1⚡ High Voltage を使う
   といった事をしている. East Asian ambiguous Width char の扱いは面倒ですね
   #+BEGIN_SRC emacs-lisp
(leaf powerline
  :ensure t
  :config
  (setq powerline-default-separator 'utf-8
        ;; 半角スペース
        powerline-utf-8-separator-left  #x20
        powerline-utf-8-separator-right  #x20
        ;; デフォルトの⇔
        ;; powerline-utf-8-separator-left  #xe0b0
        ;; powerline-utf-8-separator-right #xe0b2
        ;; 上三角, 下三角
        ;; powerline-utf-8-separator-left  #xe0bc
        ;; powerline-utf-8-separator-right #xe0be
        ;; 壊れ枠
        ;; powerline-utf-8-separator-left  #xe0d2
        ;; powerline-utf-8-separator-right #xe0d4
        )
  (defpowerline my:powerline-vc
    (when (and (buffer-file-name (current-buffer)) vc-mode)
      (format "%s%s"
              (char-to-string #x26a1)
              (format-mode-line '(vc-mode vc-mode)))))
  (defun my:powerline-theme ()
    "Setup customize theme."
    (interactive)
    (setq-default
     mode-line-format
     '("%e"
       (:eval
        (let* ((active (powerline-selected-window-active))
               (mode-line-buffer-id (if active 'mode-line-buffer-id 'mode-line-buffer-id-inactive))
               (mode-line (if active 'mode-line 'mode-line-inactive))
               (face1 (if active 'powerline-active1 'powerline-inactive1))
               (face2 (if active 'powerline-active2 'powerline-inactive2))
               (separator-left (intern (format "powerline-%s-%s"
                                               (powerline-current-separator)
                                               (car powerline-default-separator-dir))))
               (separator-right (intern (format "powerline-%s-%s"
                                                (powerline-current-separator)
                                                (cdr powerline-default-separator-dir))))
               (lhs (list
                     (powerline-raw (substring skk-modeline-input-mode 2 -1) nil 'l)
                     (powerline-raw mode-line-mule-info mode-line 'l)
                     (powerline-raw "%*" mode-line 'l)
                     (powerline-buffer-id mode-line-buffer-id 'l)
                     (powerline-raw " ")
                     (funcall separator-left mode-line face1)
                     (powerline-major-mode face1 'l)
                     (powerline-process face1)
                     (powerline-narrow face1 'l)
                     (powerline-raw " " face1)
                     (funcall separator-left face1 face2)
                     (my:powerline-vc face2 'r)
                     ))
               (rhs (list
                     (powerline-raw global-mode-string face2 'r)
                     (funcall separator-right face2 face1)
                     (powerline-raw " " face1)
                     (powerline-minor-modes face1 'r)
                     (funcall separator-right face1 mode-line)
                     (powerline-raw "  ")
                     (powerline-raw "%6p" mode-line 'r)
                     ))
               )
          (concat (powerline-render lhs)
                  (powerline-fill face2 (powerline-width rhs))
                  (powerline-render rhs)))))))
  (my:powerline-theme)
  )
  #+END_SRC
